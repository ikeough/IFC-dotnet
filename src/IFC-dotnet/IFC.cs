/*
This code was generated by a tool. DO NOT MODIFY this code manually, unless you really know what you are doing.
 */
using System;
using System.ComponentModel;
using System.Collections.Generic;
using Newtonsoft.Json;
using System.Linq;
using System.Reflection;

namespace IFC4
{
	public abstract class BaseIfc
	{
		[JsonProperty("id")]
		public Guid Id{ get; set; }

		public BaseIfc()
		{
			Id = Guid.NewGuid();
		}

		public virtual string ToJSON()
		{
			var settings = new JsonSerializerSettings()
			{
				Formatting = Formatting.Indented,
				TypeNameHandling = TypeNameHandling.Objects
			};
			return JsonConvert.SerializeObject(this);
		}

        public virtual string STEPParameters(ref Dictionary<Guid, int> indexDictionnary)
        {
            return "";
        }

        public virtual string ToSTEP(ref Dictionary<Guid, int> indexDictionnary)
        {
            return string.Format("#{0} = {1}({2});\r\n",
                STEPValue(ref indexDictionnary),
                this.GetType().Name.ToUpper(),
                this.STEPParameters(ref indexDictionnary));
        }

        public virtual string STEPValue(ref Dictionary<Guid, int> indexDictionnary)
        {
            if (indexDictionnary.ContainsKey(Id))
            {
                return "#" + indexDictionnary[Id].ToString();
            }
            else
            {
                if (indexDictionnary.Count == 0)
                {
                    indexDictionnary.Add(Id, 1);
                    return "1";
                }
                int index = indexDictionnary.Values.Last() + 1;
                indexDictionnary.Add(Id, index);
                return "#" + index.ToString();
            }
        }
    }

	public abstract class Select : BaseIfc
	{
		[JsonProperty("value")]
		public dynamic Value {get;protected set;}
	}

	/// <summary>
	/// A type wrapper for IFC.
	/// </summary>
	public class IfcType<T> : BaseIfc
	{
		[JsonProperty("value")]
		public T Value{get;set;}
		public IfcType(T value)
		{
			Value = value;
		}

		public static implicit operator IfcType<T>(T value)
		{
			return new IfcType<T>(value);
		}

        public override string STEPValue(ref Dictionary<Guid, int> indexDictionnary)
        {
            return Value.ToString();
        }

    }
	
	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcabsorbeddosemeasure.htm
	/// </summary>
	public class IfcAbsorbedDoseMeasure : IfcType<double>
	{
		public IfcAbsorbedDoseMeasure(double value):base(value){}	

		public static implicit operator double(IfcAbsorbedDoseMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcAbsorbedDoseMeasure(double v)
		{
			return new IfcAbsorbedDoseMeasure(v);
		}	

		public static IfcAbsorbedDoseMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAbsorbedDoseMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaccelerationmeasure.htm
	/// </summary>
	public class IfcAccelerationMeasure : IfcType<double>
	{
		public IfcAccelerationMeasure(double value):base(value){}	

		public static implicit operator double(IfcAccelerationMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcAccelerationMeasure(double v)
		{
			return new IfcAccelerationMeasure(v);
		}	

		public static IfcAccelerationMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAccelerationMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcamountofsubstancemeasure.htm
	/// </summary>
	public class IfcAmountOfSubstanceMeasure : IfcType<double>
	{
		public IfcAmountOfSubstanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcAmountOfSubstanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcAmountOfSubstanceMeasure(double v)
		{
			return new IfcAmountOfSubstanceMeasure(v);
		}	

		public static IfcAmountOfSubstanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAmountOfSubstanceMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcangularvelocitymeasure.htm
	/// </summary>
	public class IfcAngularVelocityMeasure : IfcType<double>
	{
		public IfcAngularVelocityMeasure(double value):base(value){}	

		public static implicit operator double(IfcAngularVelocityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcAngularVelocityMeasure(double v)
		{
			return new IfcAngularVelocityMeasure(v);
		}	

		public static IfcAngularVelocityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAngularVelocityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcareadensitymeasure.htm
	/// </summary>
	public class IfcAreaDensityMeasure : IfcType<double>
	{
		public IfcAreaDensityMeasure(double value):base(value){}	

		public static implicit operator double(IfcAreaDensityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcAreaDensityMeasure(double v)
		{
			return new IfcAreaDensityMeasure(v);
		}	

		public static IfcAreaDensityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAreaDensityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcareameasure.htm
	/// </summary>
	public class IfcAreaMeasure : IfcType<double>
	{
		public IfcAreaMeasure(double value):base(value){}	

		public static implicit operator double(IfcAreaMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcAreaMeasure(double v)
		{
			return new IfcAreaMeasure(v);
		}	

		public static IfcAreaMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAreaMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboolean.htm
	/// </summary>
	public class IfcBoolean : IfcType<bool>
	{
		public IfcBoolean(bool value):base(value){}	

		public static implicit operator bool(IfcBoolean v)
		{
			return v.Value;
		}

		public static implicit operator IfcBoolean(bool v)
		{
			return new IfcBoolean(v);
		}	

		public static IfcBoolean FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoolean>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboxalignment.htm
	/// </summary>
	public class IfcBoxAlignment : IfcType<IfcLabel>
	{
		public IfcBoxAlignment(IfcLabel value):base(value){}	

		public static implicit operator IfcLabel(IfcBoxAlignment v)
		{
			return v.Value;
		}

		public static implicit operator IfcBoxAlignment(IfcLabel v)
		{
			return new IfcBoxAlignment(v);
		}	

		public static IfcBoxAlignment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoxAlignment>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccardinalpointreference.htm
	/// </summary>
	public class IfcCardinalPointReference : IfcType<int>
	{
		public IfcCardinalPointReference(int value):base(value){}	

		public static implicit operator int(IfcCardinalPointReference v)
		{
			return v.Value;
		}

		public static implicit operator IfcCardinalPointReference(int v)
		{
			return new IfcCardinalPointReference(v);
		}	

		public static IfcCardinalPointReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCardinalPointReference>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccomplexnumber.htm
	/// </summary>
	public class IfcComplexNumber : IfcType<List<double>>
	{
		public IfcComplexNumber(List<double> value):base(value){}	

		public static implicit operator List<double>(IfcComplexNumber v)
		{
			return v.Value;
		}

		public static implicit operator IfcComplexNumber(List<double> v)
		{
			return new IfcComplexNumber(v);
		}	

		public static IfcComplexNumber FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcComplexNumber>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompoundplaneanglemeasure.htm
	/// </summary>
	public class IfcCompoundPlaneAngleMeasure : IfcType<List<int>>
	{
		public IfcCompoundPlaneAngleMeasure(List<int> value):base(value){}	

		public static implicit operator List<int>(IfcCompoundPlaneAngleMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcCompoundPlaneAngleMeasure(List<int> v)
		{
			return new IfcCompoundPlaneAngleMeasure(v);
		}	

		public static IfcCompoundPlaneAngleMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompoundPlaneAngleMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontextdependentmeasure.htm
	/// </summary>
	public class IfcContextDependentMeasure : IfcType<double>
	{
		public IfcContextDependentMeasure(double value):base(value){}	

		public static implicit operator double(IfcContextDependentMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcContextDependentMeasure(double v)
		{
			return new IfcContextDependentMeasure(v);
		}	

		public static IfcContextDependentMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcContextDependentMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccountmeasure.htm
	/// </summary>
	public class IfcCountMeasure : IfcType<double>
	{
		public IfcCountMeasure(double value):base(value){}	

		public static implicit operator double(IfcCountMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcCountMeasure(double v)
		{
			return new IfcCountMeasure(v);
		}	

		public static IfcCountMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCountMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvaturemeasure.htm
	/// </summary>
	public class IfcCurvatureMeasure : IfcType<double>
	{
		public IfcCurvatureMeasure(double value):base(value){}	

		public static implicit operator double(IfcCurvatureMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcCurvatureMeasure(double v)
		{
			return new IfcCurvatureMeasure(v);
		}	

		public static IfcCurvatureMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurvatureMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdate.htm
	/// </summary>
	public class IfcDate : IfcType<string>
	{
		public IfcDate(string value):base(value){}	

		public static implicit operator string(IfcDate v)
		{
			return v.Value;
		}

		public static implicit operator IfcDate(string v)
		{
			return new IfcDate(v);
		}	

		public static IfcDate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDate>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdatetime.htm
	/// </summary>
	public class IfcDateTime : IfcType<string>
	{
		public IfcDateTime(string value):base(value){}	

		public static implicit operator string(IfcDateTime v)
		{
			return v.Value;
		}

		public static implicit operator IfcDateTime(string v)
		{
			return new IfcDateTime(v);
		}	

		public static IfcDateTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDateTime>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdayinmonthnumber.htm
	/// </summary>
	public class IfcDayInMonthNumber : IfcType<int>
	{
		public IfcDayInMonthNumber(int value):base(value){}	

		public static implicit operator int(IfcDayInMonthNumber v)
		{
			return v.Value;
		}

		public static implicit operator IfcDayInMonthNumber(int v)
		{
			return new IfcDayInMonthNumber(v);
		}	

		public static IfcDayInMonthNumber FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDayInMonthNumber>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdayinweeknumber.htm
	/// </summary>
	public class IfcDayInWeekNumber : IfcType<int>
	{
		public IfcDayInWeekNumber(int value):base(value){}	

		public static implicit operator int(IfcDayInWeekNumber v)
		{
			return v.Value;
		}

		public static implicit operator IfcDayInWeekNumber(int v)
		{
			return new IfcDayInWeekNumber(v);
		}	

		public static IfcDayInWeekNumber FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDayInWeekNumber>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdescriptivemeasure.htm
	/// </summary>
	public class IfcDescriptiveMeasure : IfcType<string>
	{
		public IfcDescriptiveMeasure(string value):base(value){}	

		public static implicit operator string(IfcDescriptiveMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcDescriptiveMeasure(string v)
		{
			return new IfcDescriptiveMeasure(v);
		}	

		public static IfcDescriptiveMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDescriptiveMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdimensioncount.htm
	/// </summary>
	public class IfcDimensionCount : IfcType<int>
	{
		public IfcDimensionCount(int value):base(value){}	

		public static implicit operator int(IfcDimensionCount v)
		{
			return v.Value;
		}

		public static implicit operator IfcDimensionCount(int v)
		{
			return new IfcDimensionCount(v);
		}	

		public static IfcDimensionCount FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDimensionCount>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoseequivalentmeasure.htm
	/// </summary>
	public class IfcDoseEquivalentMeasure : IfcType<double>
	{
		public IfcDoseEquivalentMeasure(double value):base(value){}	

		public static implicit operator double(IfcDoseEquivalentMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcDoseEquivalentMeasure(double v)
		{
			return new IfcDoseEquivalentMeasure(v);
		}	

		public static IfcDoseEquivalentMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoseEquivalentMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcduration.htm
	/// </summary>
	public class IfcDuration : IfcType<string>
	{
		public IfcDuration(string value):base(value){}	

		public static implicit operator string(IfcDuration v)
		{
			return v.Value;
		}

		public static implicit operator IfcDuration(string v)
		{
			return new IfcDuration(v);
		}	

		public static IfcDuration FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuration>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdynamicviscositymeasure.htm
	/// </summary>
	public class IfcDynamicViscosityMeasure : IfcType<double>
	{
		public IfcDynamicViscosityMeasure(double value):base(value){}	

		public static implicit operator double(IfcDynamicViscosityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcDynamicViscosityMeasure(double v)
		{
			return new IfcDynamicViscosityMeasure(v);
		}	

		public static IfcDynamicViscosityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDynamicViscosityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectriccapacitancemeasure.htm
	/// </summary>
	public class IfcElectricCapacitanceMeasure : IfcType<double>
	{
		public IfcElectricCapacitanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcElectricCapacitanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcElectricCapacitanceMeasure(double v)
		{
			return new IfcElectricCapacitanceMeasure(v);
		}	

		public static IfcElectricCapacitanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricCapacitanceMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricchargemeasure.htm
	/// </summary>
	public class IfcElectricChargeMeasure : IfcType<double>
	{
		public IfcElectricChargeMeasure(double value):base(value){}	

		public static implicit operator double(IfcElectricChargeMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcElectricChargeMeasure(double v)
		{
			return new IfcElectricChargeMeasure(v);
		}	

		public static IfcElectricChargeMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricChargeMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricconductancemeasure.htm
	/// </summary>
	public class IfcElectricConductanceMeasure : IfcType<double>
	{
		public IfcElectricConductanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcElectricConductanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcElectricConductanceMeasure(double v)
		{
			return new IfcElectricConductanceMeasure(v);
		}	

		public static IfcElectricConductanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricConductanceMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectriccurrentmeasure.htm
	/// </summary>
	public class IfcElectricCurrentMeasure : IfcType<double>
	{
		public IfcElectricCurrentMeasure(double value):base(value){}	

		public static implicit operator double(IfcElectricCurrentMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcElectricCurrentMeasure(double v)
		{
			return new IfcElectricCurrentMeasure(v);
		}	

		public static IfcElectricCurrentMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricCurrentMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricresistancemeasure.htm
	/// </summary>
	public class IfcElectricResistanceMeasure : IfcType<double>
	{
		public IfcElectricResistanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcElectricResistanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcElectricResistanceMeasure(double v)
		{
			return new IfcElectricResistanceMeasure(v);
		}	

		public static IfcElectricResistanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricResistanceMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricvoltagemeasure.htm
	/// </summary>
	public class IfcElectricVoltageMeasure : IfcType<double>
	{
		public IfcElectricVoltageMeasure(double value):base(value){}	

		public static implicit operator double(IfcElectricVoltageMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcElectricVoltageMeasure(double v)
		{
			return new IfcElectricVoltageMeasure(v);
		}	

		public static IfcElectricVoltageMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricVoltageMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcenergymeasure.htm
	/// </summary>
	public class IfcEnergyMeasure : IfcType<double>
	{
		public IfcEnergyMeasure(double value):base(value){}	

		public static implicit operator double(IfcEnergyMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcEnergyMeasure(double v)
		{
			return new IfcEnergyMeasure(v);
		}	

		public static IfcEnergyMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEnergyMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfontstyle.htm
	/// </summary>
	public class IfcFontStyle : IfcType<string>
	{
		public IfcFontStyle(string value):base(value){}	

		public static implicit operator string(IfcFontStyle v)
		{
			return v.Value;
		}

		public static implicit operator IfcFontStyle(string v)
		{
			return new IfcFontStyle(v);
		}	

		public static IfcFontStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFontStyle>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfontvariant.htm
	/// </summary>
	public class IfcFontVariant : IfcType<string>
	{
		public IfcFontVariant(string value):base(value){}	

		public static implicit operator string(IfcFontVariant v)
		{
			return v.Value;
		}

		public static implicit operator IfcFontVariant(string v)
		{
			return new IfcFontVariant(v);
		}	

		public static IfcFontVariant FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFontVariant>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfontweight.htm
	/// </summary>
	public class IfcFontWeight : IfcType<string>
	{
		public IfcFontWeight(string value):base(value){}	

		public static implicit operator string(IfcFontWeight v)
		{
			return v.Value;
		}

		public static implicit operator IfcFontWeight(string v)
		{
			return new IfcFontWeight(v);
		}	

		public static IfcFontWeight FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFontWeight>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcforcemeasure.htm
	/// </summary>
	public class IfcForceMeasure : IfcType<double>
	{
		public IfcForceMeasure(double value):base(value){}	

		public static implicit operator double(IfcForceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcForceMeasure(double v)
		{
			return new IfcForceMeasure(v);
		}	

		public static IfcForceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcForceMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfrequencymeasure.htm
	/// </summary>
	public class IfcFrequencyMeasure : IfcType<double>
	{
		public IfcFrequencyMeasure(double value):base(value){}	

		public static implicit operator double(IfcFrequencyMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcFrequencyMeasure(double v)
		{
			return new IfcFrequencyMeasure(v);
		}	

		public static IfcFrequencyMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFrequencyMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgloballyuniqueid.htm
	/// </summary>
	public class IfcGloballyUniqueId : IfcType<string>
	{
		public IfcGloballyUniqueId(string value):base(value){}	

		public static implicit operator string(IfcGloballyUniqueId v)
		{
			return v.Value;
		}

		public static implicit operator IfcGloballyUniqueId(string v)
		{
			return new IfcGloballyUniqueId(v);
		}	

		public static IfcGloballyUniqueId FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGloballyUniqueId>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcheatfluxdensitymeasure.htm
	/// </summary>
	public class IfcHeatFluxDensityMeasure : IfcType<double>
	{
		public IfcHeatFluxDensityMeasure(double value):base(value){}	

		public static implicit operator double(IfcHeatFluxDensityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcHeatFluxDensityMeasure(double v)
		{
			return new IfcHeatFluxDensityMeasure(v);
		}	

		public static IfcHeatFluxDensityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHeatFluxDensityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcheatingvaluemeasure.htm
	/// </summary>
	public class IfcHeatingValueMeasure : IfcType<double>
	{
		public IfcHeatingValueMeasure(double value):base(value){}	

		public static implicit operator double(IfcHeatingValueMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcHeatingValueMeasure(double v)
		{
			return new IfcHeatingValueMeasure(v);
		}	

		public static IfcHeatingValueMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHeatingValueMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcidentifier.htm
	/// </summary>
	public class IfcIdentifier : IfcType<string>
	{
		public IfcIdentifier(string value):base(value){}	

		public static implicit operator string(IfcIdentifier v)
		{
			return v.Value;
		}

		public static implicit operator IfcIdentifier(string v)
		{
			return new IfcIdentifier(v);
		}	

		public static IfcIdentifier FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIdentifier>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcilluminancemeasure.htm
	/// </summary>
	public class IfcIlluminanceMeasure : IfcType<double>
	{
		public IfcIlluminanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcIlluminanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcIlluminanceMeasure(double v)
		{
			return new IfcIlluminanceMeasure(v);
		}	

		public static IfcIlluminanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIlluminanceMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinductancemeasure.htm
	/// </summary>
	public class IfcInductanceMeasure : IfcType<double>
	{
		public IfcInductanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcInductanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcInductanceMeasure(double v)
		{
			return new IfcInductanceMeasure(v);
		}	

		public static IfcInductanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcInductanceMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinteger.htm
	/// </summary>
	public class IfcInteger : IfcType<int>
	{
		public IfcInteger(int value):base(value){}	

		public static implicit operator int(IfcInteger v)
		{
			return v.Value;
		}

		public static implicit operator IfcInteger(int v)
		{
			return new IfcInteger(v);
		}	

		public static IfcInteger FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcInteger>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcintegercountratemeasure.htm
	/// </summary>
	public class IfcIntegerCountRateMeasure : IfcType<int>
	{
		public IfcIntegerCountRateMeasure(int value):base(value){}	

		public static implicit operator int(IfcIntegerCountRateMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcIntegerCountRateMeasure(int v)
		{
			return new IfcIntegerCountRateMeasure(v);
		}	

		public static IfcIntegerCountRateMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIntegerCountRateMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcionconcentrationmeasure.htm
	/// </summary>
	public class IfcIonConcentrationMeasure : IfcType<double>
	{
		public IfcIonConcentrationMeasure(double value):base(value){}	

		public static implicit operator double(IfcIonConcentrationMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcIonConcentrationMeasure(double v)
		{
			return new IfcIonConcentrationMeasure(v);
		}	

		public static IfcIonConcentrationMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIonConcentrationMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcisothermalmoisturecapacitymeasure.htm
	/// </summary>
	public class IfcIsothermalMoistureCapacityMeasure : IfcType<double>
	{
		public IfcIsothermalMoistureCapacityMeasure(double value):base(value){}	

		public static implicit operator double(IfcIsothermalMoistureCapacityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcIsothermalMoistureCapacityMeasure(double v)
		{
			return new IfcIsothermalMoistureCapacityMeasure(v);
		}	

		public static IfcIsothermalMoistureCapacityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIsothermalMoistureCapacityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifckinematicviscositymeasure.htm
	/// </summary>
	public class IfcKinematicViscosityMeasure : IfcType<double>
	{
		public IfcKinematicViscosityMeasure(double value):base(value){}	

		public static implicit operator double(IfcKinematicViscosityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcKinematicViscosityMeasure(double v)
		{
			return new IfcKinematicViscosityMeasure(v);
		}	

		public static IfcKinematicViscosityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcKinematicViscosityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclabel.htm
	/// </summary>
	public class IfcLabel : IfcType<string>
	{
		public IfcLabel(string value):base(value){}	

		public static implicit operator string(IfcLabel v)
		{
			return v.Value;
		}

		public static implicit operator IfcLabel(string v)
		{
			return new IfcLabel(v);
		}	

		public static IfcLabel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLabel>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclanguageid.htm
	/// </summary>
	public class IfcLanguageId : IfcType<IfcIdentifier>
	{
		public IfcLanguageId(IfcIdentifier value):base(value){}	

		public static implicit operator IfcIdentifier(IfcLanguageId v)
		{
			return v.Value;
		}

		public static implicit operator IfcLanguageId(IfcIdentifier v)
		{
			return new IfcLanguageId(v);
		}	

		public static IfcLanguageId FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLanguageId>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclengthmeasure.htm
	/// </summary>
	public class IfcLengthMeasure : IfcType<double>
	{
		public IfcLengthMeasure(double value):base(value){}	

		public static implicit operator double(IfcLengthMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLengthMeasure(double v)
		{
			return new IfcLengthMeasure(v);
		}	

		public static IfcLengthMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLengthMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclinearforcemeasure.htm
	/// </summary>
	public class IfcLinearForceMeasure : IfcType<double>
	{
		public IfcLinearForceMeasure(double value):base(value){}	

		public static implicit operator double(IfcLinearForceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLinearForceMeasure(double v)
		{
			return new IfcLinearForceMeasure(v);
		}	

		public static IfcLinearForceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLinearForceMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclinearmomentmeasure.htm
	/// </summary>
	public class IfcLinearMomentMeasure : IfcType<double>
	{
		public IfcLinearMomentMeasure(double value):base(value){}	

		public static implicit operator double(IfcLinearMomentMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLinearMomentMeasure(double v)
		{
			return new IfcLinearMomentMeasure(v);
		}	

		public static IfcLinearMomentMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLinearMomentMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclinearstiffnessmeasure.htm
	/// </summary>
	public class IfcLinearStiffnessMeasure : IfcType<double>
	{
		public IfcLinearStiffnessMeasure(double value):base(value){}	

		public static implicit operator double(IfcLinearStiffnessMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLinearStiffnessMeasure(double v)
		{
			return new IfcLinearStiffnessMeasure(v);
		}	

		public static IfcLinearStiffnessMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLinearStiffnessMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclinearvelocitymeasure.htm
	/// </summary>
	public class IfcLinearVelocityMeasure : IfcType<double>
	{
		public IfcLinearVelocityMeasure(double value):base(value){}	

		public static implicit operator double(IfcLinearVelocityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLinearVelocityMeasure(double v)
		{
			return new IfcLinearVelocityMeasure(v);
		}	

		public static IfcLinearVelocityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLinearVelocityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclogical.htm
	/// </summary>
	public class IfcLogical : IfcType<bool?>
	{
		public IfcLogical(bool? value):base(value){}	

		public static implicit operator bool?(IfcLogical v)
		{
			return v.Value;
		}

		public static implicit operator IfcLogical(bool? v)
		{
			return new IfcLogical(v);
		}	

		public static IfcLogical FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLogical>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcluminousfluxmeasure.htm
	/// </summary>
	public class IfcLuminousFluxMeasure : IfcType<double>
	{
		public IfcLuminousFluxMeasure(double value):base(value){}	

		public static implicit operator double(IfcLuminousFluxMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLuminousFluxMeasure(double v)
		{
			return new IfcLuminousFluxMeasure(v);
		}	

		public static IfcLuminousFluxMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLuminousFluxMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcluminousintensitydistributionmeasure.htm
	/// </summary>
	public class IfcLuminousIntensityDistributionMeasure : IfcType<double>
	{
		public IfcLuminousIntensityDistributionMeasure(double value):base(value){}	

		public static implicit operator double(IfcLuminousIntensityDistributionMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLuminousIntensityDistributionMeasure(double v)
		{
			return new IfcLuminousIntensityDistributionMeasure(v);
		}	

		public static IfcLuminousIntensityDistributionMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLuminousIntensityDistributionMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcluminousintensitymeasure.htm
	/// </summary>
	public class IfcLuminousIntensityMeasure : IfcType<double>
	{
		public IfcLuminousIntensityMeasure(double value):base(value){}	

		public static implicit operator double(IfcLuminousIntensityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLuminousIntensityMeasure(double v)
		{
			return new IfcLuminousIntensityMeasure(v);
		}	

		public static IfcLuminousIntensityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLuminousIntensityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmagneticfluxdensitymeasure.htm
	/// </summary>
	public class IfcMagneticFluxDensityMeasure : IfcType<double>
	{
		public IfcMagneticFluxDensityMeasure(double value):base(value){}	

		public static implicit operator double(IfcMagneticFluxDensityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMagneticFluxDensityMeasure(double v)
		{
			return new IfcMagneticFluxDensityMeasure(v);
		}	

		public static IfcMagneticFluxDensityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMagneticFluxDensityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmagneticfluxmeasure.htm
	/// </summary>
	public class IfcMagneticFluxMeasure : IfcType<double>
	{
		public IfcMagneticFluxMeasure(double value):base(value){}	

		public static implicit operator double(IfcMagneticFluxMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMagneticFluxMeasure(double v)
		{
			return new IfcMagneticFluxMeasure(v);
		}	

		public static IfcMagneticFluxMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMagneticFluxMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmassdensitymeasure.htm
	/// </summary>
	public class IfcMassDensityMeasure : IfcType<double>
	{
		public IfcMassDensityMeasure(double value):base(value){}	

		public static implicit operator double(IfcMassDensityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMassDensityMeasure(double v)
		{
			return new IfcMassDensityMeasure(v);
		}	

		public static IfcMassDensityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMassDensityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmassflowratemeasure.htm
	/// </summary>
	public class IfcMassFlowRateMeasure : IfcType<double>
	{
		public IfcMassFlowRateMeasure(double value):base(value){}	

		public static implicit operator double(IfcMassFlowRateMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMassFlowRateMeasure(double v)
		{
			return new IfcMassFlowRateMeasure(v);
		}	

		public static IfcMassFlowRateMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMassFlowRateMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmassmeasure.htm
	/// </summary>
	public class IfcMassMeasure : IfcType<double>
	{
		public IfcMassMeasure(double value):base(value){}	

		public static implicit operator double(IfcMassMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMassMeasure(double v)
		{
			return new IfcMassMeasure(v);
		}	

		public static IfcMassMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMassMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmassperlengthmeasure.htm
	/// </summary>
	public class IfcMassPerLengthMeasure : IfcType<double>
	{
		public IfcMassPerLengthMeasure(double value):base(value){}	

		public static implicit operator double(IfcMassPerLengthMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMassPerLengthMeasure(double v)
		{
			return new IfcMassPerLengthMeasure(v);
		}	

		public static IfcMassPerLengthMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMassPerLengthMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusofelasticitymeasure.htm
	/// </summary>
	public class IfcModulusOfElasticityMeasure : IfcType<double>
	{
		public IfcModulusOfElasticityMeasure(double value):base(value){}	

		public static implicit operator double(IfcModulusOfElasticityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcModulusOfElasticityMeasure(double v)
		{
			return new IfcModulusOfElasticityMeasure(v);
		}	

		public static IfcModulusOfElasticityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfElasticityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusoflinearsubgradereactionmeasure.htm
	/// </summary>
	public class IfcModulusOfLinearSubgradeReactionMeasure : IfcType<double>
	{
		public IfcModulusOfLinearSubgradeReactionMeasure(double value):base(value){}	

		public static implicit operator double(IfcModulusOfLinearSubgradeReactionMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcModulusOfLinearSubgradeReactionMeasure(double v)
		{
			return new IfcModulusOfLinearSubgradeReactionMeasure(v);
		}	

		public static IfcModulusOfLinearSubgradeReactionMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfLinearSubgradeReactionMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusofrotationalsubgradereactionmeasure.htm
	/// </summary>
	public class IfcModulusOfRotationalSubgradeReactionMeasure : IfcType<double>
	{
		public IfcModulusOfRotationalSubgradeReactionMeasure(double value):base(value){}	

		public static implicit operator double(IfcModulusOfRotationalSubgradeReactionMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcModulusOfRotationalSubgradeReactionMeasure(double v)
		{
			return new IfcModulusOfRotationalSubgradeReactionMeasure(v);
		}	

		public static IfcModulusOfRotationalSubgradeReactionMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfRotationalSubgradeReactionMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusofsubgradereactionmeasure.htm
	/// </summary>
	public class IfcModulusOfSubgradeReactionMeasure : IfcType<double>
	{
		public IfcModulusOfSubgradeReactionMeasure(double value):base(value){}	

		public static implicit operator double(IfcModulusOfSubgradeReactionMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcModulusOfSubgradeReactionMeasure(double v)
		{
			return new IfcModulusOfSubgradeReactionMeasure(v);
		}	

		public static IfcModulusOfSubgradeReactionMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfSubgradeReactionMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmoisturediffusivitymeasure.htm
	/// </summary>
	public class IfcMoistureDiffusivityMeasure : IfcType<double>
	{
		public IfcMoistureDiffusivityMeasure(double value):base(value){}	

		public static implicit operator double(IfcMoistureDiffusivityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMoistureDiffusivityMeasure(double v)
		{
			return new IfcMoistureDiffusivityMeasure(v);
		}	

		public static IfcMoistureDiffusivityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMoistureDiffusivityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmolecularweightmeasure.htm
	/// </summary>
	public class IfcMolecularWeightMeasure : IfcType<double>
	{
		public IfcMolecularWeightMeasure(double value):base(value){}	

		public static implicit operator double(IfcMolecularWeightMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMolecularWeightMeasure(double v)
		{
			return new IfcMolecularWeightMeasure(v);
		}	

		public static IfcMolecularWeightMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMolecularWeightMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmomentofinertiameasure.htm
	/// </summary>
	public class IfcMomentOfInertiaMeasure : IfcType<double>
	{
		public IfcMomentOfInertiaMeasure(double value):base(value){}	

		public static implicit operator double(IfcMomentOfInertiaMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMomentOfInertiaMeasure(double v)
		{
			return new IfcMomentOfInertiaMeasure(v);
		}	

		public static IfcMomentOfInertiaMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMomentOfInertiaMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmonetarymeasure.htm
	/// </summary>
	public class IfcMonetaryMeasure : IfcType<double>
	{
		public IfcMonetaryMeasure(double value):base(value){}	

		public static implicit operator double(IfcMonetaryMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMonetaryMeasure(double v)
		{
			return new IfcMonetaryMeasure(v);
		}	

		public static IfcMonetaryMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMonetaryMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmonthinyearnumber.htm
	/// </summary>
	public class IfcMonthInYearNumber : IfcType<int>
	{
		public IfcMonthInYearNumber(int value):base(value){}	

		public static implicit operator int(IfcMonthInYearNumber v)
		{
			return v.Value;
		}

		public static implicit operator IfcMonthInYearNumber(int v)
		{
			return new IfcMonthInYearNumber(v);
		}	

		public static IfcMonthInYearNumber FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMonthInYearNumber>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcnonnegativelengthmeasure.htm
	/// </summary>
	public class IfcNonNegativeLengthMeasure : IfcType<IfcLengthMeasure>
	{
		public IfcNonNegativeLengthMeasure(IfcLengthMeasure value):base(value){}	

		public static implicit operator IfcLengthMeasure(IfcNonNegativeLengthMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcNonNegativeLengthMeasure(IfcLengthMeasure v)
		{
			return new IfcNonNegativeLengthMeasure(v);
		}	

		public static IfcNonNegativeLengthMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcNonNegativeLengthMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcnormalisedratiomeasure.htm
	/// </summary>
	public class IfcNormalisedRatioMeasure : IfcType<IfcRatioMeasure>
	{
		public IfcNormalisedRatioMeasure(IfcRatioMeasure value):base(value){}	

		public static implicit operator IfcRatioMeasure(IfcNormalisedRatioMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcNormalisedRatioMeasure(IfcRatioMeasure v)
		{
			return new IfcNormalisedRatioMeasure(v);
		}	

		public static IfcNormalisedRatioMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcNormalisedRatioMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcnumericmeasure.htm
	/// </summary>
	public class IfcNumericMeasure : IfcType<double>
	{
		public IfcNumericMeasure(double value):base(value){}	

		public static implicit operator double(IfcNumericMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcNumericMeasure(double v)
		{
			return new IfcNumericMeasure(v);
		}	

		public static IfcNumericMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcNumericMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcphmeasure.htm
	/// </summary>
	public class IfcPHMeasure : IfcType<double>
	{
		public IfcPHMeasure(double value):base(value){}	

		public static implicit operator double(IfcPHMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPHMeasure(double v)
		{
			return new IfcPHMeasure(v);
		}	

		public static IfcPHMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPHMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcparametervalue.htm
	/// </summary>
	public class IfcParameterValue : IfcType<double>
	{
		public IfcParameterValue(double value):base(value){}	

		public static implicit operator double(IfcParameterValue v)
		{
			return v.Value;
		}

		public static implicit operator IfcParameterValue(double v)
		{
			return new IfcParameterValue(v);
		}	

		public static IfcParameterValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcParameterValue>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplanarforcemeasure.htm
	/// </summary>
	public class IfcPlanarForceMeasure : IfcType<double>
	{
		public IfcPlanarForceMeasure(double value):base(value){}	

		public static implicit operator double(IfcPlanarForceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPlanarForceMeasure(double v)
		{
			return new IfcPlanarForceMeasure(v);
		}	

		public static IfcPlanarForceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlanarForceMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplaneanglemeasure.htm
	/// </summary>
	public class IfcPlaneAngleMeasure : IfcType<double>
	{
		public IfcPlaneAngleMeasure(double value):base(value){}	

		public static implicit operator double(IfcPlaneAngleMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPlaneAngleMeasure(double v)
		{
			return new IfcPlaneAngleMeasure(v);
		}	

		public static IfcPlaneAngleMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlaneAngleMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpositivelengthmeasure.htm
	/// </summary>
	public class IfcPositiveLengthMeasure : IfcType<IfcLengthMeasure>
	{
		public IfcPositiveLengthMeasure(IfcLengthMeasure value):base(value){}	

		public static implicit operator IfcLengthMeasure(IfcPositiveLengthMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPositiveLengthMeasure(IfcLengthMeasure v)
		{
			return new IfcPositiveLengthMeasure(v);
		}	

		public static IfcPositiveLengthMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPositiveLengthMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpositiveplaneanglemeasure.htm
	/// </summary>
	public class IfcPositivePlaneAngleMeasure : IfcType<IfcPlaneAngleMeasure>
	{
		public IfcPositivePlaneAngleMeasure(IfcPlaneAngleMeasure value):base(value){}	

		public static implicit operator IfcPlaneAngleMeasure(IfcPositivePlaneAngleMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPositivePlaneAngleMeasure(IfcPlaneAngleMeasure v)
		{
			return new IfcPositivePlaneAngleMeasure(v);
		}	

		public static IfcPositivePlaneAngleMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPositivePlaneAngleMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpositiveratiomeasure.htm
	/// </summary>
	public class IfcPositiveRatioMeasure : IfcType<IfcRatioMeasure>
	{
		public IfcPositiveRatioMeasure(IfcRatioMeasure value):base(value){}	

		public static implicit operator IfcRatioMeasure(IfcPositiveRatioMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPositiveRatioMeasure(IfcRatioMeasure v)
		{
			return new IfcPositiveRatioMeasure(v);
		}	

		public static IfcPositiveRatioMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPositiveRatioMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpowermeasure.htm
	/// </summary>
	public class IfcPowerMeasure : IfcType<double>
	{
		public IfcPowerMeasure(double value):base(value){}	

		public static implicit operator double(IfcPowerMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPowerMeasure(double v)
		{
			return new IfcPowerMeasure(v);
		}	

		public static IfcPowerMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPowerMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentabletext.htm
	/// </summary>
	public class IfcPresentableText : IfcType<string>
	{
		public IfcPresentableText(string value):base(value){}	

		public static implicit operator string(IfcPresentableText v)
		{
			return v.Value;
		}

		public static implicit operator IfcPresentableText(string v)
		{
			return new IfcPresentableText(v);
		}	

		public static IfcPresentableText FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentableText>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpressuremeasure.htm
	/// </summary>
	public class IfcPressureMeasure : IfcType<double>
	{
		public IfcPressureMeasure(double value):base(value){}	

		public static implicit operator double(IfcPressureMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPressureMeasure(double v)
		{
			return new IfcPressureMeasure(v);
		}	

		public static IfcPressureMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPressureMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertysetdefinitionset.htm
	/// </summary>
	public class IfcPropertySetDefinitionSet : IfcType<List<IfcPropertySetDefinition>>
	{
		public IfcPropertySetDefinitionSet(List<IfcPropertySetDefinition> value):base(value){}	

		public static implicit operator List<IfcPropertySetDefinition>(IfcPropertySetDefinitionSet v)
		{
			return v.Value;
		}

		public static implicit operator IfcPropertySetDefinitionSet(List<IfcPropertySetDefinition> v)
		{
			return new IfcPropertySetDefinitionSet(v);
		}	

		public static IfcPropertySetDefinitionSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertySetDefinitionSet>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcradioactivitymeasure.htm
	/// </summary>
	public class IfcRadioActivityMeasure : IfcType<double>
	{
		public IfcRadioActivityMeasure(double value):base(value){}	

		public static implicit operator double(IfcRadioActivityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcRadioActivityMeasure(double v)
		{
			return new IfcRadioActivityMeasure(v);
		}	

		public static IfcRadioActivityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRadioActivityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcratiomeasure.htm
	/// </summary>
	public class IfcRatioMeasure : IfcType<double>
	{
		public IfcRatioMeasure(double value):base(value){}	

		public static implicit operator double(IfcRatioMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcRatioMeasure(double v)
		{
			return new IfcRatioMeasure(v);
		}	

		public static IfcRatioMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRatioMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreal.htm
	/// </summary>
	public class IfcReal : IfcType<double>
	{
		public IfcReal(double value):base(value){}	

		public static implicit operator double(IfcReal v)
		{
			return v.Value;
		}

		public static implicit operator IfcReal(double v)
		{
			return new IfcReal(v);
		}	

		public static IfcReal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReal>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrotationalfrequencymeasure.htm
	/// </summary>
	public class IfcRotationalFrequencyMeasure : IfcType<double>
	{
		public IfcRotationalFrequencyMeasure(double value):base(value){}	

		public static implicit operator double(IfcRotationalFrequencyMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcRotationalFrequencyMeasure(double v)
		{
			return new IfcRotationalFrequencyMeasure(v);
		}	

		public static IfcRotationalFrequencyMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRotationalFrequencyMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrotationalmassmeasure.htm
	/// </summary>
	public class IfcRotationalMassMeasure : IfcType<double>
	{
		public IfcRotationalMassMeasure(double value):base(value){}	

		public static implicit operator double(IfcRotationalMassMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcRotationalMassMeasure(double v)
		{
			return new IfcRotationalMassMeasure(v);
		}	

		public static IfcRotationalMassMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRotationalMassMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrotationalstiffnessmeasure.htm
	/// </summary>
	public class IfcRotationalStiffnessMeasure : IfcType<double>
	{
		public IfcRotationalStiffnessMeasure(double value):base(value){}	

		public static implicit operator double(IfcRotationalStiffnessMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcRotationalStiffnessMeasure(double v)
		{
			return new IfcRotationalStiffnessMeasure(v);
		}	

		public static IfcRotationalStiffnessMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRotationalStiffnessMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsectionmodulusmeasure.htm
	/// </summary>
	public class IfcSectionModulusMeasure : IfcType<double>
	{
		public IfcSectionModulusMeasure(double value):base(value){}	

		public static implicit operator double(IfcSectionModulusMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSectionModulusMeasure(double v)
		{
			return new IfcSectionModulusMeasure(v);
		}	

		public static IfcSectionModulusMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSectionModulusMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsectionalareaintegralmeasure.htm
	/// </summary>
	public class IfcSectionalAreaIntegralMeasure : IfcType<double>
	{
		public IfcSectionalAreaIntegralMeasure(double value):base(value){}	

		public static implicit operator double(IfcSectionalAreaIntegralMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSectionalAreaIntegralMeasure(double v)
		{
			return new IfcSectionalAreaIntegralMeasure(v);
		}	

		public static IfcSectionalAreaIntegralMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSectionalAreaIntegralMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshearmodulusmeasure.htm
	/// </summary>
	public class IfcShearModulusMeasure : IfcType<double>
	{
		public IfcShearModulusMeasure(double value):base(value){}	

		public static implicit operator double(IfcShearModulusMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcShearModulusMeasure(double v)
		{
			return new IfcShearModulusMeasure(v);
		}	

		public static IfcShearModulusMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShearModulusMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsolidanglemeasure.htm
	/// </summary>
	public class IfcSolidAngleMeasure : IfcType<double>
	{
		public IfcSolidAngleMeasure(double value):base(value){}	

		public static implicit operator double(IfcSolidAngleMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSolidAngleMeasure(double v)
		{
			return new IfcSolidAngleMeasure(v);
		}	

		public static IfcSolidAngleMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSolidAngleMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsoundpowerlevelmeasure.htm
	/// </summary>
	public class IfcSoundPowerLevelMeasure : IfcType<double>
	{
		public IfcSoundPowerLevelMeasure(double value):base(value){}	

		public static implicit operator double(IfcSoundPowerLevelMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSoundPowerLevelMeasure(double v)
		{
			return new IfcSoundPowerLevelMeasure(v);
		}	

		public static IfcSoundPowerLevelMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSoundPowerLevelMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsoundpowermeasure.htm
	/// </summary>
	public class IfcSoundPowerMeasure : IfcType<double>
	{
		public IfcSoundPowerMeasure(double value):base(value){}	

		public static implicit operator double(IfcSoundPowerMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSoundPowerMeasure(double v)
		{
			return new IfcSoundPowerMeasure(v);
		}	

		public static IfcSoundPowerMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSoundPowerMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsoundpressurelevelmeasure.htm
	/// </summary>
	public class IfcSoundPressureLevelMeasure : IfcType<double>
	{
		public IfcSoundPressureLevelMeasure(double value):base(value){}	

		public static implicit operator double(IfcSoundPressureLevelMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSoundPressureLevelMeasure(double v)
		{
			return new IfcSoundPressureLevelMeasure(v);
		}	

		public static IfcSoundPressureLevelMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSoundPressureLevelMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsoundpressuremeasure.htm
	/// </summary>
	public class IfcSoundPressureMeasure : IfcType<double>
	{
		public IfcSoundPressureMeasure(double value):base(value){}	

		public static implicit operator double(IfcSoundPressureMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSoundPressureMeasure(double v)
		{
			return new IfcSoundPressureMeasure(v);
		}	

		public static IfcSoundPressureMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSoundPressureMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspecificheatcapacitymeasure.htm
	/// </summary>
	public class IfcSpecificHeatCapacityMeasure : IfcType<double>
	{
		public IfcSpecificHeatCapacityMeasure(double value):base(value){}	

		public static implicit operator double(IfcSpecificHeatCapacityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSpecificHeatCapacityMeasure(double v)
		{
			return new IfcSpecificHeatCapacityMeasure(v);
		}	

		public static IfcSpecificHeatCapacityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpecificHeatCapacityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspecularexponent.htm
	/// </summary>
	public class IfcSpecularExponent : IfcType<double>
	{
		public IfcSpecularExponent(double value):base(value){}	

		public static implicit operator double(IfcSpecularExponent v)
		{
			return v.Value;
		}

		public static implicit operator IfcSpecularExponent(double v)
		{
			return new IfcSpecularExponent(v);
		}	

		public static IfcSpecularExponent FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpecularExponent>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspecularroughness.htm
	/// </summary>
	public class IfcSpecularRoughness : IfcType<double>
	{
		public IfcSpecularRoughness(double value):base(value){}	

		public static implicit operator double(IfcSpecularRoughness v)
		{
			return v.Value;
		}

		public static implicit operator IfcSpecularRoughness(double v)
		{
			return new IfcSpecularRoughness(v);
		}	

		public static IfcSpecularRoughness FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpecularRoughness>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctemperaturegradientmeasure.htm
	/// </summary>
	public class IfcTemperatureGradientMeasure : IfcType<double>
	{
		public IfcTemperatureGradientMeasure(double value):base(value){}	

		public static implicit operator double(IfcTemperatureGradientMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcTemperatureGradientMeasure(double v)
		{
			return new IfcTemperatureGradientMeasure(v);
		}	

		public static IfcTemperatureGradientMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTemperatureGradientMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctemperaturerateofchangemeasure.htm
	/// </summary>
	public class IfcTemperatureRateOfChangeMeasure : IfcType<double>
	{
		public IfcTemperatureRateOfChangeMeasure(double value):base(value){}	

		public static implicit operator double(IfcTemperatureRateOfChangeMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcTemperatureRateOfChangeMeasure(double v)
		{
			return new IfcTemperatureRateOfChangeMeasure(v);
		}	

		public static IfcTemperatureRateOfChangeMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTemperatureRateOfChangeMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctext.htm
	/// </summary>
	public class IfcText : IfcType<string>
	{
		public IfcText(string value):base(value){}	

		public static implicit operator string(IfcText v)
		{
			return v.Value;
		}

		public static implicit operator IfcText(string v)
		{
			return new IfcText(v);
		}	

		public static IfcText FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcText>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextalignment.htm
	/// </summary>
	public class IfcTextAlignment : IfcType<string>
	{
		public IfcTextAlignment(string value):base(value){}	

		public static implicit operator string(IfcTextAlignment v)
		{
			return v.Value;
		}

		public static implicit operator IfcTextAlignment(string v)
		{
			return new IfcTextAlignment(v);
		}	

		public static IfcTextAlignment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextAlignment>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextdecoration.htm
	/// </summary>
	public class IfcTextDecoration : IfcType<string>
	{
		public IfcTextDecoration(string value):base(value){}	

		public static implicit operator string(IfcTextDecoration v)
		{
			return v.Value;
		}

		public static implicit operator IfcTextDecoration(string v)
		{
			return new IfcTextDecoration(v);
		}	

		public static IfcTextDecoration FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextDecoration>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextfontname.htm
	/// </summary>
	public class IfcTextFontName : IfcType<string>
	{
		public IfcTextFontName(string value):base(value){}	

		public static implicit operator string(IfcTextFontName v)
		{
			return v.Value;
		}

		public static implicit operator IfcTextFontName(string v)
		{
			return new IfcTextFontName(v);
		}	

		public static IfcTextFontName FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextFontName>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctexttransformation.htm
	/// </summary>
	public class IfcTextTransformation : IfcType<string>
	{
		public IfcTextTransformation(string value):base(value){}	

		public static implicit operator string(IfcTextTransformation v)
		{
			return v.Value;
		}

		public static implicit operator IfcTextTransformation(string v)
		{
			return new IfcTextTransformation(v);
		}	

		public static IfcTextTransformation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextTransformation>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcthermaladmittancemeasure.htm
	/// </summary>
	public class IfcThermalAdmittanceMeasure : IfcType<double>
	{
		public IfcThermalAdmittanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcThermalAdmittanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcThermalAdmittanceMeasure(double v)
		{
			return new IfcThermalAdmittanceMeasure(v);
		}	

		public static IfcThermalAdmittanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcThermalAdmittanceMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcthermalconductivitymeasure.htm
	/// </summary>
	public class IfcThermalConductivityMeasure : IfcType<double>
	{
		public IfcThermalConductivityMeasure(double value):base(value){}	

		public static implicit operator double(IfcThermalConductivityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcThermalConductivityMeasure(double v)
		{
			return new IfcThermalConductivityMeasure(v);
		}	

		public static IfcThermalConductivityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcThermalConductivityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcthermalexpansioncoefficientmeasure.htm
	/// </summary>
	public class IfcThermalExpansionCoefficientMeasure : IfcType<double>
	{
		public IfcThermalExpansionCoefficientMeasure(double value):base(value){}	

		public static implicit operator double(IfcThermalExpansionCoefficientMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcThermalExpansionCoefficientMeasure(double v)
		{
			return new IfcThermalExpansionCoefficientMeasure(v);
		}	

		public static IfcThermalExpansionCoefficientMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcThermalExpansionCoefficientMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcthermalresistancemeasure.htm
	/// </summary>
	public class IfcThermalResistanceMeasure : IfcType<double>
	{
		public IfcThermalResistanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcThermalResistanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcThermalResistanceMeasure(double v)
		{
			return new IfcThermalResistanceMeasure(v);
		}	

		public static IfcThermalResistanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcThermalResistanceMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcthermaltransmittancemeasure.htm
	/// </summary>
	public class IfcThermalTransmittanceMeasure : IfcType<double>
	{
		public IfcThermalTransmittanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcThermalTransmittanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcThermalTransmittanceMeasure(double v)
		{
			return new IfcThermalTransmittanceMeasure(v);
		}	

		public static IfcThermalTransmittanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcThermalTransmittanceMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcthermodynamictemperaturemeasure.htm
	/// </summary>
	public class IfcThermodynamicTemperatureMeasure : IfcType<double>
	{
		public IfcThermodynamicTemperatureMeasure(double value):base(value){}	

		public static implicit operator double(IfcThermodynamicTemperatureMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcThermodynamicTemperatureMeasure(double v)
		{
			return new IfcThermodynamicTemperatureMeasure(v);
		}	

		public static IfcThermodynamicTemperatureMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcThermodynamicTemperatureMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctime.htm
	/// </summary>
	public class IfcTime : IfcType<string>
	{
		public IfcTime(string value):base(value){}	

		public static implicit operator string(IfcTime v)
		{
			return v.Value;
		}

		public static implicit operator IfcTime(string v)
		{
			return new IfcTime(v);
		}	

		public static IfcTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTime>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimemeasure.htm
	/// </summary>
	public class IfcTimeMeasure : IfcType<double>
	{
		public IfcTimeMeasure(double value):base(value){}	

		public static implicit operator double(IfcTimeMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcTimeMeasure(double v)
		{
			return new IfcTimeMeasure(v);
		}	

		public static IfcTimeMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTimeMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimestamp.htm
	/// </summary>
	public class IfcTimeStamp : IfcType<int>
	{
		public IfcTimeStamp(int value):base(value){}	

		public static implicit operator int(IfcTimeStamp v)
		{
			return v.Value;
		}

		public static implicit operator IfcTimeStamp(int v)
		{
			return new IfcTimeStamp(v);
		}	

		public static IfcTimeStamp FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTimeStamp>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctorquemeasure.htm
	/// </summary>
	public class IfcTorqueMeasure : IfcType<double>
	{
		public IfcTorqueMeasure(double value):base(value){}	

		public static implicit operator double(IfcTorqueMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcTorqueMeasure(double v)
		{
			return new IfcTorqueMeasure(v);
		}	

		public static IfcTorqueMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTorqueMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcurireference.htm
	/// </summary>
	public class IfcURIReference : IfcType<string>
	{
		public IfcURIReference(string value):base(value){}	

		public static implicit operator string(IfcURIReference v)
		{
			return v.Value;
		}

		public static implicit operator IfcURIReference(string v)
		{
			return new IfcURIReference(v);
		}	

		public static IfcURIReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcURIReference>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvaporpermeabilitymeasure.htm
	/// </summary>
	public class IfcVaporPermeabilityMeasure : IfcType<double>
	{
		public IfcVaporPermeabilityMeasure(double value):base(value){}	

		public static implicit operator double(IfcVaporPermeabilityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcVaporPermeabilityMeasure(double v)
		{
			return new IfcVaporPermeabilityMeasure(v);
		}	

		public static IfcVaporPermeabilityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVaporPermeabilityMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvolumemeasure.htm
	/// </summary>
	public class IfcVolumeMeasure : IfcType<double>
	{
		public IfcVolumeMeasure(double value):base(value){}	

		public static implicit operator double(IfcVolumeMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcVolumeMeasure(double v)
		{
			return new IfcVolumeMeasure(v);
		}	

		public static IfcVolumeMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVolumeMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvolumetricflowratemeasure.htm
	/// </summary>
	public class IfcVolumetricFlowRateMeasure : IfcType<double>
	{
		public IfcVolumetricFlowRateMeasure(double value):base(value){}	

		public static implicit operator double(IfcVolumetricFlowRateMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcVolumetricFlowRateMeasure(double v)
		{
			return new IfcVolumetricFlowRateMeasure(v);
		}	

		public static IfcVolumetricFlowRateMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVolumetricFlowRateMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwarpingconstantmeasure.htm
	/// </summary>
	public class IfcWarpingConstantMeasure : IfcType<double>
	{
		public IfcWarpingConstantMeasure(double value):base(value){}	

		public static implicit operator double(IfcWarpingConstantMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcWarpingConstantMeasure(double v)
		{
			return new IfcWarpingConstantMeasure(v);
		}	

		public static IfcWarpingConstantMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWarpingConstantMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwarpingmomentmeasure.htm
	/// </summary>
	public class IfcWarpingMomentMeasure : IfcType<double>
	{
		public IfcWarpingMomentMeasure(double value):base(value){}	

		public static implicit operator double(IfcWarpingMomentMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcWarpingMomentMeasure(double v)
		{
			return new IfcWarpingMomentMeasure(v);
		}	

		public static IfcWarpingMomentMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWarpingMomentMeasure>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactionrequesttypeenum.htm
	/// </summary>
	public enum IfcActionRequestTypeEnum {EMAIL,FAX,PHONE,POST,VERBAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactionsourcetypeenum.htm
	/// </summary>
	public enum IfcActionSourceTypeEnum {DEAD_LOAD_G,COMPLETION_G1,LIVE_LOAD_Q,SNOW_S,WIND_W,PRESTRESSING_P,SETTLEMENT_U,TEMPERATURE_T,EARTHQUAKE_E,FIRE,IMPULSE,IMPACT,TRANSPORT,ERECTION,PROPPING,SYSTEM_IMPERFECTION,SHRINKAGE,CREEP,LACK_OF_FIT,BUOYANCY,ICE,CURRENT,WAVE,RAIN,BRAKES,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactiontypeenum.htm
	/// </summary>
	public enum IfcActionTypeEnum {PERMANENT_G,VARIABLE_Q,EXTRAORDINARY_A,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactuatortypeenum.htm
	/// </summary>
	public enum IfcActuatorTypeEnum {ELECTRICACTUATOR,HANDOPERATEDACTUATOR,HYDRAULICACTUATOR,PNEUMATICACTUATOR,THERMOSTATICACTUATOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaddresstypeenum.htm
	/// </summary>
	public enum IfcAddressTypeEnum {OFFICE,SITE,HOME,DISTRIBUTIONPOINT,USERDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairterminalboxtypeenum.htm
	/// </summary>
	public enum IfcAirTerminalBoxTypeEnum {CONSTANTFLOW,VARIABLEFLOWPRESSUREDEPENDANT,VARIABLEFLOWPRESSUREINDEPENDANT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairterminaltypeenum.htm
	/// </summary>
	public enum IfcAirTerminalTypeEnum {DIFFUSER,GRILLE,LOUVRE,REGISTER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairtoairheatrecoverytypeenum.htm
	/// </summary>
	public enum IfcAirToAirHeatRecoveryTypeEnum {FIXEDPLATECOUNTERFLOWEXCHANGER,FIXEDPLATECROSSFLOWEXCHANGER,FIXEDPLATEPARALLELFLOWEXCHANGER,ROTARYWHEEL,RUNAROUNDCOILLOOP,HEATPIPE,TWINTOWERENTHALPYRECOVERYLOOPS,THERMOSIPHONSEALEDTUBEHEATEXCHANGERS,THERMOSIPHONCOILTYPEHEATEXCHANGERS,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcalarmtypeenum.htm
	/// </summary>
	public enum IfcAlarmTypeEnum {BELL,BREAKGLASSBUTTON,LIGHT,MANUALPULLBOX,SIREN,WHISTLE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcanalysismodeltypeenum.htm
	/// </summary>
	public enum IfcAnalysisModelTypeEnum {IN_PLANE_LOADING_2D,OUT_PLANE_LOADING_2D,LOADING_3D,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcanalysistheorytypeenum.htm
	/// </summary>
	public enum IfcAnalysisTheoryTypeEnum {FIRST_ORDER_THEORY,SECOND_ORDER_THEORY,THIRD_ORDER_THEORY,FULL_NONLINEAR_THEORY,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcarithmeticoperatorenum.htm
	/// </summary>
	public enum IfcArithmeticOperatorEnum {ADD,DIVIDE,MULTIPLY,SUBTRACT}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcassemblyplaceenum.htm
	/// </summary>
	public enum IfcAssemblyPlaceEnum {SITE,FACTORY,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaudiovisualappliancetypeenum.htm
	/// </summary>
	public enum IfcAudioVisualApplianceTypeEnum {AMPLIFIER,CAMERA,DISPLAY,MICROPHONE,PLAYER,PROJECTOR,RECEIVER,SPEAKER,SWITCHER,TELEPHONE,TUNER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbsplinecurveform.htm
	/// </summary>
	public enum IfcBSplineCurveForm {POLYLINE_FORM,CIRCULAR_ARC,ELLIPTIC_ARC,PARABOLIC_ARC,HYPERBOLIC_ARC,UNSPECIFIED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbsplinesurfaceform.htm
	/// </summary>
	public enum IfcBSplineSurfaceForm {PLANE_SURF,CYLINDRICAL_SURF,CONICAL_SURF,SPHERICAL_SURF,TOROIDAL_SURF,SURF_OF_REVOLUTION,RULED_SURF,GENERALISED_CONE,QUADRIC_SURF,SURF_OF_LINEAR_EXTRUSION,UNSPECIFIED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbeamtypeenum.htm
	/// </summary>
	public enum IfcBeamTypeEnum {BEAM,JOIST,HOLLOWCORE,LINTEL,SPANDREL,T_BEAM,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbenchmarkenum.htm
	/// </summary>
	public enum IfcBenchmarkEnum {GREATERTHAN,GREATERTHANOREQUALTO,LESSTHAN,LESSTHANOREQUALTO,EQUALTO,NOTEQUALTO,INCLUDES,NOTINCLUDES,INCLUDEDIN,NOTINCLUDEDIN}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboilertypeenum.htm
	/// </summary>
	public enum IfcBoilerTypeEnum {WATER,STEAM,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbooleanoperator.htm
	/// </summary>
	public enum IfcBooleanOperator {UNION,INTERSECTION,DIFFERENCE}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementparttypeenum.htm
	/// </summary>
	public enum IfcBuildingElementPartTypeEnum {INSULATION,PRECASTPANEL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementproxytypeenum.htm
	/// </summary>
	public enum IfcBuildingElementProxyTypeEnum {COMPLEX,ELEMENT,PARTIAL,PROVISIONFORVOID,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingsystemtypeenum.htm
	/// </summary>
	public enum IfcBuildingSystemTypeEnum {FENESTRATION,FOUNDATION,LOADBEARING,OUTERSHELL,SHADING,TRANSPORT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcburnertypeenum.htm
	/// </summary>
	public enum IfcBurnerTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablecarrierfittingtypeenum.htm
	/// </summary>
	public enum IfcCableCarrierFittingTypeEnum {BEND,CROSS,REDUCER,TEE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablecarriersegmenttypeenum.htm
	/// </summary>
	public enum IfcCableCarrierSegmentTypeEnum {CABLELADDERSEGMENT,CABLETRAYSEGMENT,CABLETRUNKINGSEGMENT,CONDUITSEGMENT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablefittingtypeenum.htm
	/// </summary>
	public enum IfcCableFittingTypeEnum {CONNECTOR,ENTRY,EXIT,JUNCTION,TRANSITION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablesegmenttypeenum.htm
	/// </summary>
	public enum IfcCableSegmentTypeEnum {BUSBARSEGMENT,CABLESEGMENT,CONDUCTORSEGMENT,CORESEGMENT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchangeactionenum.htm
	/// </summary>
	public enum IfcChangeActionEnum {NOCHANGE,MODIFIED,ADDED,DELETED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchillertypeenum.htm
	/// </summary>
	public enum IfcChillerTypeEnum {AIRCOOLED,WATERCOOLED,HEATRECOVERY,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchimneytypeenum.htm
	/// </summary>
	public enum IfcChimneyTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoiltypeenum.htm
	/// </summary>
	public enum IfcCoilTypeEnum {DXCOOLINGCOIL,ELECTRICHEATINGCOIL,GASHEATINGCOIL,HYDRONICCOIL,STEAMHEATINGCOIL,WATERCOOLINGCOIL,WATERHEATINGCOIL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolumntypeenum.htm
	/// </summary>
	public enum IfcColumnTypeEnum {COLUMN,PILASTER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccommunicationsappliancetypeenum.htm
	/// </summary>
	public enum IfcCommunicationsApplianceTypeEnum {ANTENNA,COMPUTER,FAX,GATEWAY,MODEM,NETWORKAPPLIANCE,NETWORKBRIDGE,NETWORKHUB,PRINTER,REPEATER,ROUTER,SCANNER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccomplexpropertytemplatetypeenum.htm
	/// </summary>
	public enum IfcComplexPropertyTemplateTypeEnum {P_COMPLEX,Q_COMPLEX}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompressortypeenum.htm
	/// </summary>
	public enum IfcCompressorTypeEnum {DYNAMIC,RECIPROCATING,ROTARY,SCROLL,TROCHOIDAL,SINGLESTAGE,BOOSTER,OPENTYPE,HERMETIC,SEMIHERMETIC,WELDEDSHELLHERMETIC,ROLLINGPISTON,ROTARYVANE,SINGLESCREW,TWINSCREW,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccondensertypeenum.htm
	/// </summary>
	public enum IfcCondenserTypeEnum {AIRCOOLED,EVAPORATIVECOOLED,WATERCOOLED,WATERCOOLEDBRAZEDPLATE,WATERCOOLEDSHELLCOIL,WATERCOOLEDSHELLTUBE,WATERCOOLEDTUBEINTUBE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectiontypeenum.htm
	/// </summary>
	public enum IfcConnectionTypeEnum {ATPATH,ATSTART,ATEND,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstraintenum.htm
	/// </summary>
	public enum IfcConstraintEnum {HARD,SOFT,ADVISORY,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionequipmentresourcetypeenum.htm
	/// </summary>
	public enum IfcConstructionEquipmentResourceTypeEnum {DEMOLISHING,EARTHMOVING,ERECTING,HEATING,LIGHTING,PAVING,PUMPING,TRANSPORTING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionmaterialresourcetypeenum.htm
	/// </summary>
	public enum IfcConstructionMaterialResourceTypeEnum {AGGREGATES,CONCRETE,DRYWALL,FUEL,GYPSUM,MASONRY,METAL,PLASTIC,WOOD,NOTDEFINED,USERDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionproductresourcetypeenum.htm
	/// </summary>
	public enum IfcConstructionProductResourceTypeEnum {ASSEMBLY,FORMWORK,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontrollertypeenum.htm
	/// </summary>
	public enum IfcControllerTypeEnum {FLOATING,PROGRAMMABLE,PROPORTIONAL,MULTIPOSITION,TWOPOSITION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccooledbeamtypeenum.htm
	/// </summary>
	public enum IfcCooledBeamTypeEnum {ACTIVE,PASSIVE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoolingtowertypeenum.htm
	/// </summary>
	public enum IfcCoolingTowerTypeEnum {NATURALDRAFT,MECHANICALINDUCEDDRAFT,MECHANICALFORCEDDRAFT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccostitemtypeenum.htm
	/// </summary>
	public enum IfcCostItemTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccostscheduletypeenum.htm
	/// </summary>
	public enum IfcCostScheduleTypeEnum {BUDGET,COSTPLAN,ESTIMATE,TENDER,PRICEDBILLOFQUANTITIES,UNPRICEDBILLOFQUANTITIES,SCHEDULEOFRATES,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoveringtypeenum.htm
	/// </summary>
	public enum IfcCoveringTypeEnum {CEILING,FLOORING,CLADDING,ROOFING,MOLDING,SKIRTINGBOARD,INSULATION,MEMBRANE,SLEEVING,WRAPPING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccrewresourcetypeenum.htm
	/// </summary>
	public enum IfcCrewResourceTypeEnum {OFFICE,SITE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurtainwalltypeenum.htm
	/// </summary>
	public enum IfcCurtainWallTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurveinterpolationenum.htm
	/// </summary>
	public enum IfcCurveInterpolationEnum {LINEAR,LOG_LINEAR,LOG_LOG,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdampertypeenum.htm
	/// </summary>
	public enum IfcDamperTypeEnum {BACKDRAFTDAMPER,BALANCINGDAMPER,BLASTDAMPER,CONTROLDAMPER,FIREDAMPER,FIRESMOKEDAMPER,FUMEHOODEXHAUST,GRAVITYDAMPER,GRAVITYRELIEFDAMPER,RELIEFDAMPER,SMOKEDAMPER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdataoriginenum.htm
	/// </summary>
	public enum IfcDataOriginEnum {MEASURED,PREDICTED,SIMULATED,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcderivedunitenum.htm
	/// </summary>
	public enum IfcDerivedUnitEnum {ANGULARVELOCITYUNIT,AREADENSITYUNIT,COMPOUNDPLANEANGLEUNIT,DYNAMICVISCOSITYUNIT,HEATFLUXDENSITYUNIT,INTEGERCOUNTRATEUNIT,ISOTHERMALMOISTURECAPACITYUNIT,KINEMATICVISCOSITYUNIT,LINEARVELOCITYUNIT,MASSDENSITYUNIT,MASSFLOWRATEUNIT,MOISTUREDIFFUSIVITYUNIT,MOLECULARWEIGHTUNIT,SPECIFICHEATCAPACITYUNIT,THERMALADMITTANCEUNIT,THERMALCONDUCTANCEUNIT,THERMALRESISTANCEUNIT,THERMALTRANSMITTANCEUNIT,VAPORPERMEABILITYUNIT,VOLUMETRICFLOWRATEUNIT,ROTATIONALFREQUENCYUNIT,TORQUEUNIT,MOMENTOFINERTIAUNIT,LINEARMOMENTUNIT,LINEARFORCEUNIT,PLANARFORCEUNIT,MODULUSOFELASTICITYUNIT,SHEARMODULUSUNIT,LINEARSTIFFNESSUNIT,ROTATIONALSTIFFNESSUNIT,MODULUSOFSUBGRADEREACTIONUNIT,ACCELERATIONUNIT,CURVATUREUNIT,HEATINGVALUEUNIT,IONCONCENTRATIONUNIT,LUMINOUSINTENSITYDISTRIBUTIONUNIT,MASSPERLENGTHUNIT,MODULUSOFLINEARSUBGRADEREACTIONUNIT,MODULUSOFROTATIONALSUBGRADEREACTIONUNIT,PHUNIT,ROTATIONALMASSUNIT,SECTIONAREAINTEGRALUNIT,SECTIONMODULUSUNIT,SOUNDPOWERLEVELUNIT,SOUNDPOWERUNIT,SOUNDPRESSURELEVELUNIT,SOUNDPRESSUREUNIT,TEMPERATUREGRADIENTUNIT,TEMPERATURERATEOFCHANGEUNIT,THERMALEXPANSIONCOEFFICIENTUNIT,WARPINGCONSTANTUNIT,WARPINGMOMENTUNIT,USERDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdirectionsenseenum.htm
	/// </summary>
	public enum IfcDirectionSenseEnum {POSITIVE,NEGATIVE}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdiscreteaccessorytypeenum.htm
	/// </summary>
	public enum IfcDiscreteAccessoryTypeEnum {ANCHORPLATE,BRACKET,SHOE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionchamberelementtypeenum.htm
	/// </summary>
	public enum IfcDistributionChamberElementTypeEnum {FORMEDDUCT,INSPECTIONCHAMBER,INSPECTIONPIT,MANHOLE,METERCHAMBER,SUMP,TRENCH,VALVECHAMBER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionporttypeenum.htm
	/// </summary>
	public enum IfcDistributionPortTypeEnum {CABLE,CABLECARRIER,DUCT,PIPE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionsystemenum.htm
	/// </summary>
	public enum IfcDistributionSystemEnum {AIRCONDITIONING,AUDIOVISUAL,CHEMICAL,CHILLEDWATER,COMMUNICATION,COMPRESSEDAIR,CONDENSERWATER,CONTROL,CONVEYING,DATA,DISPOSAL,DOMESTICCOLDWATER,DOMESTICHOTWATER,DRAINAGE,EARTHING,ELECTRICAL,ELECTROACOUSTIC,EXHAUST,FIREPROTECTION,FUEL,GAS,HAZARDOUS,HEATING,LIGHTING,LIGHTNINGPROTECTION,MUNICIPALSOLIDWASTE,OIL,OPERATIONAL,POWERGENERATION,RAINWATER,REFRIGERATION,SECURITY,SEWAGE,SIGNAL,STORMWATER,TELEPHONE,TV,VACUUM,VENT,VENTILATION,WASTEWATER,WATERSUPPLY,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdocumentconfidentialityenum.htm
	/// </summary>
	public enum IfcDocumentConfidentialityEnum {PUBLIC,RESTRICTED,CONFIDENTIAL,PERSONAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdocumentstatusenum.htm
	/// </summary>
	public enum IfcDocumentStatusEnum {DRAFT,FINALDRAFT,FINAL,REVISION,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorpaneloperationenum.htm
	/// </summary>
	public enum IfcDoorPanelOperationEnum {SWINGING,DOUBLE_ACTING,SLIDING,FOLDING,REVOLVING,ROLLINGUP,FIXEDPANEL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorpanelpositionenum.htm
	/// </summary>
	public enum IfcDoorPanelPositionEnum {LEFT,MIDDLE,RIGHT,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorstyleconstructionenum.htm
	/// </summary>
	public enum IfcDoorStyleConstructionEnum {ALUMINIUM,HIGH_GRADE_STEEL,STEEL,WOOD,ALUMINIUM_WOOD,ALUMINIUM_PLASTIC,PLASTIC,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorstyleoperationenum.htm
	/// </summary>
	public enum IfcDoorStyleOperationEnum {SINGLE_SWING_LEFT,SINGLE_SWING_RIGHT,DOUBLE_DOOR_SINGLE_SWING,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT,DOUBLE_SWING_LEFT,DOUBLE_SWING_RIGHT,DOUBLE_DOOR_DOUBLE_SWING,SLIDING_TO_LEFT,SLIDING_TO_RIGHT,DOUBLE_DOOR_SLIDING,FOLDING_TO_LEFT,FOLDING_TO_RIGHT,DOUBLE_DOOR_FOLDING,REVOLVING,ROLLINGUP,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoortypeenum.htm
	/// </summary>
	public enum IfcDoorTypeEnum {DOOR,GATE,TRAPDOOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoortypeoperationenum.htm
	/// </summary>
	public enum IfcDoorTypeOperationEnum {SINGLE_SWING_LEFT,SINGLE_SWING_RIGHT,DOUBLE_DOOR_SINGLE_SWING,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT,DOUBLE_SWING_LEFT,DOUBLE_SWING_RIGHT,DOUBLE_DOOR_DOUBLE_SWING,SLIDING_TO_LEFT,SLIDING_TO_RIGHT,DOUBLE_DOOR_SLIDING,FOLDING_TO_LEFT,FOLDING_TO_RIGHT,DOUBLE_DOOR_FOLDING,REVOLVING,ROLLINGUP,SWING_FIXED_LEFT,SWING_FIXED_RIGHT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductfittingtypeenum.htm
	/// </summary>
	public enum IfcDuctFittingTypeEnum {BEND,CONNECTOR,ENTRY,EXIT,JUNCTION,OBSTRUCTION,TRANSITION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductsegmenttypeenum.htm
	/// </summary>
	public enum IfcDuctSegmentTypeEnum {RIGIDSEGMENT,FLEXIBLESEGMENT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductsilencertypeenum.htm
	/// </summary>
	public enum IfcDuctSilencerTypeEnum {FLATOVAL,RECTANGULAR,ROUND,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricappliancetypeenum.htm
	/// </summary>
	public enum IfcElectricApplianceTypeEnum {DISHWASHER,ELECTRICCOOKER,FREESTANDINGELECTRICHEATER,FREESTANDINGFAN,FREESTANDINGWATERHEATER,FREESTANDINGWATERCOOLER,FREEZER,FRIDGE_FREEZER,HANDDRYER,KITCHENMACHINE,MICROWAVE,PHOTOCOPIER,REFRIGERATOR,TUMBLEDRYER,VENDINGMACHINE,WASHINGMACHINE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricdistributionboardtypeenum.htm
	/// </summary>
	public enum IfcElectricDistributionBoardTypeEnum {CONSUMERUNIT,DISTRIBUTIONBOARD,MOTORCONTROLCENTRE,SWITCHBOARD,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricflowstoragedevicetypeenum.htm
	/// </summary>
	public enum IfcElectricFlowStorageDeviceTypeEnum {BATTERY,CAPACITORBANK,HARMONICFILTER,INDUCTORBANK,UPS,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricgeneratortypeenum.htm
	/// </summary>
	public enum IfcElectricGeneratorTypeEnum {CHP,ENGINEGENERATOR,STANDALONE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricmotortypeenum.htm
	/// </summary>
	public enum IfcElectricMotorTypeEnum {DC,INDUCTION,POLYPHASE,RELUCTANCESYNCHRONOUS,SYNCHRONOUS,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectrictimecontroltypeenum.htm
	/// </summary>
	public enum IfcElectricTimeControlTypeEnum {TIMECLOCK,TIMEDELAY,RELAY,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementassemblytypeenum.htm
	/// </summary>
	public enum IfcElementAssemblyTypeEnum {ACCESSORY_ASSEMBLY,ARCH,BEAM_GRID,BRACED_FRAME,GIRDER,REINFORCEMENT_UNIT,RIGID_FRAME,SLAB_FIELD,TRUSS,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementcompositionenum.htm
	/// </summary>
	public enum IfcElementCompositionEnum {COMPLEX,ELEMENT,PARTIAL}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcenginetypeenum.htm
	/// </summary>
	public enum IfcEngineTypeEnum {EXTERNALCOMBUSTION,INTERNALCOMBUSTION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevaporativecoolertypeenum.htm
	/// </summary>
	public enum IfcEvaporativeCoolerTypeEnum {DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER,DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER,DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER,DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER,DIRECTEVAPORATIVEAIRWASHER,INDIRECTEVAPORATIVEPACKAGEAIRCOOLER,INDIRECTEVAPORATIVEWETCOIL,INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER,INDIRECTDIRECTCOMBINATION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevaporatortypeenum.htm
	/// </summary>
	public enum IfcEvaporatorTypeEnum {DIRECTEXPANSION,DIRECTEXPANSIONSHELLANDTUBE,DIRECTEXPANSIONTUBEINTUBE,DIRECTEXPANSIONBRAZEDPLATE,FLOODEDSHELLANDTUBE,SHELLANDCOIL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifceventtriggertypeenum.htm
	/// </summary>
	public enum IfcEventTriggerTypeEnum {EVENTRULE,EVENTMESSAGE,EVENTTIME,EVENTCOMPLEX,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifceventtypeenum.htm
	/// </summary>
	public enum IfcEventTypeEnum {STARTEVENT,ENDEVENT,INTERMEDIATEEVENT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternalspatialelementtypeenum.htm
	/// </summary>
	public enum IfcExternalSpatialElementTypeEnum {EXTERNAL,EXTERNAL_EARTH,EXTERNAL_WATER,EXTERNAL_FIRE,USERDEFINED,NOTDEFIEND}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfantypeenum.htm
	/// </summary>
	public enum IfcFanTypeEnum {CENTRIFUGALFORWARDCURVED,CENTRIFUGALRADIAL,CENTRIFUGALBACKWARDINCLINEDCURVED,CENTRIFUGALAIRFOIL,TUBEAXIAL,VANEAXIAL,PROPELLORAXIAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfastenertypeenum.htm
	/// </summary>
	public enum IfcFastenerTypeEnum {GLUE,MORTAR,WELD,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfiltertypeenum.htm
	/// </summary>
	public enum IfcFilterTypeEnum {AIRPARTICLEFILTER,COMPRESSEDAIRFILTER,ODORFILTER,OILFILTER,STRAINER,WATERFILTER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfiresuppressionterminaltypeenum.htm
	/// </summary>
	public enum IfcFireSuppressionTerminalTypeEnum {BREECHINGINLET,FIREHYDRANT,HOSEREEL,SPRINKLER,SPRINKLERDEFLECTOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowdirectionenum.htm
	/// </summary>
	public enum IfcFlowDirectionEnum {SOURCE,SINK,SOURCEANDSINK,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowinstrumenttypeenum.htm
	/// </summary>
	public enum IfcFlowInstrumentTypeEnum {PRESSUREGAUGE,THERMOMETER,AMMETER,FREQUENCYMETER,POWERFACTORMETER,PHASEANGLEMETER,VOLTMETER_PEAK,VOLTMETER_RMS,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowmetertypeenum.htm
	/// </summary>
	public enum IfcFlowMeterTypeEnum {ENERGYMETER,GASMETER,OILMETER,WATERMETER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfootingtypeenum.htm
	/// </summary>
	public enum IfcFootingTypeEnum {CAISSON_FOUNDATION,FOOTING_BEAM,PAD_FOOTING,PILE_CAP,STRIP_FOOTING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfurnituretypeenum.htm
	/// </summary>
	public enum IfcFurnitureTypeEnum {CHAIR,TABLE,DESK,BED,FILECABINET,SHELF,SOFA,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeographicelementtypeenum.htm
	/// </summary>
	public enum IfcGeographicElementTypeEnum {TERRAIN,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometricprojectionenum.htm
	/// </summary>
	public enum IfcGeometricProjectionEnum {GRAPH_VIEW,SKETCH_VIEW,MODEL_VIEW,PLAN_VIEW,REFLECTED_PLAN_VIEW,SECTION_VIEW,ELEVATION_VIEW,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcglobalorlocalenum.htm
	/// </summary>
	public enum IfcGlobalOrLocalEnum {GLOBAL_COORDS,LOCAL_COORDS}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgridtypeenum.htm
	/// </summary>
	public enum IfcGridTypeEnum {RECTANGULAR,RADIAL,TRIANGULAR,IRREGULAR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcheatexchangertypeenum.htm
	/// </summary>
	public enum IfcHeatExchangerTypeEnum {PLATE,SHELLANDTUBE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifchumidifiertypeenum.htm
	/// </summary>
	public enum IfcHumidifierTypeEnum {STEAMINJECTION,ADIABATICAIRWASHER,ADIABATICPAN,ADIABATICWETTEDELEMENT,ADIABATICATOMIZING,ADIABATICULTRASONIC,ADIABATICRIGIDMEDIA,ADIABATICCOMPRESSEDAIRNOZZLE,ASSISTEDELECTRIC,ASSISTEDNATURALGAS,ASSISTEDPROPANE,ASSISTEDBUTANE,ASSISTEDSTEAM,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinterceptortypeenum.htm
	/// </summary>
	public enum IfcInterceptorTypeEnum {CYCLONIC,GREASE,OIL,PETROL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinternalorexternalenum.htm
	/// </summary>
	public enum IfcInternalOrExternalEnum {INTERNAL,EXTERNAL,EXTERNAL_EARTH,EXTERNAL_WATER,EXTERNAL_FIRE,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinventorytypeenum.htm
	/// </summary>
	public enum IfcInventoryTypeEnum {ASSETINVENTORY,SPACEINVENTORY,FURNITUREINVENTORY,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcjunctionboxtypeenum.htm
	/// </summary>
	public enum IfcJunctionBoxTypeEnum {DATA,POWER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcknottype.htm
	/// </summary>
	public enum IfcKnotType {UNIFORM_KNOTS,QUASI_UNIFORM_KNOTS,PIECEWISE_BEZIER_KNOTS,UNSPECIFIED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclaborresourcetypeenum.htm
	/// </summary>
	public enum IfcLaborResourceTypeEnum {ADMINISTRATION,CARPENTRY,CLEANING,CONCRETE,DRYWALL,ELECTRIC,FINISHING,FLOORING,GENERAL,HVAC,LANDSCAPING,MASONRY,PAINTING,PAVING,PLUMBING,ROOFING,SITEGRADING,STEELWORK,SURVEYING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclamptypeenum.htm
	/// </summary>
	public enum IfcLampTypeEnum {COMPACTFLUORESCENT,FLUORESCENT,HALOGEN,HIGHPRESSUREMERCURY,HIGHPRESSURESODIUM,LED,METALHALIDE,OLED,TUNGSTENFILAMENT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclayersetdirectionenum.htm
	/// </summary>
	public enum IfcLayerSetDirectionEnum {AXIS1,AXIS2,AXIS3}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightdistributioncurveenum.htm
	/// </summary>
	public enum IfcLightDistributionCurveEnum {TYPE_A,TYPE_B,TYPE_C,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightemissionsourceenum.htm
	/// </summary>
	public enum IfcLightEmissionSourceEnum {COMPACTFLUORESCENT,FLUORESCENT,HIGHPRESSUREMERCURY,HIGHPRESSURESODIUM,LIGHTEMITTINGDIODE,LOWPRESSURESODIUM,LOWVOLTAGEHALOGEN,MAINVOLTAGEHALOGEN,METALHALIDE,TUNGSTENFILAMENT,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightfixturetypeenum.htm
	/// </summary>
	public enum IfcLightFixtureTypeEnum {POINTSOURCE,DIRECTIONSOURCE,SECURITYLIGHTING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcloadgrouptypeenum.htm
	/// </summary>
	public enum IfcLoadGroupTypeEnum {LOAD_GROUP,LOAD_CASE,LOAD_COMBINATION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclogicaloperatorenum.htm
	/// </summary>
	public enum IfcLogicalOperatorEnum {LOGICALAND,LOGICALOR,LOGICALXOR,LOGICALNOTAND,LOGICALNOTOR}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmechanicalfastenertypeenum.htm
	/// </summary>
	public enum IfcMechanicalFastenerTypeEnum {ANCHORBOLT,BOLT,DOWEL,NAIL,NAILPLATE,RIVET,SCREW,SHEARCONNECTOR,STAPLE,STUDSHEARCONNECTOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmedicaldevicetypeenum.htm
	/// </summary>
	public enum IfcMedicalDeviceTypeEnum {AIRSTATION,FEEDAIRUNIT,OXYGENGENERATOR,OXYGENPLANT,VACUUMSTATION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmembertypeenum.htm
	/// </summary>
	public enum IfcMemberTypeEnum {BRACE,CHORD,COLLAR,MEMBER,MULLION,PLATE,POST,PURLIN,RAFTER,STRINGER,STRUT,STUD,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmotorconnectiontypeenum.htm
	/// </summary>
	public enum IfcMotorConnectionTypeEnum {BELTDRIVE,COUPLING,DIRECTDRIVE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcnullstyle.htm
	/// </summary>
	public enum IfcNullStyle {NULL}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobjecttypeenum.htm
	/// </summary>
	public enum IfcObjectTypeEnum {PRODUCT,PROCESS,CONTROL,RESOURCE,ACTOR,GROUP,PROJECT,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobjectiveenum.htm
	/// </summary>
	public enum IfcObjectiveEnum {CODECOMPLIANCE,CODEWAIVER,DESIGNINTENT,EXTERNAL,HEALTHANDSAFETY,MERGECONFLICT,MODELVIEW,PARAMETER,REQUIREMENT,SPECIFICATION,TRIGGERCONDITION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoccupanttypeenum.htm
	/// </summary>
	public enum IfcOccupantTypeEnum {ASSIGNEE,ASSIGNOR,LESSEE,LESSOR,LETTINGAGENT,OWNER,TENANT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcopeningelementtypeenum.htm
	/// </summary>
	public enum IfcOpeningElementTypeEnum {OPENING,RECESS,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoutlettypeenum.htm
	/// </summary>
	public enum IfcOutletTypeEnum {AUDIOVISUALOUTLET,COMMUNICATIONSOUTLET,POWEROUTLET,DATAOUTLET,TELEPHONEOUTLET,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcperformancehistorytypeenum.htm
	/// </summary>
	public enum IfcPerformanceHistoryTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpermeablecoveringoperationenum.htm
	/// </summary>
	public enum IfcPermeableCoveringOperationEnum {GRILL,LOUVER,SCREEN,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpermittypeenum.htm
	/// </summary>
	public enum IfcPermitTypeEnum {ACCESS,BUILDING,WORK,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcphysicalorvirtualenum.htm
	/// </summary>
	public enum IfcPhysicalOrVirtualEnum {PHYSICAL,VIRTUAL,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpileconstructionenum.htm
	/// </summary>
	public enum IfcPileConstructionEnum {CAST_IN_PLACE,COMPOSITE,PRECAST_CONCRETE,PREFAB_STEEL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpiletypeenum.htm
	/// </summary>
	public enum IfcPileTypeEnum {BORED,DRIVEN,JETGROUTING,COHESION,FRICTION,SUPPORT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpipefittingtypeenum.htm
	/// </summary>
	public enum IfcPipeFittingTypeEnum {BEND,CONNECTOR,ENTRY,EXIT,JUNCTION,OBSTRUCTION,TRANSITION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpipesegmenttypeenum.htm
	/// </summary>
	public enum IfcPipeSegmentTypeEnum {CULVERT,FLEXIBLESEGMENT,RIGIDSEGMENT,GUTTER,SPOOL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplatetypeenum.htm
	/// </summary>
	public enum IfcPlateTypeEnum {CURTAIN_PANEL,SHEET,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproceduretypeenum.htm
	/// </summary>
	public enum IfcProcedureTypeEnum {ADVICE_CAUTION,ADVICE_NOTE,ADVICE_WARNING,CALIBRATION,DIAGNOSTIC,SHUTDOWN,STARTUP,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprofiletypeenum.htm
	/// </summary>
	public enum IfcProfileTypeEnum {CURVE,AREA}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectordertypeenum.htm
	/// </summary>
	public enum IfcProjectOrderTypeEnum {CHANGEORDER,MAINTENANCEWORKORDER,MOVEORDER,PURCHASEORDER,WORKORDER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectedortruelengthenum.htm
	/// </summary>
	public enum IfcProjectedOrTrueLengthEnum {PROJECTED_LENGTH,TRUE_LENGTH}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectionelementtypeenum.htm
	/// </summary>
	public enum IfcProjectionElementTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertysettemplatetypeenum.htm
	/// </summary>
	public enum IfcPropertySetTemplateTypeEnum {PSET_TYPEDRIVENONLY,PSET_TYPEDRIVENOVERRIDE,PSET_OCCURRENCEDRIVEN,PSET_PERFORMANCEDRIVEN,QTO_TYPEDRIVENONLY,QTO_TYPEDRIVENOVERRIDE,QTO_OCCURRENCEDRIVEN,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprotectivedevicetrippingunittypeenum.htm
	/// </summary>
	public enum IfcProtectiveDeviceTrippingUnitTypeEnum {ELECTRONIC,ELECTROMAGNETIC,RESIDUALCURRENT,THERMAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprotectivedevicetypeenum.htm
	/// </summary>
	public enum IfcProtectiveDeviceTypeEnum {CIRCUITBREAKER,EARTHLEAKAGECIRCUITBREAKER,EARTHINGSWITCH,FUSEDISCONNECTOR,RESIDUALCURRENTCIRCUITBREAKER,RESIDUALCURRENTSWITCH,VARISTOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpumptypeenum.htm
	/// </summary>
	public enum IfcPumpTypeEnum {CIRCULATOR,ENDSUCTION,SPLITCASE,SUBMERSIBLEPUMP,SUMPPUMP,VERTICALINLINE,VERTICALTURBINE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrailingtypeenum.htm
	/// </summary>
	public enum IfcRailingTypeEnum {HANDRAIL,GUARDRAIL,BALUSTRADE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrampflighttypeenum.htm
	/// </summary>
	public enum IfcRampFlightTypeEnum {STRAIGHT,SPIRAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcramptypeenum.htm
	/// </summary>
	public enum IfcRampTypeEnum {STRAIGHT_RUN_RAMP,TWO_STRAIGHT_RUN_RAMP,QUARTER_TURN_RAMP,TWO_QUARTER_TURN_RAMP,HALF_TURN_RAMP,SPIRAL_RAMP,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrecurrencetypeenum.htm
	/// </summary>
	public enum IfcRecurrenceTypeEnum {DAILY,WEEKLY,MONTHLY_BY_DAY_OF_MONTH,MONTHLY_BY_POSITION,BY_DAY_COUNT,BY_WEEKDAY_COUNT,YEARLY_BY_DAY_OF_MONTH,YEARLY_BY_POSITION}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreflectancemethodenum.htm
	/// </summary>
	public enum IfcReflectanceMethodEnum {BLINN,FLAT,GLASS,MATT,METAL,MIRROR,PHONG,PLASTIC,STRAUSS,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingbarroleenum.htm
	/// </summary>
	public enum IfcReinforcingBarRoleEnum {MAIN,SHEAR,LIGATURE,STUD,PUNCHING,EDGE,RING,ANCHORING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingbarsurfaceenum.htm
	/// </summary>
	public enum IfcReinforcingBarSurfaceEnum {PLAIN,TEXTURED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingbartypeenum.htm
	/// </summary>
	public enum IfcReinforcingBarTypeEnum {ANCHORING,EDGE,LIGATURE,MAIN,PUNCHING,RING,SHEAR,STUD,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingmeshtypeenum.htm
	/// </summary>
	public enum IfcReinforcingMeshTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcroleenum.htm
	/// </summary>
	public enum IfcRoleEnum {SUPPLIER,MANUFACTURER,CONTRACTOR,SUBCONTRACTOR,ARCHITECT,STRUCTURALENGINEER,COSTENGINEER,CLIENT,BUILDINGOWNER,BUILDINGOPERATOR,MECHANICALENGINEER,ELECTRICALENGINEER,PROJECTMANAGER,FACILITIESMANAGER,CIVILENGINEER,COMMISSIONINGENGINEER,ENGINEER,OWNER,CONSULTANT,CONSTRUCTIONMANAGER,FIELDCONSTRUCTIONMANAGER,RESELLER,USERDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrooftypeenum.htm
	/// </summary>
	public enum IfcRoofTypeEnum {FLAT_ROOF,SHED_ROOF,GABLE_ROOF,HIP_ROOF,HIPPED_GABLE_ROOF,GAMBREL_ROOF,MANSARD_ROOF,BARREL_ROOF,RAINBOW_ROOF,BUTTERFLY_ROOF,PAVILION_ROOF,DOME_ROOF,FREEFORM,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsiprefix.htm
	/// </summary>
	public enum IfcSIPrefix {EXA,PETA,TERA,GIGA,MEGA,KILO,HECTO,DECA,DECI,CENTI,MILLI,MICRO,NANO,PICO,FEMTO,ATTO}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsiunitname.htm
	/// </summary>
	public enum IfcSIUnitName {AMPERE,BECQUEREL,CANDELA,COULOMB,CUBIC_METRE,DEGREE_CELSIUS,FARAD,GRAM,GRAY,HENRY,HERTZ,JOULE,KELVIN,LUMEN,LUX,METRE,MOLE,NEWTON,OHM,PASCAL,RADIAN,SECOND,SIEMENS,SIEVERT,SQUARE_METRE,STERADIAN,TESLA,VOLT,WATT,WEBER}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsanitaryterminaltypeenum.htm
	/// </summary>
	public enum IfcSanitaryTerminalTypeEnum {BATH,BIDET,CISTERN,SHOWER,SINK,SANITARYFOUNTAIN,TOILETPAN,URINAL,WASHHANDBASIN,WCSEAT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsectiontypeenum.htm
	/// </summary>
	public enum IfcSectionTypeEnum {UNIFORM,TAPERED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsensortypeenum.htm
	/// </summary>
	public enum IfcSensorTypeEnum {CONDUCTANCESENSOR,CONTACTSENSOR,FIRESENSOR,FLOWSENSOR,GASSENSOR,HEATSENSOR,HUMIDITYSENSOR,IONCONCENTRATIONSENSOR,LEVELSENSOR,LIGHTSENSOR,MOISTURESENSOR,MOVEMENTSENSOR,PHSENSOR,PRESSURESENSOR,RADIATIONSENSOR,RADIOACTIVITYSENSOR,SMOKESENSOR,SOUNDSENSOR,TEMPERATURESENSOR,WINDSENSOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsequenceenum.htm
	/// </summary>
	public enum IfcSequenceEnum {START_START,START_FINISH,FINISH_START,FINISH_FINISH,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshadingdevicetypeenum.htm
	/// </summary>
	public enum IfcShadingDeviceTypeEnum {JALOUSIE,SHUTTER,AWNING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsimplepropertytemplatetypeenum.htm
	/// </summary>
	public enum IfcSimplePropertyTemplateTypeEnum {P_SINGLEVALUE,P_ENUMERATEDVALUE,P_BOUNDEDVALUE,P_LISTVALUE,P_TABLEVALUE,P_REFERENCEVALUE,Q_LENGTH,Q_AREA,Q_VOLUME,Q_COUNT,Q_WEIGHT,Q_TIME}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcslabtypeenum.htm
	/// </summary>
	public enum IfcSlabTypeEnum {FLOOR,ROOF,LANDING,BASESLAB,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsolardevicetypeenum.htm
	/// </summary>
	public enum IfcSolarDeviceTypeEnum {SOLARCOLLECTOR,SOLARPANEL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspaceheatertypeenum.htm
	/// </summary>
	public enum IfcSpaceHeaterTypeEnum {CONVECTOR,RADIATOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspacetypeenum.htm
	/// </summary>
	public enum IfcSpaceTypeEnum {SPACE,PARKING,GFA,INTERNAL,EXTERNAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialzonetypeenum.htm
	/// </summary>
	public enum IfcSpatialZoneTypeEnum {CONSTRUCTION,FIRESAFETY,LIGHTING,OCCUPANCY,SECURITY,THERMAL,TRANSPORT,VENTILATION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstackterminaltypeenum.htm
	/// </summary>
	public enum IfcStackTerminalTypeEnum {BIRDCAGE,COWL,RAINWATERHOPPER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstairflighttypeenum.htm
	/// </summary>
	public enum IfcStairFlightTypeEnum {STRAIGHT,WINDER,SPIRAL,CURVED,FREEFORM,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstairtypeenum.htm
	/// </summary>
	public enum IfcStairTypeEnum {STRAIGHT_RUN_STAIR,TWO_STRAIGHT_RUN_STAIR,QUARTER_WINDING_STAIR,QUARTER_TURN_STAIR,HALF_WINDING_STAIR,HALF_TURN_STAIR,TWO_QUARTER_WINDING_STAIR,TWO_QUARTER_TURN_STAIR,THREE_QUARTER_WINDING_STAIR,THREE_QUARTER_TURN_STAIR,SPIRAL_STAIR,DOUBLE_RETURN_STAIR,CURVED_RUN_STAIR,TWO_CURVED_RUN_STAIR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstateenum.htm
	/// </summary>
	public enum IfcStateEnum {READWRITE,READONLY,LOCKED,READWRITELOCKED,READONLYLOCKED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurveactivitytypeenum.htm
	/// </summary>
	public enum IfcStructuralCurveActivityTypeEnum {CONST,LINEAR,POLYGONAL,EQUIDISTANT,SINUS,PARABOLA,DISCRETE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurvemembertypeenum.htm
	/// </summary>
	public enum IfcStructuralCurveMemberTypeEnum {RIGID_JOINED_MEMBER,PIN_JOINED_MEMBER,CABLE,TENSION_MEMBER,COMPRESSION_MEMBER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfaceactivitytypeenum.htm
	/// </summary>
	public enum IfcStructuralSurfaceActivityTypeEnum {CONST,BILINEAR,DISCRETE,ISOCONTOUR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfacemembertypeenum.htm
	/// </summary>
	public enum IfcStructuralSurfaceMemberTypeEnum {BENDING_ELEMENT,MEMBRANE_ELEMENT,SHELL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsubcontractresourcetypeenum.htm
	/// </summary>
	public enum IfcSubContractResourceTypeEnum {PURCHASE,WORK,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacefeaturetypeenum.htm
	/// </summary>
	public enum IfcSurfaceFeatureTypeEnum {MARK,TAG,TREATMENT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfaceside.htm
	/// </summary>
	public enum IfcSurfaceSide {POSITIVE,NEGATIVE,BOTH}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcswitchingdevicetypeenum.htm
	/// </summary>
	public enum IfcSwitchingDeviceTypeEnum {CONTACTOR,DIMMERSWITCH,EMERGENCYSTOP,KEYPAD,MOMENTARYSWITCH,SELECTORSWITCH,STARTER,SWITCHDISCONNECTOR,TOGGLESWITCH,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsystemfurnitureelementtypeenum.htm
	/// </summary>
	public enum IfcSystemFurnitureElementTypeEnum {PANEL,WORKSURFACE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctanktypeenum.htm
	/// </summary>
	public enum IfcTankTypeEnum {BASIN,BREAKPRESSURE,EXPANSION,FEEDANDEXPANSION,PRESSUREVESSEL,STORAGE,VESSEL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctaskdurationenum.htm
	/// </summary>
	public enum IfcTaskDurationEnum {ELAPSEDTIME,WORKTIME,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctasktypeenum.htm
	/// </summary>
	public enum IfcTaskTypeEnum {ATTENDANCE,CONSTRUCTION,DEMOLITION,DISMANTLE,DISPOSAL,INSTALLATION,LOGISTIC,MAINTENANCE,MOVE,OPERATION,REMOVAL,RENOVATION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctendonanchortypeenum.htm
	/// </summary>
	public enum IfcTendonAnchorTypeEnum {COUPLER,FIXED_END,TENSIONING_END,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctendontypeenum.htm
	/// </summary>
	public enum IfcTendonTypeEnum {BAR,COATED,STRAND,WIRE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextpath.htm
	/// </summary>
	public enum IfcTextPath {LEFT,RIGHT,UP,DOWN}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimeseriesdatatypeenum.htm
	/// </summary>
	public enum IfcTimeSeriesDataTypeEnum {CONTINUOUS,DISCRETE,DISCRETEBINARY,PIECEWISEBINARY,PIECEWISECONSTANT,PIECEWISECONTINUOUS,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransformertypeenum.htm
	/// </summary>
	public enum IfcTransformerTypeEnum {CURRENT,FREQUENCY,INVERTER,RECTIFIER,VOLTAGE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransitioncode.htm
	/// </summary>
	public enum IfcTransitionCode {DISCONTINUOUS,CONTINUOUS,CONTSAMEGRADIENT,CONTSAMEGRADIENTSAMECURVATURE}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransportelementtypeenum.htm
	/// </summary>
	public enum IfcTransportElementTypeEnum {ELEVATOR,ESCALATOR,MOVINGWALKWAY,CRANEWAY,LIFTINGGEAR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctrimmingpreference.htm
	/// </summary>
	public enum IfcTrimmingPreference {CARTESIAN,PARAMETER,UNSPECIFIED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctubebundletypeenum.htm
	/// </summary>
	public enum IfcTubeBundleTypeEnum {FINNED,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitenum.htm
	/// </summary>
	public enum IfcUnitEnum {ABSORBEDDOSEUNIT,AMOUNTOFSUBSTANCEUNIT,AREAUNIT,DOSEEQUIVALENTUNIT,ELECTRICCAPACITANCEUNIT,ELECTRICCHARGEUNIT,ELECTRICCONDUCTANCEUNIT,ELECTRICCURRENTUNIT,ELECTRICRESISTANCEUNIT,ELECTRICVOLTAGEUNIT,ENERGYUNIT,FORCEUNIT,FREQUENCYUNIT,ILLUMINANCEUNIT,INDUCTANCEUNIT,LENGTHUNIT,LUMINOUSFLUXUNIT,LUMINOUSINTENSITYUNIT,MAGNETICFLUXDENSITYUNIT,MAGNETICFLUXUNIT,MASSUNIT,PLANEANGLEUNIT,POWERUNIT,PRESSUREUNIT,RADIOACTIVITYUNIT,SOLIDANGLEUNIT,THERMODYNAMICTEMPERATUREUNIT,TIMEUNIT,VOLUMEUNIT,USERDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitarycontrolelementtypeenum.htm
	/// </summary>
	public enum IfcUnitaryControlElementTypeEnum {ALARMPANEL,CONTROLPANEL,GASDETECTIONPANEL,INDICATORPANEL,MIMICPANEL,HUMIDISTAT,THERMOSTAT,WEATHERSTATION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitaryequipmenttypeenum.htm
	/// </summary>
	public enum IfcUnitaryEquipmentTypeEnum {AIRHANDLER,AIRCONDITIONINGUNIT,DEHUMIDIFIER,SPLITSYSTEM,ROOFTOPUNIT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvalvetypeenum.htm
	/// </summary>
	public enum IfcValveTypeEnum {AIRRELEASE,ANTIVACUUM,CHANGEOVER,CHECK,COMMISSIONING,DIVERTING,DRAWOFFCOCK,DOUBLECHECK,DOUBLEREGULATING,FAUCET,FLUSHING,GASCOCK,GASTAP,ISOLATING,MIXING,PRESSUREREDUCING,PRESSURERELIEF,REGULATING,SAFETYCUTOFF,STEAMTRAP,STOPCOCK,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvibrationisolatortypeenum.htm
	/// </summary>
	public enum IfcVibrationIsolatorTypeEnum {COMPRESSION,SPRING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvoidingfeaturetypeenum.htm
	/// </summary>
	public enum IfcVoidingFeatureTypeEnum {CUTOUT,NOTCH,HOLE,MITER,CHAMFER,EDGE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwalltypeenum.htm
	/// </summary>
	public enum IfcWallTypeEnum {MOVABLE,PARAPET,PARTITIONING,PLUMBINGWALL,SHEAR,SOLIDWALL,STANDARD,POLYGONAL,ELEMENTEDWALL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwasteterminaltypeenum.htm
	/// </summary>
	public enum IfcWasteTerminalTypeEnum {FLOORTRAP,FLOORWASTE,GULLYSUMP,GULLYTRAP,ROOFDRAIN,WASTEDISPOSALUNIT,WASTETRAP,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowpaneloperationenum.htm
	/// </summary>
	public enum IfcWindowPanelOperationEnum {SIDEHUNGRIGHTHAND,SIDEHUNGLEFTHAND,TILTANDTURNRIGHTHAND,TILTANDTURNLEFTHAND,TOPHUNG,BOTTOMHUNG,PIVOTHORIZONTAL,PIVOTVERTICAL,SLIDINGHORIZONTAL,SLIDINGVERTICAL,REMOVABLECASEMENT,FIXEDCASEMENT,OTHEROPERATION,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowpanelpositionenum.htm
	/// </summary>
	public enum IfcWindowPanelPositionEnum {LEFT,MIDDLE,RIGHT,BOTTOM,TOP,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowstyleconstructionenum.htm
	/// </summary>
	public enum IfcWindowStyleConstructionEnum {ALUMINIUM,HIGH_GRADE_STEEL,STEEL,WOOD,ALUMINIUM_WOOD,PLASTIC,OTHER_CONSTRUCTION,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowstyleoperationenum.htm
	/// </summary>
	public enum IfcWindowStyleOperationEnum {SINGLE_PANEL,DOUBLE_PANEL_VERTICAL,DOUBLE_PANEL_HORIZONTAL,TRIPLE_PANEL_VERTICAL,TRIPLE_PANEL_BOTTOM,TRIPLE_PANEL_TOP,TRIPLE_PANEL_LEFT,TRIPLE_PANEL_RIGHT,TRIPLE_PANEL_HORIZONTAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowtypeenum.htm
	/// </summary>
	public enum IfcWindowTypeEnum {WINDOW,SKYLIGHT,LIGHTDOME,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowtypepartitioningenum.htm
	/// </summary>
	public enum IfcWindowTypePartitioningEnum {SINGLE_PANEL,DOUBLE_PANEL_VERTICAL,DOUBLE_PANEL_HORIZONTAL,TRIPLE_PANEL_VERTICAL,TRIPLE_PANEL_BOTTOM,TRIPLE_PANEL_TOP,TRIPLE_PANEL_LEFT,TRIPLE_PANEL_RIGHT,TRIPLE_PANEL_HORIZONTAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkcalendartypeenum.htm
	/// </summary>
	public enum IfcWorkCalendarTypeEnum {FIRSTSHIFT,SECONDSHIFT,THIRDSHIFT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkplantypeenum.htm
	/// </summary>
	public enum IfcWorkPlanTypeEnum {ACTUAL,BASELINE,PLANNED,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkscheduletypeenum.htm
	/// </summary>
	public enum IfcWorkScheduleTypeEnum {ACTUAL,BASELINE,PLANNED,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactorselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcActorSelect>))]
	public class IfcActorSelect : IfcSelect<IfcOrganization,IfcPerson,IfcPersonAndOrganization>
	{
		public IfcActorSelect(IfcOrganization value):base(value){}
		public IfcActorSelect(IfcPerson value):base(value){}
		public IfcActorSelect(IfcPersonAndOrganization value):base(value){}

		public static IfcActorSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcActorSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcappliedvalueselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcAppliedValueSelect>))]
	public class IfcAppliedValueSelect : IfcSelect<IfcMeasureWithUnit,IfcReference,IfcValue>
	{
		public IfcAppliedValueSelect(IfcMeasureWithUnit value):base(value){}
		public IfcAppliedValueSelect(IfcReference value):base(value){}
		public IfcAppliedValueSelect(IfcValue value):base(value){}

		public static IfcAppliedValueSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAppliedValueSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaxis2placement.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcAxis2Placement>))]
	public class IfcAxis2Placement : IfcSelect<IfcAxis2Placement2D,IfcAxis2Placement3D>
	{
		public IfcAxis2Placement(IfcAxis2Placement2D value):base(value){}
		public IfcAxis2Placement(IfcAxis2Placement3D value):base(value){}

		public static IfcAxis2Placement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAxis2Placement>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbendingparameterselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcBendingParameterSelect>))]
	public class IfcBendingParameterSelect : IfcSelect<IfcLengthMeasure,IfcPlaneAngleMeasure>
	{
		public IfcBendingParameterSelect(IfcLengthMeasure value):base(value){}
		public IfcBendingParameterSelect(IfcPlaneAngleMeasure value):base(value){}

		public static IfcBendingParameterSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBendingParameterSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbooleanoperand.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcBooleanOperand>))]
	public class IfcBooleanOperand : IfcSelect<IfcBooleanResult,IfcCsgPrimitive3D,IfcHalfSpaceSolid,IfcSolidModel>
	{
		public IfcBooleanOperand(IfcBooleanResult value):base(value){}
		public IfcBooleanOperand(IfcCsgPrimitive3D value):base(value){}
		public IfcBooleanOperand(IfcHalfSpaceSolid value):base(value){}
		public IfcBooleanOperand(IfcSolidModel value):base(value){}

		public static IfcBooleanOperand FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBooleanOperand>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcclassificationreferenceselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcClassificationReferenceSelect>))]
	public class IfcClassificationReferenceSelect : IfcSelect<IfcClassification,IfcClassificationReference>
	{
		public IfcClassificationReferenceSelect(IfcClassification value):base(value){}
		public IfcClassificationReferenceSelect(IfcClassificationReference value):base(value){}

		public static IfcClassificationReferenceSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcClassificationReferenceSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcclassificationselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcClassificationSelect>))]
	public class IfcClassificationSelect : IfcSelect<IfcClassification,IfcClassificationReference>
	{
		public IfcClassificationSelect(IfcClassification value):base(value){}
		public IfcClassificationSelect(IfcClassificationReference value):base(value){}

		public static IfcClassificationSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcClassificationSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolour.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcColour>))]
	public class IfcColour : IfcSelect<IfcColourSpecification,IfcPreDefinedColour>
	{
		public IfcColour(IfcColourSpecification value):base(value){}
		public IfcColour(IfcPreDefinedColour value):base(value){}

		public static IfcColour FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColour>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolourorfactor.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcColourOrFactor>))]
	public class IfcColourOrFactor : IfcSelect<IfcColourRgb,IfcNormalisedRatioMeasure>
	{
		public IfcColourOrFactor(IfcColourRgb value):base(value){}
		public IfcColourOrFactor(IfcNormalisedRatioMeasure value):base(value){}

		public static IfcColourOrFactor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColourOrFactor>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoordinatereferencesystemselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcCoordinateReferenceSystemSelect>))]
	public class IfcCoordinateReferenceSystemSelect : IfcSelect<IfcCoordinateReferenceSystem,IfcGeometricRepresentationContext>
	{
		public IfcCoordinateReferenceSystemSelect(IfcCoordinateReferenceSystem value):base(value){}
		public IfcCoordinateReferenceSystemSelect(IfcGeometricRepresentationContext value):base(value){}

		public static IfcCoordinateReferenceSystemSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoordinateReferenceSystemSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccsgselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcCsgSelect>))]
	public class IfcCsgSelect : IfcSelect<IfcBooleanResult,IfcCsgPrimitive3D>
	{
		public IfcCsgSelect(IfcBooleanResult value):base(value){}
		public IfcCsgSelect(IfcCsgPrimitive3D value):base(value){}

		public static IfcCsgSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCsgSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvefontorscaledcurvefontselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcCurveFontOrScaledCurveFontSelect>))]
	public class IfcCurveFontOrScaledCurveFontSelect : IfcSelect<IfcCurveStyleFontAndScaling,IfcCurveStyleFontSelect>
	{
		public IfcCurveFontOrScaledCurveFontSelect(IfcCurveStyleFontAndScaling value):base(value){}
		public IfcCurveFontOrScaledCurveFontSelect(IfcCurveStyleFontSelect value):base(value){}

		public static IfcCurveFontOrScaledCurveFontSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveFontOrScaledCurveFontSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurveonsurface.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcCurveOnSurface>))]
	public class IfcCurveOnSurface : IfcSelect<IfcCompositeCurveOnSurface,IfcPcurve>
	{
		public IfcCurveOnSurface(IfcCompositeCurveOnSurface value):base(value){}
		public IfcCurveOnSurface(IfcPcurve value):base(value){}

		public static IfcCurveOnSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveOnSurface>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurveoredgecurve.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcCurveOrEdgeCurve>))]
	public class IfcCurveOrEdgeCurve : IfcSelect<IfcBoundedCurve,IfcEdgeCurve>
	{
		public IfcCurveOrEdgeCurve(IfcBoundedCurve value):base(value){}
		public IfcCurveOrEdgeCurve(IfcEdgeCurve value):base(value){}

		public static IfcCurveOrEdgeCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveOrEdgeCurve>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvestylefontselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcCurveStyleFontSelect>))]
	public class IfcCurveStyleFontSelect : IfcSelect<IfcCurveStyleFont,IfcPreDefinedCurveFont>
	{
		public IfcCurveStyleFontSelect(IfcCurveStyleFont value):base(value){}
		public IfcCurveStyleFontSelect(IfcPreDefinedCurveFont value):base(value){}

		public static IfcCurveStyleFontSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveStyleFontSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdefinitionselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcDefinitionSelect>))]
	public class IfcDefinitionSelect : IfcSelect<IfcObjectDefinition,IfcPropertyDefinition>
	{
		public IfcDefinitionSelect(IfcObjectDefinition value):base(value){}
		public IfcDefinitionSelect(IfcPropertyDefinition value):base(value){}

		public static IfcDefinitionSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDefinitionSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcderivedmeasurevalue.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcDerivedMeasureValue>))]
	public class IfcDerivedMeasureValue : IfcSelect<IfcAbsorbedDoseMeasure,IfcAccelerationMeasure,IfcAngularVelocityMeasure,IfcAreaDensityMeasure,IfcCompoundPlaneAngleMeasure,IfcCurvatureMeasure,IfcDoseEquivalentMeasure,IfcDynamicViscosityMeasure,IfcElectricCapacitanceMeasure,IfcElectricChargeMeasure,IfcElectricConductanceMeasure,IfcElectricResistanceMeasure,IfcElectricVoltageMeasure,IfcEnergyMeasure,IfcForceMeasure,IfcFrequencyMeasure,IfcHeatFluxDensityMeasure,IfcHeatingValueMeasure,IfcIlluminanceMeasure,IfcInductanceMeasure,IfcIntegerCountRateMeasure,IfcIonConcentrationMeasure,IfcIsothermalMoistureCapacityMeasure,IfcKinematicViscosityMeasure,IfcLinearForceMeasure,IfcLinearMomentMeasure,IfcLinearStiffnessMeasure,IfcLinearVelocityMeasure,IfcLuminousFluxMeasure,IfcLuminousIntensityDistributionMeasure,IfcMagneticFluxDensityMeasure,IfcMagneticFluxMeasure,IfcMassDensityMeasure,IfcMassFlowRateMeasure,IfcMassPerLengthMeasure,IfcModulusOfElasticityMeasure,IfcModulusOfLinearSubgradeReactionMeasure,IfcModulusOfRotationalSubgradeReactionMeasure,IfcModulusOfSubgradeReactionMeasure,IfcMoistureDiffusivityMeasure,IfcMolecularWeightMeasure,IfcMomentOfInertiaMeasure,IfcMonetaryMeasure,IfcPHMeasure,IfcPlanarForceMeasure,IfcPowerMeasure,IfcPressureMeasure,IfcRadioActivityMeasure,IfcRotationalFrequencyMeasure,IfcRotationalMassMeasure,IfcRotationalStiffnessMeasure,IfcSectionModulusMeasure,IfcSectionalAreaIntegralMeasure,IfcShearModulusMeasure,IfcSoundPowerLevelMeasure,IfcSoundPowerMeasure,IfcSoundPressureLevelMeasure,IfcSoundPressureMeasure,IfcSpecificHeatCapacityMeasure,IfcTemperatureGradientMeasure,IfcTemperatureRateOfChangeMeasure,IfcThermalAdmittanceMeasure,IfcThermalConductivityMeasure,IfcThermalExpansionCoefficientMeasure,IfcThermalResistanceMeasure,IfcThermalTransmittanceMeasure,IfcTorqueMeasure,IfcVaporPermeabilityMeasure,IfcVolumetricFlowRateMeasure,IfcWarpingConstantMeasure,IfcWarpingMomentMeasure>
	{
		public IfcDerivedMeasureValue(IfcAbsorbedDoseMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcAccelerationMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcAngularVelocityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcAreaDensityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcCompoundPlaneAngleMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcCurvatureMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcDoseEquivalentMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcDynamicViscosityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcElectricCapacitanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcElectricChargeMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcElectricConductanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcElectricResistanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcElectricVoltageMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcEnergyMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcForceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcFrequencyMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcHeatFluxDensityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcHeatingValueMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcIlluminanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcInductanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcIntegerCountRateMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcIonConcentrationMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcIsothermalMoistureCapacityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcKinematicViscosityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcLinearForceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcLinearMomentMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcLinearStiffnessMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcLinearVelocityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcLuminousFluxMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcLuminousIntensityDistributionMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMagneticFluxDensityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMagneticFluxMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMassDensityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMassFlowRateMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMassPerLengthMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcModulusOfElasticityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcModulusOfLinearSubgradeReactionMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcModulusOfRotationalSubgradeReactionMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcModulusOfSubgradeReactionMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMoistureDiffusivityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMolecularWeightMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMomentOfInertiaMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMonetaryMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcPHMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcPlanarForceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcPowerMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcPressureMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcRadioActivityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcRotationalFrequencyMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcRotationalMassMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcRotationalStiffnessMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSectionModulusMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSectionalAreaIntegralMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcShearModulusMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSoundPowerLevelMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSoundPowerMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSoundPressureLevelMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSoundPressureMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSpecificHeatCapacityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcTemperatureGradientMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcTemperatureRateOfChangeMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcThermalAdmittanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcThermalConductivityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcThermalExpansionCoefficientMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcThermalResistanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcThermalTransmittanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcTorqueMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcVaporPermeabilityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcVolumetricFlowRateMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcWarpingConstantMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcWarpingMomentMeasure value):base(value){}

		public static IfcDerivedMeasureValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDerivedMeasureValue>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdocumentselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcDocumentSelect>))]
	public class IfcDocumentSelect : IfcSelect<IfcDocumentInformation,IfcDocumentReference>
	{
		public IfcDocumentSelect(IfcDocumentInformation value):base(value){}
		public IfcDocumentSelect(IfcDocumentReference value):base(value){}

		public static IfcDocumentSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDocumentSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfillstyleselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcFillStyleSelect>))]
	public class IfcFillStyleSelect : IfcSelect<IfcColour,IfcExternallyDefinedHatchStyle,IfcFillAreaStyleHatching,IfcFillAreaStyleTiles>
	{
		public IfcFillStyleSelect(IfcColour value):base(value){}
		public IfcFillStyleSelect(IfcExternallyDefinedHatchStyle value):base(value){}
		public IfcFillStyleSelect(IfcFillAreaStyleHatching value):base(value){}
		public IfcFillStyleSelect(IfcFillAreaStyleTiles value):base(value){}

		public static IfcFillStyleSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFillStyleSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometricsetselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcGeometricSetSelect>))]
	public class IfcGeometricSetSelect : IfcSelect<IfcCurve,IfcPoint,IfcSurface>
	{
		public IfcGeometricSetSelect(IfcCurve value):base(value){}
		public IfcGeometricSetSelect(IfcPoint value):base(value){}
		public IfcGeometricSetSelect(IfcSurface value):base(value){}

		public static IfcGeometricSetSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeometricSetSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgridplacementdirectionselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcGridPlacementDirectionSelect>))]
	public class IfcGridPlacementDirectionSelect : IfcSelect<IfcDirection,IfcVirtualGridIntersection>
	{
		public IfcGridPlacementDirectionSelect(IfcDirection value):base(value){}
		public IfcGridPlacementDirectionSelect(IfcVirtualGridIntersection value):base(value){}

		public static IfcGridPlacementDirectionSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGridPlacementDirectionSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifchatchlinedistanceselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcHatchLineDistanceSelect>))]
	public class IfcHatchLineDistanceSelect : IfcSelect<IfcPositiveLengthMeasure,IfcVector>
	{
		public IfcHatchLineDistanceSelect(IfcPositiveLengthMeasure value):base(value){}
		public IfcHatchLineDistanceSelect(IfcVector value):base(value){}

		public static IfcHatchLineDistanceSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHatchLineDistanceSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclayereditem.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcLayeredItem>))]
	public class IfcLayeredItem : IfcSelect<IfcRepresentation,IfcRepresentationItem>
	{
		public IfcLayeredItem(IfcRepresentation value):base(value){}
		public IfcLayeredItem(IfcRepresentationItem value):base(value){}

		public static IfcLayeredItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLayeredItem>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclibraryselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcLibrarySelect>))]
	public class IfcLibrarySelect : IfcSelect<IfcLibraryInformation,IfcLibraryReference>
	{
		public IfcLibrarySelect(IfcLibraryInformation value):base(value){}
		public IfcLibrarySelect(IfcLibraryReference value):base(value){}

		public static IfcLibrarySelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLibrarySelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightdistributiondatasourceselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcLightDistributionDataSourceSelect>))]
	public class IfcLightDistributionDataSourceSelect : IfcSelect<IfcExternalReference,IfcLightIntensityDistribution>
	{
		public IfcLightDistributionDataSourceSelect(IfcExternalReference value):base(value){}
		public IfcLightDistributionDataSourceSelect(IfcLightIntensityDistribution value):base(value){}

		public static IfcLightDistributionDataSourceSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightDistributionDataSourceSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcMaterialSelect>))]
	public class IfcMaterialSelect : IfcSelect<IfcMaterialDefinition,IfcMaterialList,IfcMaterialUsageDefinition>
	{
		public IfcMaterialSelect(IfcMaterialDefinition value):base(value){}
		public IfcMaterialSelect(IfcMaterialList value):base(value){}
		public IfcMaterialSelect(IfcMaterialUsageDefinition value):base(value){}

		public static IfcMaterialSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmeasurevalue.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcMeasureValue>))]
	public class IfcMeasureValue : IfcSelect<IfcAmountOfSubstanceMeasure,IfcAreaMeasure,IfcComplexNumber,IfcContextDependentMeasure,IfcCountMeasure,IfcDescriptiveMeasure,IfcElectricCurrentMeasure,IfcLengthMeasure,IfcLuminousIntensityMeasure,IfcMassMeasure,IfcNonNegativeLengthMeasure,IfcNormalisedRatioMeasure,IfcNumericMeasure,IfcParameterValue,IfcPlaneAngleMeasure,IfcPositiveLengthMeasure,IfcPositivePlaneAngleMeasure,IfcPositiveRatioMeasure,IfcRatioMeasure,IfcSolidAngleMeasure,IfcThermodynamicTemperatureMeasure,IfcTimeMeasure,IfcVolumeMeasure>
	{
		public IfcMeasureValue(IfcAmountOfSubstanceMeasure value):base(value){}
		public IfcMeasureValue(IfcAreaMeasure value):base(value){}
		public IfcMeasureValue(IfcComplexNumber value):base(value){}
		public IfcMeasureValue(IfcContextDependentMeasure value):base(value){}
		public IfcMeasureValue(IfcCountMeasure value):base(value){}
		public IfcMeasureValue(IfcDescriptiveMeasure value):base(value){}
		public IfcMeasureValue(IfcElectricCurrentMeasure value):base(value){}
		public IfcMeasureValue(IfcLengthMeasure value):base(value){}
		public IfcMeasureValue(IfcLuminousIntensityMeasure value):base(value){}
		public IfcMeasureValue(IfcMassMeasure value):base(value){}
		public IfcMeasureValue(IfcNonNegativeLengthMeasure value):base(value){}
		public IfcMeasureValue(IfcNormalisedRatioMeasure value):base(value){}
		public IfcMeasureValue(IfcNumericMeasure value):base(value){}
		public IfcMeasureValue(IfcParameterValue value):base(value){}
		public IfcMeasureValue(IfcPlaneAngleMeasure value):base(value){}
		public IfcMeasureValue(IfcPositiveLengthMeasure value):base(value){}
		public IfcMeasureValue(IfcPositivePlaneAngleMeasure value):base(value){}
		public IfcMeasureValue(IfcPositiveRatioMeasure value):base(value){}
		public IfcMeasureValue(IfcRatioMeasure value):base(value){}
		public IfcMeasureValue(IfcSolidAngleMeasure value):base(value){}
		public IfcMeasureValue(IfcThermodynamicTemperatureMeasure value):base(value){}
		public IfcMeasureValue(IfcTimeMeasure value):base(value){}
		public IfcMeasureValue(IfcVolumeMeasure value):base(value){}

		public static IfcMeasureValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMeasureValue>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmetricvalueselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcMetricValueSelect>))]
	public class IfcMetricValueSelect : IfcSelect<IfcAppliedValue,IfcMeasureWithUnit,IfcReference,IfcTable,IfcTimeSeries,IfcValue>
	{
		public IfcMetricValueSelect(IfcAppliedValue value):base(value){}
		public IfcMetricValueSelect(IfcMeasureWithUnit value):base(value){}
		public IfcMetricValueSelect(IfcReference value):base(value){}
		public IfcMetricValueSelect(IfcTable value):base(value){}
		public IfcMetricValueSelect(IfcTimeSeries value):base(value){}
		public IfcMetricValueSelect(IfcValue value):base(value){}

		public static IfcMetricValueSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMetricValueSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusofrotationalsubgradereactionselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcModulusOfRotationalSubgradeReactionSelect>))]
	public class IfcModulusOfRotationalSubgradeReactionSelect : IfcSelect<IfcBoolean,IfcModulusOfRotationalSubgradeReactionMeasure>
	{
		public IfcModulusOfRotationalSubgradeReactionSelect(IfcBoolean value):base(value){}
		public IfcModulusOfRotationalSubgradeReactionSelect(IfcModulusOfRotationalSubgradeReactionMeasure value):base(value){}

		public static IfcModulusOfRotationalSubgradeReactionSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfRotationalSubgradeReactionSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusofsubgradereactionselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcModulusOfSubgradeReactionSelect>))]
	public class IfcModulusOfSubgradeReactionSelect : IfcSelect<IfcBoolean,IfcModulusOfSubgradeReactionMeasure>
	{
		public IfcModulusOfSubgradeReactionSelect(IfcBoolean value):base(value){}
		public IfcModulusOfSubgradeReactionSelect(IfcModulusOfSubgradeReactionMeasure value):base(value){}

		public static IfcModulusOfSubgradeReactionSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfSubgradeReactionSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusoftranslationalsubgradereactionselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcModulusOfTranslationalSubgradeReactionSelect>))]
	public class IfcModulusOfTranslationalSubgradeReactionSelect : IfcSelect<IfcBoolean,IfcModulusOfLinearSubgradeReactionMeasure>
	{
		public IfcModulusOfTranslationalSubgradeReactionSelect(IfcBoolean value):base(value){}
		public IfcModulusOfTranslationalSubgradeReactionSelect(IfcModulusOfLinearSubgradeReactionMeasure value):base(value){}

		public static IfcModulusOfTranslationalSubgradeReactionSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfTranslationalSubgradeReactionSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobjectreferenceselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcObjectReferenceSelect>))]
	public class IfcObjectReferenceSelect : IfcSelect<IfcAddress,IfcAppliedValue,IfcExternalReference,IfcMaterialDefinition,IfcOrganization,IfcPerson,IfcPersonAndOrganization,IfcTable,IfcTimeSeries>
	{
		public IfcObjectReferenceSelect(IfcAddress value):base(value){}
		public IfcObjectReferenceSelect(IfcAppliedValue value):base(value){}
		public IfcObjectReferenceSelect(IfcExternalReference value):base(value){}
		public IfcObjectReferenceSelect(IfcMaterialDefinition value):base(value){}
		public IfcObjectReferenceSelect(IfcOrganization value):base(value){}
		public IfcObjectReferenceSelect(IfcPerson value):base(value){}
		public IfcObjectReferenceSelect(IfcPersonAndOrganization value):base(value){}
		public IfcObjectReferenceSelect(IfcTable value):base(value){}
		public IfcObjectReferenceSelect(IfcTimeSeries value):base(value){}

		public static IfcObjectReferenceSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcObjectReferenceSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpointorvertexpoint.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcPointOrVertexPoint>))]
	public class IfcPointOrVertexPoint : IfcSelect<IfcPoint,IfcVertexPoint>
	{
		public IfcPointOrVertexPoint(IfcPoint value):base(value){}
		public IfcPointOrVertexPoint(IfcVertexPoint value):base(value){}

		public static IfcPointOrVertexPoint FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPointOrVertexPoint>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentationstyleselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcPresentationStyleSelect>))]
	public class IfcPresentationStyleSelect : IfcSelect<IfcCurveStyle,IfcFillAreaStyle,IfcNullStyle,IfcSurfaceStyle,IfcTextStyle>
	{
		public IfcPresentationStyleSelect(IfcCurveStyle value):base(value){}
		public IfcPresentationStyleSelect(IfcFillAreaStyle value):base(value){}
		public IfcPresentationStyleSelect(IfcNullStyle value):base(value){}
		public IfcPresentationStyleSelect(IfcSurfaceStyle value):base(value){}
		public IfcPresentationStyleSelect(IfcTextStyle value):base(value){}

		public static IfcPresentationStyleSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentationStyleSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprocessselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcProcessSelect>))]
	public class IfcProcessSelect : IfcSelect<IfcProcess,IfcTypeProcess>
	{
		public IfcProcessSelect(IfcProcess value):base(value){}
		public IfcProcessSelect(IfcTypeProcess value):base(value){}

		public static IfcProcessSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProcessSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproductrepresentationselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcProductRepresentationSelect>))]
	public class IfcProductRepresentationSelect : IfcSelect<IfcProductDefinitionShape,IfcRepresentationMap>
	{
		public IfcProductRepresentationSelect(IfcProductDefinitionShape value):base(value){}
		public IfcProductRepresentationSelect(IfcRepresentationMap value):base(value){}

		public static IfcProductRepresentationSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProductRepresentationSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproductselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcProductSelect>))]
	public class IfcProductSelect : IfcSelect<IfcProduct,IfcTypeProduct>
	{
		public IfcProductSelect(IfcProduct value):base(value){}
		public IfcProductSelect(IfcTypeProduct value):base(value){}

		public static IfcProductSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProductSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertysetdefinitionselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcPropertySetDefinitionSelect>))]
	public class IfcPropertySetDefinitionSelect : IfcSelect<IfcPropertySetDefinition,IfcPropertySetDefinitionSet>
	{
		public IfcPropertySetDefinitionSelect(IfcPropertySetDefinition value):base(value){}
		public IfcPropertySetDefinitionSelect(IfcPropertySetDefinitionSet value):base(value){}

		public static IfcPropertySetDefinitionSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertySetDefinitionSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresourceobjectselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcResourceObjectSelect>))]
	public class IfcResourceObjectSelect : IfcSelect<IfcActorRole,IfcAppliedValue,IfcApproval,IfcConstraint,IfcContextDependentUnit,IfcConversionBasedUnit,IfcExternalInformation,IfcExternalReference,IfcMaterialDefinition,IfcOrganization,IfcPerson,IfcPersonAndOrganization,IfcPhysicalQuantity,IfcProfileDef,IfcPropertyAbstraction,IfcTimeSeries>
	{
		public IfcResourceObjectSelect(IfcActorRole value):base(value){}
		public IfcResourceObjectSelect(IfcAppliedValue value):base(value){}
		public IfcResourceObjectSelect(IfcApproval value):base(value){}
		public IfcResourceObjectSelect(IfcConstraint value):base(value){}
		public IfcResourceObjectSelect(IfcContextDependentUnit value):base(value){}
		public IfcResourceObjectSelect(IfcConversionBasedUnit value):base(value){}
		public IfcResourceObjectSelect(IfcExternalInformation value):base(value){}
		public IfcResourceObjectSelect(IfcExternalReference value):base(value){}
		public IfcResourceObjectSelect(IfcMaterialDefinition value):base(value){}
		public IfcResourceObjectSelect(IfcOrganization value):base(value){}
		public IfcResourceObjectSelect(IfcPerson value):base(value){}
		public IfcResourceObjectSelect(IfcPersonAndOrganization value):base(value){}
		public IfcResourceObjectSelect(IfcPhysicalQuantity value):base(value){}
		public IfcResourceObjectSelect(IfcProfileDef value):base(value){}
		public IfcResourceObjectSelect(IfcPropertyAbstraction value):base(value){}
		public IfcResourceObjectSelect(IfcTimeSeries value):base(value){}

		public static IfcResourceObjectSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResourceObjectSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresourceselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcResourceSelect>))]
	public class IfcResourceSelect : IfcSelect<IfcResource,IfcTypeResource>
	{
		public IfcResourceSelect(IfcResource value):base(value){}
		public IfcResourceSelect(IfcTypeResource value):base(value){}

		public static IfcResourceSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResourceSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrotationalstiffnessselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcRotationalStiffnessSelect>))]
	public class IfcRotationalStiffnessSelect : IfcSelect<IfcBoolean,IfcRotationalStiffnessMeasure>
	{
		public IfcRotationalStiffnessSelect(IfcBoolean value):base(value){}
		public IfcRotationalStiffnessSelect(IfcRotationalStiffnessMeasure value):base(value){}

		public static IfcRotationalStiffnessSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRotationalStiffnessSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshell.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcShell>))]
	public class IfcShell : IfcSelect<IfcClosedShell,IfcOpenShell>
	{
		public IfcShell(IfcClosedShell value):base(value){}
		public IfcShell(IfcOpenShell value):base(value){}

		public static IfcShell FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShell>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsimplevalue.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcSimpleValue>))]
	public class IfcSimpleValue : IfcSelect<IfcBoolean,IfcDate,IfcDateTime,IfcDuration,IfcIdentifier,IfcInteger,IfcLabel,IfcLogical,IfcReal,IfcText,IfcTime,IfcTimeStamp>
	{
		public IfcSimpleValue(IfcBoolean value):base(value){}
		public IfcSimpleValue(IfcDate value):base(value){}
		public IfcSimpleValue(IfcDateTime value):base(value){}
		public IfcSimpleValue(IfcDuration value):base(value){}
		public IfcSimpleValue(IfcIdentifier value):base(value){}
		public IfcSimpleValue(IfcInteger value):base(value){}
		public IfcSimpleValue(IfcLabel value):base(value){}
		public IfcSimpleValue(IfcLogical value):base(value){}
		public IfcSimpleValue(IfcReal value):base(value){}
		public IfcSimpleValue(IfcText value):base(value){}
		public IfcSimpleValue(IfcTime value):base(value){}
		public IfcSimpleValue(IfcTimeStamp value):base(value){}

		public static IfcSimpleValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSimpleValue>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsizeselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcSizeSelect>))]
	public class IfcSizeSelect : IfcSelect<IfcDescriptiveMeasure,IfcLengthMeasure,IfcNormalisedRatioMeasure,IfcPositiveLengthMeasure,IfcPositiveRatioMeasure,IfcRatioMeasure>
	{
		public IfcSizeSelect(IfcDescriptiveMeasure value):base(value){}
		public IfcSizeSelect(IfcLengthMeasure value):base(value){}
		public IfcSizeSelect(IfcNormalisedRatioMeasure value):base(value){}
		public IfcSizeSelect(IfcPositiveLengthMeasure value):base(value){}
		public IfcSizeSelect(IfcPositiveRatioMeasure value):base(value){}
		public IfcSizeSelect(IfcRatioMeasure value):base(value){}

		public static IfcSizeSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSizeSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsolidorshell.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcSolidOrShell>))]
	public class IfcSolidOrShell : IfcSelect<IfcClosedShell,IfcSolidModel>
	{
		public IfcSolidOrShell(IfcClosedShell value):base(value){}
		public IfcSolidOrShell(IfcSolidModel value):base(value){}

		public static IfcSolidOrShell FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSolidOrShell>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspaceboundaryselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcSpaceBoundarySelect>))]
	public class IfcSpaceBoundarySelect : IfcSelect<IfcExternalSpatialElement,IfcSpace>
	{
		public IfcSpaceBoundarySelect(IfcExternalSpatialElement value):base(value){}
		public IfcSpaceBoundarySelect(IfcSpace value):base(value){}

		public static IfcSpaceBoundarySelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpaceBoundarySelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspecularhighlightselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcSpecularHighlightSelect>))]
	public class IfcSpecularHighlightSelect : IfcSelect<IfcSpecularExponent,IfcSpecularRoughness>
	{
		public IfcSpecularHighlightSelect(IfcSpecularExponent value):base(value){}
		public IfcSpecularHighlightSelect(IfcSpecularRoughness value):base(value){}

		public static IfcSpecularHighlightSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpecularHighlightSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralactivityassignmentselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcStructuralActivityAssignmentSelect>))]
	public class IfcStructuralActivityAssignmentSelect : IfcSelect<IfcElement,IfcStructuralItem>
	{
		public IfcStructuralActivityAssignmentSelect(IfcElement value):base(value){}
		public IfcStructuralActivityAssignmentSelect(IfcStructuralItem value):base(value){}

		public static IfcStructuralActivityAssignmentSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralActivityAssignmentSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstyleassignmentselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcStyleAssignmentSelect>))]
	public class IfcStyleAssignmentSelect : IfcSelect<IfcPresentationStyle,IfcPresentationStyleAssignment>
	{
		public IfcStyleAssignmentSelect(IfcPresentationStyle value):base(value){}
		public IfcStyleAssignmentSelect(IfcPresentationStyleAssignment value):base(value){}

		public static IfcStyleAssignmentSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStyleAssignmentSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfaceorfacesurface.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcSurfaceOrFaceSurface>))]
	public class IfcSurfaceOrFaceSurface : IfcSelect<IfcFaceBasedSurfaceModel,IfcFaceSurface,IfcSurface>
	{
		public IfcSurfaceOrFaceSurface(IfcFaceBasedSurfaceModel value):base(value){}
		public IfcSurfaceOrFaceSurface(IfcFaceSurface value):base(value){}
		public IfcSurfaceOrFaceSurface(IfcSurface value):base(value){}

		public static IfcSurfaceOrFaceSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceOrFaceSurface>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestyleelementselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcSurfaceStyleElementSelect>))]
	public class IfcSurfaceStyleElementSelect : IfcSelect<IfcExternallyDefinedSurfaceStyle,IfcSurfaceStyleLighting,IfcSurfaceStyleRefraction,IfcSurfaceStyleShading,IfcSurfaceStyleWithTextures>
	{
		public IfcSurfaceStyleElementSelect(IfcExternallyDefinedSurfaceStyle value):base(value){}
		public IfcSurfaceStyleElementSelect(IfcSurfaceStyleLighting value):base(value){}
		public IfcSurfaceStyleElementSelect(IfcSurfaceStyleRefraction value):base(value){}
		public IfcSurfaceStyleElementSelect(IfcSurfaceStyleShading value):base(value){}
		public IfcSurfaceStyleElementSelect(IfcSurfaceStyleWithTextures value):base(value){}

		public static IfcSurfaceStyleElementSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyleElementSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextfontselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcTextFontSelect>))]
	public class IfcTextFontSelect : IfcSelect<IfcExternallyDefinedTextFont,IfcPreDefinedTextFont>
	{
		public IfcTextFontSelect(IfcExternallyDefinedTextFont value):base(value){}
		public IfcTextFontSelect(IfcPreDefinedTextFont value):base(value){}

		public static IfcTextFontSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextFontSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimeorratioselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcTimeOrRatioSelect>))]
	public class IfcTimeOrRatioSelect : IfcSelect<IfcDuration,IfcRatioMeasure>
	{
		public IfcTimeOrRatioSelect(IfcDuration value):base(value){}
		public IfcTimeOrRatioSelect(IfcRatioMeasure value):base(value){}

		public static IfcTimeOrRatioSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTimeOrRatioSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctranslationalstiffnessselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcTranslationalStiffnessSelect>))]
	public class IfcTranslationalStiffnessSelect : IfcSelect<IfcBoolean,IfcLinearStiffnessMeasure>
	{
		public IfcTranslationalStiffnessSelect(IfcBoolean value):base(value){}
		public IfcTranslationalStiffnessSelect(IfcLinearStiffnessMeasure value):base(value){}

		public static IfcTranslationalStiffnessSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTranslationalStiffnessSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctrimmingselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcTrimmingSelect>))]
	public class IfcTrimmingSelect : IfcSelect<IfcCartesianPoint,IfcParameterValue>
	{
		public IfcTrimmingSelect(IfcCartesianPoint value):base(value){}
		public IfcTrimmingSelect(IfcParameterValue value):base(value){}

		public static IfcTrimmingSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTrimmingSelect>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunit.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcUnit>))]
	public class IfcUnit : IfcSelect<IfcDerivedUnit,IfcMonetaryUnit,IfcNamedUnit>
	{
		public IfcUnit(IfcDerivedUnit value):base(value){}
		public IfcUnit(IfcMonetaryUnit value):base(value){}
		public IfcUnit(IfcNamedUnit value):base(value){}

		public static IfcUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUnit>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvalue.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcValue>))]
	public class IfcValue : IfcSelect<IfcDerivedMeasureValue,IfcMeasureValue,IfcSimpleValue>
	{
		public IfcValue(IfcDerivedMeasureValue value):base(value){}
		public IfcValue(IfcMeasureValue value):base(value){}
		public IfcValue(IfcSimpleValue value):base(value){}

		public static IfcValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcValue>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvectorordirection.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcVectorOrDirection>))]
	public class IfcVectorOrDirection : IfcSelect<IfcDirection,IfcVector>
	{
		public IfcVectorOrDirection(IfcDirection value):base(value){}
		public IfcVectorOrDirection(IfcVector value):base(value){}

		public static IfcVectorOrDirection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVectorOrDirection>(json);
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwarpingstiffnessselect.htm
	/// </summary>
	[TypeConverter(typeof(SelectConverter<IfcWarpingStiffnessSelect>))]
	public class IfcWarpingStiffnessSelect : IfcSelect<IfcBoolean,IfcWarpingMomentMeasure>
	{
		public IfcWarpingStiffnessSelect(IfcBoolean value):base(value){}
		public IfcWarpingStiffnessSelect(IfcWarpingMomentMeasure value):base(value){}

		public static IfcWarpingStiffnessSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWarpingStiffnessSelect>(json);
		}
	}


	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactionrequest.htm"/>
	/// </summary>
	public  partial class IfcActionRequest : IfcControl
	{
		public IfcActionRequestTypeEnum PredefinedType{get;set;} // optional
		public IfcLabel Status{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional

		/// <summary>
		/// Construct a IfcActionRequest with all required attributes.
		/// </summary>
		public IfcActionRequest(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcActionRequest with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcActionRequest(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcActionRequestTypeEnum predefinedType,IfcLabel status,IfcText longDescription):base(globalId,ownerHistory,name,description,objectType,identification)
		{
			PredefinedType = predefinedType;
			Status = status;
			LongDescription = longDescription;

		}
		public static new IfcActionRequest FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcActionRequest>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontrol.htm"/>
	/// </summary>
	public abstract partial class IfcControl : IfcObject
	{
		public IfcIdentifier Identification{get;set;} // optional

		/// <summary>
		/// Construct a IfcControl with all required attributes.
		/// </summary>
		public IfcControl(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcControl with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcControl(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification):base(globalId,ownerHistory,name,description,objectType)
		{
			Identification = identification;

		}
		public static new IfcControl FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcControl>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactor.htm"/>
	/// </summary>
	public  partial class IfcActor : IfcObject
	{
		public IfcActorSelect TheActor{get;set;} 

		/// <summary>
		/// Construct a IfcActor with all required attributes.
		/// </summary>
		public IfcActor(IfcGloballyUniqueId globalId,IfcActorSelect theActor):base(globalId)
		{
			TheActor = theActor;

		}
		/// <summary>
		/// Construct a IfcActor with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcActor(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcActorSelect theActor):base(globalId,ownerHistory,name,description,objectType)
		{
			TheActor = theActor;

		}
		public static new IfcActor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcActor>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoccupant.htm"/>
	/// </summary>
	public  partial class IfcOccupant : IfcActor
	{
		public IfcOccupantTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcOccupant with all required attributes.
		/// </summary>
		public IfcOccupant(IfcGloballyUniqueId globalId,IfcActorSelect theActor):base(globalId,theActor)
		{

		}
		/// <summary>
		/// Construct a IfcOccupant with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcOccupant(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcActorSelect theActor,IfcOccupantTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,theActor)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcOccupant FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOccupant>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobject.htm"/>
	/// </summary>
	public abstract partial class IfcObject : IfcObjectDefinition
	{
		public IfcLabel ObjectType{get;set;} // optional

		/// <summary>
		/// Construct a IfcObject with all required attributes.
		/// </summary>
		public IfcObject(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcObject with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcObject(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType):base(globalId,ownerHistory,name,description)
		{
			ObjectType = objectType;

		}
		public static new IfcObject FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcObject>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactorrole.htm"/>
	/// </summary>
	public  partial class IfcActorRole : BaseIfc
	{
		public IfcRoleEnum Role{get;set;} 
		public IfcLabel UserDefinedRole{get;set;} // optional
		public IfcText Description{get;set;} // optional

		/// <summary>
		/// Construct a IfcActorRole with all required attributes.
		/// </summary>
		public IfcActorRole(IfcRoleEnum role):base()
		{
			Role = role;

		}
		/// <summary>
		/// Construct a IfcActorRole with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcActorRole(IfcRoleEnum role,IfcLabel userDefinedRole,IfcText description):base()
		{
			Role = role;
			UserDefinedRole = userDefinedRole;
			Description = description;

		}
		public static  IfcActorRole FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcActorRole>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactuator.htm"/>
	/// </summary>
	public  partial class IfcActuator : IfcDistributionControlElement
	{
		public IfcActuatorTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcActuator with all required attributes.
		/// </summary>
		public IfcActuator(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcActuator with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcActuator(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcActuatorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcActuator FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcActuator>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributioncontrolelement.htm"/>
	/// </summary>
	public  partial class IfcDistributionControlElement : IfcDistributionElement
	{
		/// <summary>
		/// Construct a IfcDistributionControlElement with all required attributes.
		/// </summary>
		public IfcDistributionControlElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDistributionControlElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDistributionControlElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcDistributionControlElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionControlElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactuatortype.htm"/>
	/// </summary>
	public  partial class IfcActuatorType : IfcDistributionControlElementType
	{
		public IfcActuatorTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcActuatorType with all required attributes.
		/// </summary>
		public IfcActuatorType(IfcGloballyUniqueId globalId,IfcActuatorTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcActuatorType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcActuatorType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcActuatorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcActuatorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcActuatorType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributioncontrolelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcDistributionControlElementType : IfcDistributionElementType
	{
		/// <summary>
		/// Construct a IfcDistributionControlElementType with all required attributes.
		/// </summary>
		public IfcDistributionControlElementType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDistributionControlElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDistributionControlElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcDistributionControlElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionControlElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaddress.htm"/>
	/// </summary>
	public abstract partial class IfcAddress : BaseIfc
	{
		public IfcAddressTypeEnum Purpose{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcLabel UserDefinedPurpose{get;set;} // optional

		/// <summary>
		/// Construct a IfcAddress with all required attributes.
		/// </summary>
		public IfcAddress():base()
		{

		}
		/// <summary>
		/// Construct a IfcAddress with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAddress(IfcAddressTypeEnum purpose,IfcText description,IfcLabel userDefinedPurpose):base()
		{
			Purpose = purpose;
			Description = description;
			UserDefinedPurpose = userDefinedPurpose;

		}
		public static  IfcAddress FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAddress>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpostaladdress.htm"/>
	/// </summary>
	public  partial class IfcPostalAddress : IfcAddress
	{
		public IfcLabel InternalLocation{get;set;} // optional
		public List<IfcLabel> AddressLines{get;set;} // optional
		public IfcLabel PostalBox{get;set;} // optional
		public IfcLabel Town{get;set;} // optional
		public IfcLabel Region{get;set;} // optional
		public IfcLabel PostalCode{get;set;} // optional
		public IfcLabel Country{get;set;} // optional

		/// <summary>
		/// Construct a IfcPostalAddress with all required attributes.
		/// </summary>
		public IfcPostalAddress():base()
		{

		}
		/// <summary>
		/// Construct a IfcPostalAddress with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPostalAddress(IfcAddressTypeEnum purpose,IfcText description,IfcLabel userDefinedPurpose,IfcLabel internalLocation,List<IfcLabel> addressLines,IfcLabel postalBox,IfcLabel town,IfcLabel region,IfcLabel postalCode,IfcLabel country):base(purpose,description,userDefinedPurpose)
		{
			InternalLocation = internalLocation;
			AddressLines = new List<IfcLabel>();
			PostalBox = postalBox;
			Town = town;
			Region = region;
			PostalCode = postalCode;
			Country = country;

		}
		public static new IfcPostalAddress FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPostalAddress>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctelecomaddress.htm"/>
	/// </summary>
	public  partial class IfcTelecomAddress : IfcAddress
	{
		public List<IfcLabel> TelephoneNumbers{get;set;} // optional
		public List<IfcLabel> FacsimileNumbers{get;set;} // optional
		public IfcLabel PagerNumber{get;set;} // optional
		public List<IfcLabel> ElectronicMailAddresses{get;set;} // optional
		public IfcURIReference WWWHomePageURL{get;set;} // optional
		public List<IfcURIReference> MessagingIDs{get;set;} // optional

		/// <summary>
		/// Construct a IfcTelecomAddress with all required attributes.
		/// </summary>
		public IfcTelecomAddress():base()
		{

		}
		/// <summary>
		/// Construct a IfcTelecomAddress with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTelecomAddress(IfcAddressTypeEnum purpose,IfcText description,IfcLabel userDefinedPurpose,List<IfcLabel> telephoneNumbers,List<IfcLabel> facsimileNumbers,IfcLabel pagerNumber,List<IfcLabel> electronicMailAddresses,IfcURIReference wWWHomePageURL,List<IfcURIReference> messagingIDs):base(purpose,description,userDefinedPurpose)
		{
			TelephoneNumbers = new List<IfcLabel>();
			FacsimileNumbers = new List<IfcLabel>();
			PagerNumber = pagerNumber;
			ElectronicMailAddresses = new List<IfcLabel>();
			WWWHomePageURL = wWWHomePageURL;
			MessagingIDs = new List<IfcURIReference>();

		}
		public static new IfcTelecomAddress FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTelecomAddress>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcadvancedbrep.htm"/>
	/// </summary>
	public  partial class IfcAdvancedBrep : IfcManifoldSolidBrep
	{
		/// <summary>
		/// Construct a IfcAdvancedBrep with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAdvancedBrep(IfcClosedShell outer):base(outer)
		{

		}
		public static new IfcAdvancedBrep FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAdvancedBrep>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcadvancedbrepwithvoids.htm"/>
	/// </summary>
	public  partial class IfcAdvancedBrepWithVoids : IfcAdvancedBrep
	{
		public List<IfcClosedShell> Voids{get;set;} 

		/// <summary>
		/// Construct a IfcAdvancedBrepWithVoids with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAdvancedBrepWithVoids(IfcClosedShell outer,List<IfcClosedShell> voids):base(outer)
		{
			Voids = voids;

		}
		public static new IfcAdvancedBrepWithVoids FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAdvancedBrepWithVoids>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmanifoldsolidbrep.htm"/>
	/// </summary>
	public abstract partial class IfcManifoldSolidBrep : IfcSolidModel
	{
		public IfcClosedShell Outer{get;set;} 

		/// <summary>
		/// Construct a IfcManifoldSolidBrep with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcManifoldSolidBrep(IfcClosedShell outer):base()
		{
			Outer = outer;

		}
		public static new IfcManifoldSolidBrep FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcManifoldSolidBrep>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcadvancedface.htm"/>
	/// </summary>
	public  partial class IfcAdvancedFace : IfcFaceSurface
	{
		/// <summary>
		/// Construct a IfcAdvancedFace with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAdvancedFace(List<IfcFaceBound> bounds,IfcSurface faceSurface,bool sameSense):base(bounds,faceSurface,sameSense)
		{

		}
		public static new IfcAdvancedFace FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAdvancedFace>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfacesurface.htm"/>
	/// </summary>
	public  partial class IfcFaceSurface : IfcFace
	{
		public IfcSurface FaceSurface{get;set;} 
		public bool SameSense{get;set;} 

		/// <summary>
		/// Construct a IfcFaceSurface with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFaceSurface(List<IfcFaceBound> bounds,IfcSurface faceSurface,bool sameSense):base(bounds)
		{
			FaceSurface = faceSurface;
			SameSense = sameSense;

		}
		public static new IfcFaceSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFaceSurface>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairterminal.htm"/>
	/// </summary>
	public  partial class IfcAirTerminal : IfcFlowTerminal
	{
		public IfcAirTerminalTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcAirTerminal with all required attributes.
		/// </summary>
		public IfcAirTerminal(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcAirTerminal with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAirTerminal(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcAirTerminalTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcAirTerminal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAirTerminal>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowterminal.htm"/>
	/// </summary>
	public  partial class IfcFlowTerminal : IfcDistributionFlowElement
	{
		/// <summary>
		/// Construct a IfcFlowTerminal with all required attributes.
		/// </summary>
		public IfcFlowTerminal(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowTerminal with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowTerminal(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcFlowTerminal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowTerminal>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairterminalbox.htm"/>
	/// </summary>
	public  partial class IfcAirTerminalBox : IfcFlowController
	{
		public IfcAirTerminalBoxTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcAirTerminalBox with all required attributes.
		/// </summary>
		public IfcAirTerminalBox(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcAirTerminalBox with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAirTerminalBox(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcAirTerminalBoxTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcAirTerminalBox FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAirTerminalBox>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowcontroller.htm"/>
	/// </summary>
	public  partial class IfcFlowController : IfcDistributionFlowElement
	{
		/// <summary>
		/// Construct a IfcFlowController with all required attributes.
		/// </summary>
		public IfcFlowController(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowController with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowController(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcFlowController FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowController>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairterminalboxtype.htm"/>
	/// </summary>
	public  partial class IfcAirTerminalBoxType : IfcFlowControllerType
	{
		public IfcAirTerminalBoxTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcAirTerminalBoxType with all required attributes.
		/// </summary>
		public IfcAirTerminalBoxType(IfcGloballyUniqueId globalId,IfcAirTerminalBoxTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcAirTerminalBoxType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAirTerminalBoxType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcAirTerminalBoxTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcAirTerminalBoxType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAirTerminalBoxType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowcontrollertype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowControllerType : IfcDistributionFlowElementType
	{
		/// <summary>
		/// Construct a IfcFlowControllerType with all required attributes.
		/// </summary>
		public IfcFlowControllerType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowControllerType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowControllerType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcFlowControllerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowControllerType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairterminaltype.htm"/>
	/// </summary>
	public  partial class IfcAirTerminalType : IfcFlowTerminalType
	{
		public IfcAirTerminalTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcAirTerminalType with all required attributes.
		/// </summary>
		public IfcAirTerminalType(IfcGloballyUniqueId globalId,IfcAirTerminalTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcAirTerminalType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAirTerminalType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcAirTerminalTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcAirTerminalType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAirTerminalType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowterminaltype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowTerminalType : IfcDistributionFlowElementType
	{
		/// <summary>
		/// Construct a IfcFlowTerminalType with all required attributes.
		/// </summary>
		public IfcFlowTerminalType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowTerminalType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowTerminalType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcFlowTerminalType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowTerminalType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairtoairheatrecovery.htm"/>
	/// </summary>
	public  partial class IfcAirToAirHeatRecovery : IfcEnergyConversionDevice
	{
		public IfcAirToAirHeatRecoveryTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcAirToAirHeatRecovery with all required attributes.
		/// </summary>
		public IfcAirToAirHeatRecovery(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcAirToAirHeatRecovery with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAirToAirHeatRecovery(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcAirToAirHeatRecoveryTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcAirToAirHeatRecovery FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAirToAirHeatRecovery>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcenergyconversiondevice.htm"/>
	/// </summary>
	public  partial class IfcEnergyConversionDevice : IfcDistributionFlowElement
	{
		/// <summary>
		/// Construct a IfcEnergyConversionDevice with all required attributes.
		/// </summary>
		public IfcEnergyConversionDevice(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcEnergyConversionDevice with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEnergyConversionDevice(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcEnergyConversionDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEnergyConversionDevice>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairtoairheatrecoverytype.htm"/>
	/// </summary>
	public  partial class IfcAirToAirHeatRecoveryType : IfcEnergyConversionDeviceType
	{
		public IfcAirToAirHeatRecoveryTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcAirToAirHeatRecoveryType with all required attributes.
		/// </summary>
		public IfcAirToAirHeatRecoveryType(IfcGloballyUniqueId globalId,IfcAirToAirHeatRecoveryTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcAirToAirHeatRecoveryType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAirToAirHeatRecoveryType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcAirToAirHeatRecoveryTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcAirToAirHeatRecoveryType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAirToAirHeatRecoveryType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcenergyconversiondevicetype.htm"/>
	/// </summary>
	public abstract partial class IfcEnergyConversionDeviceType : IfcDistributionFlowElementType
	{
		/// <summary>
		/// Construct a IfcEnergyConversionDeviceType with all required attributes.
		/// </summary>
		public IfcEnergyConversionDeviceType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcEnergyConversionDeviceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEnergyConversionDeviceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcEnergyConversionDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEnergyConversionDeviceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcalarm.htm"/>
	/// </summary>
	public  partial class IfcAlarm : IfcDistributionControlElement
	{
		public IfcAlarmTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcAlarm with all required attributes.
		/// </summary>
		public IfcAlarm(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcAlarm with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAlarm(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcAlarmTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcAlarm FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAlarm>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcalarmtype.htm"/>
	/// </summary>
	public  partial class IfcAlarmType : IfcDistributionControlElementType
	{
		public IfcAlarmTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcAlarmType with all required attributes.
		/// </summary>
		public IfcAlarmType(IfcGloballyUniqueId globalId,IfcAlarmTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcAlarmType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAlarmType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcAlarmTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcAlarmType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAlarmType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcannotation.htm"/>
	/// </summary>
	public  partial class IfcAnnotation : IfcProduct
	{
		/// <summary>
		/// Construct a IfcAnnotation with all required attributes.
		/// </summary>
		public IfcAnnotation(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcAnnotation with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAnnotation(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation)
		{

		}
		public static new IfcAnnotation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAnnotation>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproduct.htm"/>
	/// </summary>
	public abstract partial class IfcProduct : IfcObject
	{
		public IfcObjectPlacement ObjectPlacement{get;set;} // optional
		public IfcProductRepresentation Representation{get;set;} // optional

		/// <summary>
		/// Construct a IfcProduct with all required attributes.
		/// </summary>
		public IfcProduct(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcProduct with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProduct(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation):base(globalId,ownerHistory,name,description,objectType)
		{
			ObjectPlacement = objectPlacement;
			Representation = representation;

		}
		public static new IfcProduct FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProduct>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcannotationfillarea.htm"/>
	/// </summary>
	public  partial class IfcAnnotationFillArea : IfcGeometricRepresentationItem
	{
		public IfcCurve OuterBoundary{get;set;} 
		public List<IfcCurve> InnerBoundaries{get;set;} // optional

		/// <summary>
		/// Construct a IfcAnnotationFillArea with all required attributes.
		/// </summary>
		public IfcAnnotationFillArea(IfcCurve outerBoundary):base()
		{
			OuterBoundary = outerBoundary;

		}
		/// <summary>
		/// Construct a IfcAnnotationFillArea with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAnnotationFillArea(IfcCurve outerBoundary,List<IfcCurve> innerBoundaries):base()
		{
			OuterBoundary = outerBoundary;
			InnerBoundaries = new List<IfcCurve>();

		}
		public static new IfcAnnotationFillArea FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAnnotationFillArea>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometricrepresentationitem.htm"/>
	/// </summary>
	public abstract partial class IfcGeometricRepresentationItem : IfcRepresentationItem
	{
		/// <summary>
		/// Construct a IfcGeometricRepresentationItem with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcGeometricRepresentationItem():base()
		{

		}
		public static new IfcGeometricRepresentationItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeometricRepresentationItem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcapplication.htm"/>
	/// </summary>
	public  partial class IfcApplication : BaseIfc
	{
		public IfcOrganization ApplicationDeveloper{get;set;} 
		public IfcLabel Version{get;set;} 
		public IfcLabel ApplicationFullName{get;set;} 
		public IfcIdentifier ApplicationIdentifier{get;set;} 

		/// <summary>
		/// Construct a IfcApplication with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcApplication(IfcOrganization applicationDeveloper,IfcLabel version,IfcLabel applicationFullName,IfcIdentifier applicationIdentifier):base()
		{
			ApplicationDeveloper = applicationDeveloper;
			Version = version;
			ApplicationFullName = applicationFullName;
			ApplicationIdentifier = applicationIdentifier;

		}
		public static  IfcApplication FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcApplication>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcappliedvalue.htm"/>
	/// </summary>
	public  partial class IfcAppliedValue : BaseIfc
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcAppliedValueSelect AppliedValue{get;set;} // optional
		public IfcMeasureWithUnit UnitBasis{get;set;} // optional
		public IfcDate ApplicableDate{get;set;} // optional
		public IfcDate FixedUntilDate{get;set;} // optional
		public IfcLabel Category{get;set;} // optional
		public IfcLabel Condition{get;set;} // optional
		public IfcArithmeticOperatorEnum ArithmeticOperator{get;set;} // optional
		public List<IfcAppliedValue> Components{get;set;} // optional

		/// <summary>
		/// Construct a IfcAppliedValue with all required attributes.
		/// </summary>
		public IfcAppliedValue():base()
		{

		}
		/// <summary>
		/// Construct a IfcAppliedValue with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAppliedValue(IfcLabel name,IfcText description,IfcAppliedValueSelect appliedValue,IfcMeasureWithUnit unitBasis,IfcDate applicableDate,IfcDate fixedUntilDate,IfcLabel category,IfcLabel condition,IfcArithmeticOperatorEnum arithmeticOperator,List<IfcAppliedValue> components):base()
		{
			Name = name;
			Description = description;
			AppliedValue = appliedValue;
			UnitBasis = unitBasis;
			ApplicableDate = applicableDate;
			FixedUntilDate = fixedUntilDate;
			Category = category;
			Condition = condition;
			ArithmeticOperator = arithmeticOperator;
			Components = new List<IfcAppliedValue>();

		}
		public static  IfcAppliedValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAppliedValue>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccostvalue.htm"/>
	/// </summary>
	public  partial class IfcCostValue : IfcAppliedValue
	{
		/// <summary>
		/// Construct a IfcCostValue with all required attributes.
		/// </summary>
		public IfcCostValue():base()
		{

		}
		/// <summary>
		/// Construct a IfcCostValue with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCostValue(IfcLabel name,IfcText description,IfcAppliedValueSelect appliedValue,IfcMeasureWithUnit unitBasis,IfcDate applicableDate,IfcDate fixedUntilDate,IfcLabel category,IfcLabel condition,IfcArithmeticOperatorEnum arithmeticOperator,List<IfcAppliedValue> components):base(name,description,appliedValue,unitBasis,applicableDate,fixedUntilDate,category,condition,arithmeticOperator,components)
		{

		}
		public static new IfcCostValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCostValue>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcapproval.htm"/>
	/// </summary>
	public  partial class IfcApproval : BaseIfc
	{
		public IfcIdentifier Identifier{get;set;} // optional
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcDateTime TimeOfApproval{get;set;} // optional
		public IfcLabel Status{get;set;} // optional
		public IfcLabel Level{get;set;} // optional
		public IfcText Qualifier{get;set;} // optional
		public IfcActorSelect RequestingApproval{get;set;} // optional
		public IfcActorSelect GivingApproval{get;set;} // optional

		/// <summary>
		/// Construct a IfcApproval with all required attributes.
		/// </summary>
		public IfcApproval():base()
		{

		}
		/// <summary>
		/// Construct a IfcApproval with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcApproval(IfcIdentifier identifier,IfcLabel name,IfcText description,IfcDateTime timeOfApproval,IfcLabel status,IfcLabel level,IfcText qualifier,IfcActorSelect requestingApproval,IfcActorSelect givingApproval):base()
		{
			Identifier = identifier;
			Name = name;
			Description = description;
			TimeOfApproval = timeOfApproval;
			Status = status;
			Level = level;
			Qualifier = qualifier;
			RequestingApproval = requestingApproval;
			GivingApproval = givingApproval;

		}
		public static  IfcApproval FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcApproval>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcapprovalrelationship.htm"/>
	/// </summary>
	public  partial class IfcApprovalRelationship : IfcResourceLevelRelationship
	{
		public IfcApproval RelatingApproval{get;set;} 
		public List<IfcApproval> RelatedApprovals{get;set;} 

		/// <summary>
		/// Construct a IfcApprovalRelationship with all required attributes.
		/// </summary>
		public IfcApprovalRelationship(IfcApproval relatingApproval,List<IfcApproval> relatedApprovals):base()
		{
			RelatingApproval = relatingApproval;
			RelatedApprovals = relatedApprovals;

		}
		/// <summary>
		/// Construct a IfcApprovalRelationship with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcApprovalRelationship(IfcLabel name,IfcText description,IfcApproval relatingApproval,List<IfcApproval> relatedApprovals):base(name,description)
		{
			RelatingApproval = relatingApproval;
			RelatedApprovals = relatedApprovals;

		}
		public static new IfcApprovalRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcApprovalRelationship>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresourcelevelrelationship.htm"/>
	/// </summary>
	public abstract partial class IfcResourceLevelRelationship : BaseIfc
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional

		/// <summary>
		/// Construct a IfcResourceLevelRelationship with all required attributes.
		/// </summary>
		public IfcResourceLevelRelationship():base()
		{

		}
		/// <summary>
		/// Construct a IfcResourceLevelRelationship with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcResourceLevelRelationship(IfcLabel name,IfcText description):base()
		{
			Name = name;
			Description = description;

		}
		public static  IfcResourceLevelRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResourceLevelRelationship>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcarbitraryclosedprofiledef.htm"/>
	/// </summary>
	public  partial class IfcArbitraryClosedProfileDef : IfcProfileDef
	{
		public IfcCurve OuterCurve{get;set;} 

		/// <summary>
		/// Construct a IfcArbitraryClosedProfileDef with all required attributes.
		/// </summary>
		public IfcArbitraryClosedProfileDef(IfcProfileTypeEnum profileType,IfcCurve outerCurve):base(profileType)
		{
			OuterCurve = outerCurve;

		}
		/// <summary>
		/// Construct a IfcArbitraryClosedProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcArbitraryClosedProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcCurve outerCurve):base(profileType,profileName)
		{
			OuterCurve = outerCurve;

		}
		public static new IfcArbitraryClosedProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcArbitraryClosedProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcarbitraryprofiledefwithvoids.htm"/>
	/// </summary>
	public  partial class IfcArbitraryProfileDefWithVoids : IfcArbitraryClosedProfileDef
	{
		public List<IfcCurve> InnerCurves{get;set;} 

		/// <summary>
		/// Construct a IfcArbitraryProfileDefWithVoids with all required attributes.
		/// </summary>
		public IfcArbitraryProfileDefWithVoids(IfcProfileTypeEnum profileType,IfcCurve outerCurve,List<IfcCurve> innerCurves):base(profileType,outerCurve)
		{
			InnerCurves = innerCurves;

		}
		/// <summary>
		/// Construct a IfcArbitraryProfileDefWithVoids with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcArbitraryProfileDefWithVoids(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcCurve outerCurve,List<IfcCurve> innerCurves):base(profileType,profileName,outerCurve)
		{
			InnerCurves = innerCurves;

		}
		public static new IfcArbitraryProfileDefWithVoids FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcArbitraryProfileDefWithVoids>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprofiledef.htm"/>
	/// </summary>
	public  partial class IfcProfileDef : BaseIfc
	{
		public IfcProfileTypeEnum ProfileType{get;set;} 
		public IfcLabel ProfileName{get;set;} // optional

		/// <summary>
		/// Construct a IfcProfileDef with all required attributes.
		/// </summary>
		public IfcProfileDef(IfcProfileTypeEnum profileType):base()
		{
			ProfileType = profileType;

		}
		/// <summary>
		/// Construct a IfcProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName):base()
		{
			ProfileType = profileType;
			ProfileName = profileName;

		}
		public static  IfcProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcarbitraryopenprofiledef.htm"/>
	/// </summary>
	public  partial class IfcArbitraryOpenProfileDef : IfcProfileDef
	{
		public IfcBoundedCurve Curve{get;set;} 

		/// <summary>
		/// Construct a IfcArbitraryOpenProfileDef with all required attributes.
		/// </summary>
		public IfcArbitraryOpenProfileDef(IfcProfileTypeEnum profileType,IfcBoundedCurve curve):base(profileType)
		{
			Curve = curve;

		}
		/// <summary>
		/// Construct a IfcArbitraryOpenProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcArbitraryOpenProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcBoundedCurve curve):base(profileType,profileName)
		{
			Curve = curve;

		}
		public static new IfcArbitraryOpenProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcArbitraryOpenProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccenterlineprofiledef.htm"/>
	/// </summary>
	public  partial class IfcCenterLineProfileDef : IfcArbitraryOpenProfileDef
	{
		public IfcPositiveLengthMeasure Thickness{get;set;} 

		/// <summary>
		/// Construct a IfcCenterLineProfileDef with all required attributes.
		/// </summary>
		public IfcCenterLineProfileDef(IfcProfileTypeEnum profileType,IfcBoundedCurve curve,IfcPositiveLengthMeasure thickness):base(profileType,curve)
		{
			Thickness = thickness;

		}
		/// <summary>
		/// Construct a IfcCenterLineProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCenterLineProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcBoundedCurve curve,IfcPositiveLengthMeasure thickness):base(profileType,profileName,curve)
		{
			Thickness = thickness;

		}
		public static new IfcCenterLineProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCenterLineProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcasset.htm"/>
	/// </summary>
	public  partial class IfcAsset : IfcGroup
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcCostValue OriginalValue{get;set;} // optional
		public IfcCostValue CurrentValue{get;set;} // optional
		public IfcCostValue TotalReplacementCost{get;set;} // optional
		public IfcActorSelect Owner{get;set;} // optional
		public IfcActorSelect User{get;set;} // optional
		public IfcPerson ResponsiblePerson{get;set;} // optional
		public IfcDate IncorporationDate{get;set;} // optional
		public IfcCostValue DepreciatedValue{get;set;} // optional

		/// <summary>
		/// Construct a IfcAsset with all required attributes.
		/// </summary>
		public IfcAsset(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcAsset with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAsset(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcCostValue originalValue,IfcCostValue currentValue,IfcCostValue totalReplacementCost,IfcActorSelect owner,IfcActorSelect user,IfcPerson responsiblePerson,IfcDate incorporationDate,IfcCostValue depreciatedValue):base(globalId,ownerHistory,name,description,objectType)
		{
			Identification = identification;
			OriginalValue = originalValue;
			CurrentValue = currentValue;
			TotalReplacementCost = totalReplacementCost;
			Owner = owner;
			User = user;
			ResponsiblePerson = responsiblePerson;
			IncorporationDate = incorporationDate;
			DepreciatedValue = depreciatedValue;

		}
		public static new IfcAsset FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAsset>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgroup.htm"/>
	/// </summary>
	public  partial class IfcGroup : IfcObject
	{
		/// <summary>
		/// Construct a IfcGroup with all required attributes.
		/// </summary>
		public IfcGroup(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcGroup with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcGroup(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType):base(globalId,ownerHistory,name,description,objectType)
		{

		}
		public static new IfcGroup FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGroup>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcasymmetricishapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcAsymmetricIShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure BottomFlangeWidth{get;set;} 
		public IfcPositiveLengthMeasure OverallDepth{get;set;} 
		public IfcPositiveLengthMeasure WebThickness{get;set;} 
		public IfcPositiveLengthMeasure BottomFlangeThickness{get;set;} 
		public IfcNonNegativeLengthMeasure BottomFlangeFilletRadius{get;set;} // optional
		public IfcPositiveLengthMeasure TopFlangeWidth{get;set;} 
		public IfcPositiveLengthMeasure TopFlangeThickness{get;set;} // optional
		public IfcNonNegativeLengthMeasure TopFlangeFilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure BottomFlangeEdgeRadius{get;set;} // optional
		public IfcPlaneAngleMeasure BottomFlangeSlope{get;set;} // optional
		public IfcNonNegativeLengthMeasure TopFlangeEdgeRadius{get;set;} // optional
		public IfcPlaneAngleMeasure TopFlangeSlope{get;set;} // optional

		/// <summary>
		/// Construct a IfcAsymmetricIShapeProfileDef with all required attributes.
		/// </summary>
		public IfcAsymmetricIShapeProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure bottomFlangeWidth,IfcPositiveLengthMeasure overallDepth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure bottomFlangeThickness,IfcPositiveLengthMeasure topFlangeWidth):base(profileType)
		{
			BottomFlangeWidth = bottomFlangeWidth;
			OverallDepth = overallDepth;
			WebThickness = webThickness;
			BottomFlangeThickness = bottomFlangeThickness;
			TopFlangeWidth = topFlangeWidth;

		}
		/// <summary>
		/// Construct a IfcAsymmetricIShapeProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAsymmetricIShapeProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure bottomFlangeWidth,IfcPositiveLengthMeasure overallDepth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure bottomFlangeThickness,IfcNonNegativeLengthMeasure bottomFlangeFilletRadius,IfcPositiveLengthMeasure topFlangeWidth,IfcPositiveLengthMeasure topFlangeThickness,IfcNonNegativeLengthMeasure topFlangeFilletRadius,IfcNonNegativeLengthMeasure bottomFlangeEdgeRadius,IfcPlaneAngleMeasure bottomFlangeSlope,IfcNonNegativeLengthMeasure topFlangeEdgeRadius,IfcPlaneAngleMeasure topFlangeSlope):base(profileType,profileName,position)
		{
			BottomFlangeWidth = bottomFlangeWidth;
			OverallDepth = overallDepth;
			WebThickness = webThickness;
			BottomFlangeThickness = bottomFlangeThickness;
			BottomFlangeFilletRadius = bottomFlangeFilletRadius;
			TopFlangeWidth = topFlangeWidth;
			TopFlangeThickness = topFlangeThickness;
			TopFlangeFilletRadius = topFlangeFilletRadius;
			BottomFlangeEdgeRadius = bottomFlangeEdgeRadius;
			BottomFlangeSlope = bottomFlangeSlope;
			TopFlangeEdgeRadius = topFlangeEdgeRadius;
			TopFlangeSlope = topFlangeSlope;

		}
		public static new IfcAsymmetricIShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAsymmetricIShapeProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcparameterizedprofiledef.htm"/>
	/// </summary>
	public abstract partial class IfcParameterizedProfileDef : IfcProfileDef
	{
		public IfcAxis2Placement2D Position{get;set;} // optional

		/// <summary>
		/// Construct a IfcParameterizedProfileDef with all required attributes.
		/// </summary>
		public IfcParameterizedProfileDef(IfcProfileTypeEnum profileType):base(profileType)
		{

		}
		/// <summary>
		/// Construct a IfcParameterizedProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcParameterizedProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position):base(profileType,profileName)
		{
			Position = position;

		}
		public static new IfcParameterizedProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcParameterizedProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaudiovisualappliance.htm"/>
	/// </summary>
	public  partial class IfcAudioVisualAppliance : IfcFlowTerminal
	{
		public IfcAudioVisualApplianceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcAudioVisualAppliance with all required attributes.
		/// </summary>
		public IfcAudioVisualAppliance(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcAudioVisualAppliance with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAudioVisualAppliance(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcAudioVisualApplianceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcAudioVisualAppliance FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAudioVisualAppliance>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaudiovisualappliancetype.htm"/>
	/// </summary>
	public  partial class IfcAudioVisualApplianceType : IfcFlowTerminalType
	{
		public IfcAudioVisualApplianceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcAudioVisualApplianceType with all required attributes.
		/// </summary>
		public IfcAudioVisualApplianceType(IfcGloballyUniqueId globalId,IfcAudioVisualApplianceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcAudioVisualApplianceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAudioVisualApplianceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcAudioVisualApplianceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcAudioVisualApplianceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAudioVisualApplianceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaxis1placement.htm"/>
	/// </summary>
	public  partial class IfcAxis1Placement : IfcPlacement
	{
		public IfcDirection Axis{get;set;} // optional

		/// <summary>
		/// Construct a IfcAxis1Placement with all required attributes.
		/// </summary>
		public IfcAxis1Placement(IfcCartesianPoint location):base(location)
		{

		}
		/// <summary>
		/// Construct a IfcAxis1Placement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAxis1Placement(IfcCartesianPoint location,IfcDirection axis):base(location)
		{
			Axis = axis;

		}
		public static new IfcAxis1Placement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAxis1Placement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplacement.htm"/>
	/// </summary>
	public abstract partial class IfcPlacement : IfcGeometricRepresentationItem
	{
		public IfcCartesianPoint Location{get;set;} 

		/// <summary>
		/// Construct a IfcPlacement with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPlacement(IfcCartesianPoint location):base()
		{
			Location = location;

		}
		public static new IfcPlacement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlacement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaxis2placement2d.htm"/>
	/// </summary>
	public  partial class IfcAxis2Placement2D : IfcPlacement
	{
		public IfcDirection RefDirection{get;set;} // optional

		/// <summary>
		/// Construct a IfcAxis2Placement2D with all required attributes.
		/// </summary>
		public IfcAxis2Placement2D(IfcCartesianPoint location):base(location)
		{

		}
		/// <summary>
		/// Construct a IfcAxis2Placement2D with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAxis2Placement2D(IfcCartesianPoint location,IfcDirection refDirection):base(location)
		{
			RefDirection = refDirection;

		}
		public static new IfcAxis2Placement2D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAxis2Placement2D>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaxis2placement3d.htm"/>
	/// </summary>
	public  partial class IfcAxis2Placement3D : IfcPlacement
	{
		public IfcDirection Axis{get;set;} // optional
		public IfcDirection RefDirection{get;set;} // optional

		/// <summary>
		/// Construct a IfcAxis2Placement3D with all required attributes.
		/// </summary>
		public IfcAxis2Placement3D(IfcCartesianPoint location):base(location)
		{

		}
		/// <summary>
		/// Construct a IfcAxis2Placement3D with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcAxis2Placement3D(IfcCartesianPoint location,IfcDirection axis,IfcDirection refDirection):base(location)
		{
			Axis = axis;
			RefDirection = refDirection;

		}
		public static new IfcAxis2Placement3D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAxis2Placement3D>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbsplinecurve.htm"/>
	/// </summary>
	public abstract partial class IfcBSplineCurve : IfcBoundedCurve
	{
		public int Degree{get;set;} 
		public List<IfcCartesianPoint> ControlPointsList{get;set;} 
		public IfcBSplineCurveForm CurveForm{get;set;} 
		public bool? ClosedCurve{get;set;} 
		public bool? SelfIntersect{get;set;} 

		/// <summary>
		/// Construct a IfcBSplineCurve with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBSplineCurve(int degree,List<IfcCartesianPoint> controlPointsList,IfcBSplineCurveForm curveForm,bool? closedCurve,bool? selfIntersect):base()
		{
			Degree = degree;
			ControlPointsList = controlPointsList;
			CurveForm = curveForm;
			ClosedCurve = closedCurve;
			SelfIntersect = selfIntersect;

		}
		public static new IfcBSplineCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBSplineCurve>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbsplinecurvewithknots.htm"/>
	/// </summary>
	public  partial class IfcBSplineCurveWithKnots : IfcBSplineCurve
	{
		public List<int> KnotMultiplicities{get;set;} 
		public List<IfcParameterValue> Knots{get;set;} 
		public IfcKnotType KnotSpec{get;set;} 

		/// <summary>
		/// Construct a IfcBSplineCurveWithKnots with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBSplineCurveWithKnots(int degree,List<IfcCartesianPoint> controlPointsList,IfcBSplineCurveForm curveForm,bool? closedCurve,bool? selfIntersect,List<int> knotMultiplicities,List<IfcParameterValue> knots,IfcKnotType knotSpec):base(degree,controlPointsList,curveForm,closedCurve,selfIntersect)
		{
			KnotMultiplicities = knotMultiplicities;
			Knots = knots;
			KnotSpec = knotSpec;

		}
		public static new IfcBSplineCurveWithKnots FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBSplineCurveWithKnots>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundedcurve.htm"/>
	/// </summary>
	public abstract partial class IfcBoundedCurve : IfcCurve
	{
		/// <summary>
		/// Construct a IfcBoundedCurve with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBoundedCurve():base()
		{

		}
		public static new IfcBoundedCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundedCurve>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrationalbsplinecurvewithknots.htm"/>
	/// </summary>
	public  partial class IfcRationalBSplineCurveWithKnots : IfcBSplineCurveWithKnots
	{
		public List<double> WeightsData{get;set;} 

		/// <summary>
		/// Construct a IfcRationalBSplineCurveWithKnots with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRationalBSplineCurveWithKnots(int degree,List<IfcCartesianPoint> controlPointsList,IfcBSplineCurveForm curveForm,bool? closedCurve,bool? selfIntersect,List<int> knotMultiplicities,List<IfcParameterValue> knots,IfcKnotType knotSpec,List<double> weightsData):base(degree,controlPointsList,curveForm,closedCurve,selfIntersect,knotMultiplicities,knots,knotSpec)
		{
			WeightsData = weightsData;

		}
		public static new IfcRationalBSplineCurveWithKnots FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRationalBSplineCurveWithKnots>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbsplinesurface.htm"/>
	/// </summary>
	public abstract partial class IfcBSplineSurface : IfcBoundedSurface
	{
		public int UDegree{get;set;} 
		public int VDegree{get;set;} 
		public List<List<IfcCartesianPoint>> ControlPointsList{get;set;} 
		public IfcBSplineSurfaceForm SurfaceForm{get;set;} 
		public bool? UClosed{get;set;} 
		public bool? VClosed{get;set;} 
		public bool? SelfIntersect{get;set;} 

		/// <summary>
		/// Construct a IfcBSplineSurface with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBSplineSurface(int uDegree,int vDegree,List<List<IfcCartesianPoint>> controlPointsList,IfcBSplineSurfaceForm surfaceForm,bool? uClosed,bool? vClosed,bool? selfIntersect):base()
		{
			UDegree = uDegree;
			VDegree = vDegree;
			ControlPointsList = controlPointsList;
			SurfaceForm = surfaceForm;
			UClosed = uClosed;
			VClosed = vClosed;
			SelfIntersect = selfIntersect;

		}
		public static new IfcBSplineSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBSplineSurface>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbsplinesurfacewithknots.htm"/>
	/// </summary>
	public  partial class IfcBSplineSurfaceWithKnots : IfcBSplineSurface
	{
		public List<int> UMultiplicities{get;set;} 
		public List<int> VMultiplicities{get;set;} 
		public List<IfcParameterValue> UKnots{get;set;} 
		public List<IfcParameterValue> VKnots{get;set;} 
		public IfcKnotType KnotSpec{get;set;} 

		/// <summary>
		/// Construct a IfcBSplineSurfaceWithKnots with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBSplineSurfaceWithKnots(int uDegree,int vDegree,List<List<IfcCartesianPoint>> controlPointsList,IfcBSplineSurfaceForm surfaceForm,bool? uClosed,bool? vClosed,bool? selfIntersect,List<int> uMultiplicities,List<int> vMultiplicities,List<IfcParameterValue> uKnots,List<IfcParameterValue> vKnots,IfcKnotType knotSpec):base(uDegree,vDegree,controlPointsList,surfaceForm,uClosed,vClosed,selfIntersect)
		{
			UMultiplicities = uMultiplicities;
			VMultiplicities = vMultiplicities;
			UKnots = uKnots;
			VKnots = vKnots;
			KnotSpec = knotSpec;

		}
		public static new IfcBSplineSurfaceWithKnots FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBSplineSurfaceWithKnots>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundedsurface.htm"/>
	/// </summary>
	public abstract partial class IfcBoundedSurface : IfcSurface
	{
		/// <summary>
		/// Construct a IfcBoundedSurface with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBoundedSurface():base()
		{

		}
		public static new IfcBoundedSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundedSurface>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrationalbsplinesurfacewithknots.htm"/>
	/// </summary>
	public  partial class IfcRationalBSplineSurfaceWithKnots : IfcBSplineSurfaceWithKnots
	{
		public List<List<double>> WeightsData{get;set;} 

		/// <summary>
		/// Construct a IfcRationalBSplineSurfaceWithKnots with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRationalBSplineSurfaceWithKnots(int uDegree,int vDegree,List<List<IfcCartesianPoint>> controlPointsList,IfcBSplineSurfaceForm surfaceForm,bool? uClosed,bool? vClosed,bool? selfIntersect,List<int> uMultiplicities,List<int> vMultiplicities,List<IfcParameterValue> uKnots,List<IfcParameterValue> vKnots,IfcKnotType knotSpec,List<List<double>> weightsData):base(uDegree,vDegree,controlPointsList,surfaceForm,uClosed,vClosed,selfIntersect,uMultiplicities,vMultiplicities,uKnots,vKnots,knotSpec)
		{
			WeightsData = weightsData;

		}
		public static new IfcRationalBSplineSurfaceWithKnots FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRationalBSplineSurfaceWithKnots>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbeam.htm"/>
	/// </summary>
	public  partial class IfcBeam : IfcBuildingElement
	{
		public IfcBeamTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcBeam with all required attributes.
		/// </summary>
		public IfcBeam(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcBeam with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBeam(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcBeamTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcBeam FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBeam>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbeamstandardcase.htm"/>
	/// </summary>
	public  partial class IfcBeamStandardCase : IfcBeam
	{
		/// <summary>
		/// Construct a IfcBeamStandardCase with all required attributes.
		/// </summary>
		public IfcBeamStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcBeamStandardCase with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBeamStandardCase(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcBeamTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,predefinedType)
		{

		}
		public static new IfcBeamStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBeamStandardCase>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelement.htm"/>
	/// </summary>
	public abstract partial class IfcBuildingElement : IfcElement
	{
		/// <summary>
		/// Construct a IfcBuildingElement with all required attributes.
		/// </summary>
		public IfcBuildingElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcBuildingElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBuildingElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcBuildingElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbeamtype.htm"/>
	/// </summary>
	public  partial class IfcBeamType : IfcBuildingElementType
	{
		public IfcBeamTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcBeamType with all required attributes.
		/// </summary>
		public IfcBeamType(IfcGloballyUniqueId globalId,IfcBeamTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcBeamType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBeamType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcBeamTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcBeamType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBeamType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcBuildingElementType : IfcElementType
	{
		/// <summary>
		/// Construct a IfcBuildingElementType with all required attributes.
		/// </summary>
		public IfcBuildingElementType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcBuildingElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBuildingElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcBuildingElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcblobtexture.htm"/>
	/// </summary>
	public  partial class IfcBlobTexture : IfcSurfaceTexture
	{
		public IfcIdentifier RasterFormat{get;set;} 
		public byte[] RasterCode{get;set;} 

		/// <summary>
		/// Construct a IfcBlobTexture with all required attributes.
		/// </summary>
		public IfcBlobTexture(bool repeatS,bool repeatT,IfcIdentifier rasterFormat,byte[] rasterCode):base(repeatS,repeatT)
		{
			RasterFormat = rasterFormat;
			RasterCode = rasterCode;

		}
		/// <summary>
		/// Construct a IfcBlobTexture with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBlobTexture(bool repeatS,bool repeatT,IfcIdentifier mode,IfcCartesianTransformationOperator2D textureTransform,List<IfcIdentifier> parameter,IfcIdentifier rasterFormat,byte[] rasterCode):base(repeatS,repeatT,mode,textureTransform,parameter)
		{
			RasterFormat = rasterFormat;
			RasterCode = rasterCode;

		}
		public static new IfcBlobTexture FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBlobTexture>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacetexture.htm"/>
	/// </summary>
	public abstract partial class IfcSurfaceTexture : IfcPresentationItem
	{
		public bool RepeatS{get;set;} 
		public bool RepeatT{get;set;} 
		public IfcIdentifier Mode{get;set;} // optional
		public IfcCartesianTransformationOperator2D TextureTransform{get;set;} // optional
		public List<IfcIdentifier> Parameter{get;set;} // optional

		/// <summary>
		/// Construct a IfcSurfaceTexture with all required attributes.
		/// </summary>
		public IfcSurfaceTexture(bool repeatS,bool repeatT):base()
		{
			RepeatS = repeatS;
			RepeatT = repeatT;

		}
		/// <summary>
		/// Construct a IfcSurfaceTexture with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSurfaceTexture(bool repeatS,bool repeatT,IfcIdentifier mode,IfcCartesianTransformationOperator2D textureTransform,List<IfcIdentifier> parameter):base()
		{
			RepeatS = repeatS;
			RepeatT = repeatT;
			Mode = mode;
			TextureTransform = textureTransform;
			Parameter = new List<IfcIdentifier>();

		}
		public static new IfcSurfaceTexture FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceTexture>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcblock.htm"/>
	/// </summary>
	public  partial class IfcBlock : IfcCsgPrimitive3D
	{
		public IfcPositiveLengthMeasure XLength{get;set;} 
		public IfcPositiveLengthMeasure YLength{get;set;} 
		public IfcPositiveLengthMeasure ZLength{get;set;} 

		/// <summary>
		/// Construct a IfcBlock with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBlock(IfcAxis2Placement3D position,IfcPositiveLengthMeasure xLength,IfcPositiveLengthMeasure yLength,IfcPositiveLengthMeasure zLength):base(position)
		{
			XLength = xLength;
			YLength = yLength;
			ZLength = zLength;

		}
		public static new IfcBlock FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBlock>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccsgprimitive3d.htm"/>
	/// </summary>
	public abstract partial class IfcCsgPrimitive3D : IfcGeometricRepresentationItem
	{
		public IfcAxis2Placement3D Position{get;set;} 

		/// <summary>
		/// Construct a IfcCsgPrimitive3D with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCsgPrimitive3D(IfcAxis2Placement3D position):base()
		{
			Position = position;

		}
		public static new IfcCsgPrimitive3D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCsgPrimitive3D>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboiler.htm"/>
	/// </summary>
	public  partial class IfcBoiler : IfcEnergyConversionDevice
	{
		public IfcBoilerTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcBoiler with all required attributes.
		/// </summary>
		public IfcBoiler(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcBoiler with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBoiler(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcBoilerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcBoiler FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoiler>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboilertype.htm"/>
	/// </summary>
	public  partial class IfcBoilerType : IfcEnergyConversionDeviceType
	{
		public IfcBoilerTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcBoilerType with all required attributes.
		/// </summary>
		public IfcBoilerType(IfcGloballyUniqueId globalId,IfcBoilerTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcBoilerType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBoilerType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcBoilerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcBoilerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoilerType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbooleanclippingresult.htm"/>
	/// </summary>
	public  partial class IfcBooleanClippingResult : IfcBooleanResult
	{
		/// <summary>
		/// Construct a IfcBooleanClippingResult with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBooleanClippingResult(IfcBooleanOperator op,IfcBooleanOperand firstOperand,IfcBooleanOperand secondOperand):base(op,firstOperand,secondOperand)
		{

		}
		public static new IfcBooleanClippingResult FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBooleanClippingResult>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbooleanresult.htm"/>
	/// </summary>
	public  partial class IfcBooleanResult : IfcGeometricRepresentationItem
	{
		public IfcBooleanOperator Operator{get;set;} 
		public IfcBooleanOperand FirstOperand{get;set;} 
		public IfcBooleanOperand SecondOperand{get;set;} 

		/// <summary>
		/// Construct a IfcBooleanResult with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBooleanResult(IfcBooleanOperator op,IfcBooleanOperand firstOperand,IfcBooleanOperand secondOperand):base()
		{
			Operator = op;
			FirstOperand = firstOperand;
			SecondOperand = secondOperand;

		}
		public static new IfcBooleanResult FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBooleanResult>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundarycondition.htm"/>
	/// </summary>
	public abstract partial class IfcBoundaryCondition : BaseIfc
	{
		public IfcLabel Name{get;set;} // optional

		/// <summary>
		/// Construct a IfcBoundaryCondition with all required attributes.
		/// </summary>
		public IfcBoundaryCondition():base()
		{

		}
		/// <summary>
		/// Construct a IfcBoundaryCondition with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBoundaryCondition(IfcLabel name):base()
		{
			Name = name;

		}
		public static  IfcBoundaryCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundaryCondition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundaryedgecondition.htm"/>
	/// </summary>
	public  partial class IfcBoundaryEdgeCondition : IfcBoundaryCondition
	{
		public IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthX{get;set;} // optional
		public IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthY{get;set;} // optional
		public IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthZ{get;set;} // optional
		public IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthX{get;set;} // optional
		public IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthY{get;set;} // optional
		public IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthZ{get;set;} // optional

		/// <summary>
		/// Construct a IfcBoundaryEdgeCondition with all required attributes.
		/// </summary>
		public IfcBoundaryEdgeCondition():base()
		{

		}
		/// <summary>
		/// Construct a IfcBoundaryEdgeCondition with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBoundaryEdgeCondition(IfcLabel name,IfcModulusOfTranslationalSubgradeReactionSelect translationalStiffnessByLengthX,IfcModulusOfTranslationalSubgradeReactionSelect translationalStiffnessByLengthY,IfcModulusOfTranslationalSubgradeReactionSelect translationalStiffnessByLengthZ,IfcModulusOfRotationalSubgradeReactionSelect rotationalStiffnessByLengthX,IfcModulusOfRotationalSubgradeReactionSelect rotationalStiffnessByLengthY,IfcModulusOfRotationalSubgradeReactionSelect rotationalStiffnessByLengthZ):base(name)
		{
			TranslationalStiffnessByLengthX = translationalStiffnessByLengthX;
			TranslationalStiffnessByLengthY = translationalStiffnessByLengthY;
			TranslationalStiffnessByLengthZ = translationalStiffnessByLengthZ;
			RotationalStiffnessByLengthX = rotationalStiffnessByLengthX;
			RotationalStiffnessByLengthY = rotationalStiffnessByLengthY;
			RotationalStiffnessByLengthZ = rotationalStiffnessByLengthZ;

		}
		public static new IfcBoundaryEdgeCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundaryEdgeCondition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundaryfacecondition.htm"/>
	/// </summary>
	public  partial class IfcBoundaryFaceCondition : IfcBoundaryCondition
	{
		public IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaX{get;set;} // optional
		public IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaY{get;set;} // optional
		public IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaZ{get;set;} // optional

		/// <summary>
		/// Construct a IfcBoundaryFaceCondition with all required attributes.
		/// </summary>
		public IfcBoundaryFaceCondition():base()
		{

		}
		/// <summary>
		/// Construct a IfcBoundaryFaceCondition with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBoundaryFaceCondition(IfcLabel name,IfcModulusOfSubgradeReactionSelect translationalStiffnessByAreaX,IfcModulusOfSubgradeReactionSelect translationalStiffnessByAreaY,IfcModulusOfSubgradeReactionSelect translationalStiffnessByAreaZ):base(name)
		{
			TranslationalStiffnessByAreaX = translationalStiffnessByAreaX;
			TranslationalStiffnessByAreaY = translationalStiffnessByAreaY;
			TranslationalStiffnessByAreaZ = translationalStiffnessByAreaZ;

		}
		public static new IfcBoundaryFaceCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundaryFaceCondition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundarynodecondition.htm"/>
	/// </summary>
	public  partial class IfcBoundaryNodeCondition : IfcBoundaryCondition
	{
		public IfcTranslationalStiffnessSelect TranslationalStiffnessX{get;set;} // optional
		public IfcTranslationalStiffnessSelect TranslationalStiffnessY{get;set;} // optional
		public IfcTranslationalStiffnessSelect TranslationalStiffnessZ{get;set;} // optional
		public IfcRotationalStiffnessSelect RotationalStiffnessX{get;set;} // optional
		public IfcRotationalStiffnessSelect RotationalStiffnessY{get;set;} // optional
		public IfcRotationalStiffnessSelect RotationalStiffnessZ{get;set;} // optional

		/// <summary>
		/// Construct a IfcBoundaryNodeCondition with all required attributes.
		/// </summary>
		public IfcBoundaryNodeCondition():base()
		{

		}
		/// <summary>
		/// Construct a IfcBoundaryNodeCondition with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBoundaryNodeCondition(IfcLabel name,IfcTranslationalStiffnessSelect translationalStiffnessX,IfcTranslationalStiffnessSelect translationalStiffnessY,IfcTranslationalStiffnessSelect translationalStiffnessZ,IfcRotationalStiffnessSelect rotationalStiffnessX,IfcRotationalStiffnessSelect rotationalStiffnessY,IfcRotationalStiffnessSelect rotationalStiffnessZ):base(name)
		{
			TranslationalStiffnessX = translationalStiffnessX;
			TranslationalStiffnessY = translationalStiffnessY;
			TranslationalStiffnessZ = translationalStiffnessZ;
			RotationalStiffnessX = rotationalStiffnessX;
			RotationalStiffnessY = rotationalStiffnessY;
			RotationalStiffnessZ = rotationalStiffnessZ;

		}
		public static new IfcBoundaryNodeCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundaryNodeCondition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundarycurve.htm"/>
	/// </summary>
	public  partial class IfcBoundaryCurve : IfcCompositeCurveOnSurface
	{
		/// <summary>
		/// Construct a IfcBoundaryCurve with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBoundaryCurve(List<IfcCompositeCurveSegment> segments,bool? selfIntersect):base(segments,selfIntersect)
		{

		}
		public static new IfcBoundaryCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundaryCurve>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcouterboundarycurve.htm"/>
	/// </summary>
	public  partial class IfcOuterBoundaryCurve : IfcBoundaryCurve
	{
		/// <summary>
		/// Construct a IfcOuterBoundaryCurve with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcOuterBoundaryCurve(List<IfcCompositeCurveSegment> segments,bool? selfIntersect):base(segments,selfIntersect)
		{

		}
		public static new IfcOuterBoundaryCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOuterBoundaryCurve>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompositecurveonsurface.htm"/>
	/// </summary>
	public  partial class IfcCompositeCurveOnSurface : IfcCompositeCurve
	{
		/// <summary>
		/// Construct a IfcCompositeCurveOnSurface with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCompositeCurveOnSurface(List<IfcCompositeCurveSegment> segments,bool? selfIntersect):base(segments,selfIntersect)
		{

		}
		public static new IfcCompositeCurveOnSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompositeCurveOnSurface>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundarynodeconditionwarping.htm"/>
	/// </summary>
	public  partial class IfcBoundaryNodeConditionWarping : IfcBoundaryNodeCondition
	{
		public IfcWarpingStiffnessSelect WarpingStiffness{get;set;} // optional

		/// <summary>
		/// Construct a IfcBoundaryNodeConditionWarping with all required attributes.
		/// </summary>
		public IfcBoundaryNodeConditionWarping():base()
		{

		}
		/// <summary>
		/// Construct a IfcBoundaryNodeConditionWarping with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBoundaryNodeConditionWarping(IfcLabel name,IfcTranslationalStiffnessSelect translationalStiffnessX,IfcTranslationalStiffnessSelect translationalStiffnessY,IfcTranslationalStiffnessSelect translationalStiffnessZ,IfcRotationalStiffnessSelect rotationalStiffnessX,IfcRotationalStiffnessSelect rotationalStiffnessY,IfcRotationalStiffnessSelect rotationalStiffnessZ,IfcWarpingStiffnessSelect warpingStiffness):base(name,translationalStiffnessX,translationalStiffnessY,translationalStiffnessZ,rotationalStiffnessX,rotationalStiffnessY,rotationalStiffnessZ)
		{
			WarpingStiffness = warpingStiffness;

		}
		public static new IfcBoundaryNodeConditionWarping FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundaryNodeConditionWarping>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompositecurve.htm"/>
	/// </summary>
	public  partial class IfcCompositeCurve : IfcBoundedCurve
	{
		public List<IfcCompositeCurveSegment> Segments{get;set;} 
		public bool? SelfIntersect{get;set;} 

		/// <summary>
		/// Construct a IfcCompositeCurve with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCompositeCurve(List<IfcCompositeCurveSegment> segments,bool? selfIntersect):base()
		{
			Segments = segments;
			SelfIntersect = selfIntersect;

		}
		public static new IfcCompositeCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompositeCurve>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpolyline.htm"/>
	/// </summary>
	public  partial class IfcPolyline : IfcBoundedCurve
	{
		public List<IfcCartesianPoint> Points{get;set;} 

		/// <summary>
		/// Construct a IfcPolyline with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPolyline(List<IfcCartesianPoint> points):base()
		{
			Points = points;

		}
		public static new IfcPolyline FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPolyline>(json);
		}
    }

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctrimmedcurve.htm"/>
	/// </summary>
	public  partial class IfcTrimmedCurve : IfcBoundedCurve
	{
		public IfcCurve BasisCurve{get;set;} 
		public List<IfcTrimmingSelect> Trim1{get;set;} 
		public List<IfcTrimmingSelect> Trim2{get;set;} 
		public bool SenseAgreement{get;set;} 
		public IfcTrimmingPreference MasterRepresentation{get;set;} 

		/// <summary>
		/// Construct a IfcTrimmedCurve with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTrimmedCurve(IfcCurve basisCurve,List<IfcTrimmingSelect> trim1,List<IfcTrimmingSelect> trim2,bool senseAgreement,IfcTrimmingPreference masterRepresentation):base()
		{
			BasisCurve = basisCurve;
			Trim1 = trim1;
			Trim2 = trim2;
			SenseAgreement = senseAgreement;
			MasterRepresentation = masterRepresentation;

		}
		public static new IfcTrimmedCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTrimmedCurve>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurve.htm"/>
	/// </summary>
	public abstract partial class IfcCurve : IfcGeometricRepresentationItem
	{
		/// <summary>
		/// Construct a IfcCurve with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCurve():base()
		{

		}
		public static new IfcCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurve>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurveboundedplane.htm"/>
	/// </summary>
	public  partial class IfcCurveBoundedPlane : IfcBoundedSurface
	{
		public IfcPlane BasisSurface{get;set;} 
		public IfcCurve OuterBoundary{get;set;} 
		public List<IfcCurve> InnerBoundaries{get;set;} 

		/// <summary>
		/// Construct a IfcCurveBoundedPlane with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCurveBoundedPlane(IfcPlane basisSurface,IfcCurve outerBoundary,List<IfcCurve> innerBoundaries):base()
		{
			BasisSurface = basisSurface;
			OuterBoundary = outerBoundary;
			InnerBoundaries = innerBoundaries;

		}
		public static new IfcCurveBoundedPlane FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveBoundedPlane>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurveboundedsurface.htm"/>
	/// </summary>
	public  partial class IfcCurveBoundedSurface : IfcBoundedSurface
	{
		public IfcSurface BasisSurface{get;set;} 
		public List<IfcBoundaryCurve> Boundaries{get;set;} 
		public bool ImplicitOuter{get;set;} 

		/// <summary>
		/// Construct a IfcCurveBoundedSurface with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCurveBoundedSurface(IfcSurface basisSurface,List<IfcBoundaryCurve> boundaries,bool implicitOuter):base()
		{
			BasisSurface = basisSurface;
			Boundaries = boundaries;
			ImplicitOuter = implicitOuter;

		}
		public static new IfcCurveBoundedSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveBoundedSurface>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrectangulartrimmedsurface.htm"/>
	/// </summary>
	public  partial class IfcRectangularTrimmedSurface : IfcBoundedSurface
	{
		public IfcSurface BasisSurface{get;set;} 
		public IfcParameterValue U1{get;set;} 
		public IfcParameterValue V1{get;set;} 
		public IfcParameterValue U2{get;set;} 
		public IfcParameterValue V2{get;set;} 
		public bool Usense{get;set;} 
		public bool Vsense{get;set;} 

		/// <summary>
		/// Construct a IfcRectangularTrimmedSurface with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRectangularTrimmedSurface(IfcSurface basisSurface,IfcParameterValue u1,IfcParameterValue v1,IfcParameterValue u2,IfcParameterValue v2,bool usense,bool vsense):base()
		{
			BasisSurface = basisSurface;
			U1 = u1;
			V1 = v1;
			U2 = u2;
			V2 = v2;
			Usense = usense;
			Vsense = vsense;

		}
		public static new IfcRectangularTrimmedSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRectangularTrimmedSurface>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurface.htm"/>
	/// </summary>
	public abstract partial class IfcSurface : IfcGeometricRepresentationItem
	{
		/// <summary>
		/// Construct a IfcSurface with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSurface():base()
		{

		}
		public static new IfcSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurface>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundingbox.htm"/>
	/// </summary>
	public  partial class IfcBoundingBox : IfcGeometricRepresentationItem
	{
		public IfcCartesianPoint Corner{get;set;} 
		public IfcPositiveLengthMeasure XDim{get;set;} 
		public IfcPositiveLengthMeasure YDim{get;set;} 
		public IfcPositiveLengthMeasure ZDim{get;set;} 

		/// <summary>
		/// Construct a IfcBoundingBox with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBoundingBox(IfcCartesianPoint corner,IfcPositiveLengthMeasure xDim,IfcPositiveLengthMeasure yDim,IfcPositiveLengthMeasure zDim):base()
		{
			Corner = corner;
			XDim = xDim;
			YDim = yDim;
			ZDim = zDim;

		}
		public static new IfcBoundingBox FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundingBox>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboxedhalfspace.htm"/>
	/// </summary>
	public  partial class IfcBoxedHalfSpace : IfcHalfSpaceSolid
	{
		public IfcBoundingBox Enclosure{get;set;} 

		/// <summary>
		/// Construct a IfcBoxedHalfSpace with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBoxedHalfSpace(IfcSurface baseSurface,bool agreementFlag,IfcBoundingBox enclosure):base(baseSurface,agreementFlag)
		{
			Enclosure = enclosure;

		}
		public static new IfcBoxedHalfSpace FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoxedHalfSpace>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifchalfspacesolid.htm"/>
	/// </summary>
	public  partial class IfcHalfSpaceSolid : IfcGeometricRepresentationItem
	{
		public IfcSurface BaseSurface{get;set;} 
		public bool AgreementFlag{get;set;} 

		/// <summary>
		/// Construct a IfcHalfSpaceSolid with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcHalfSpaceSolid(IfcSurface baseSurface,bool agreementFlag):base()
		{
			BaseSurface = baseSurface;
			AgreementFlag = agreementFlag;

		}
		public static new IfcHalfSpaceSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHalfSpaceSolid>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuilding.htm"/>
	/// </summary>
	public  partial class IfcBuilding : IfcSpatialStructureElement
	{
		public IfcLengthMeasure ElevationOfRefHeight{get;set;} // optional
		public IfcLengthMeasure ElevationOfTerrain{get;set;} // optional
		public IfcPostalAddress BuildingAddress{get;set;} // optional

		/// <summary>
		/// Construct a IfcBuilding with all required attributes.
		/// </summary>
		public IfcBuilding(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcBuilding with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBuilding(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcLabel longName,IfcElementCompositionEnum compositionType,IfcLengthMeasure elevationOfRefHeight,IfcLengthMeasure elevationOfTerrain,IfcPostalAddress buildingAddress):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,longName,compositionType)
		{
			ElevationOfRefHeight = elevationOfRefHeight;
			ElevationOfTerrain = elevationOfTerrain;
			BuildingAddress = buildingAddress;

		}
		public static new IfcBuilding FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuilding>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialstructureelement.htm"/>
	/// </summary>
	public abstract partial class IfcSpatialStructureElement : IfcSpatialElement
	{
		public IfcElementCompositionEnum CompositionType{get;set;} // optional

		/// <summary>
		/// Construct a IfcSpatialStructureElement with all required attributes.
		/// </summary>
		public IfcSpatialStructureElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSpatialStructureElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSpatialStructureElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcLabel longName,IfcElementCompositionEnum compositionType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,longName)
		{
			CompositionType = compositionType;

		}
		public static new IfcSpatialStructureElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpatialStructureElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementproxy.htm"/>
	/// </summary>
	public  partial class IfcBuildingElementProxy : IfcBuildingElement
	{
		public IfcBuildingElementProxyTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcBuildingElementProxy with all required attributes.
		/// </summary>
		public IfcBuildingElementProxy(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcBuildingElementProxy with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBuildingElementProxy(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcBuildingElementProxyTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcBuildingElementProxy FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingElementProxy>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchimney.htm"/>
	/// </summary>
	public  partial class IfcChimney : IfcBuildingElement
	{
		public IfcChimneyTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcChimney with all required attributes.
		/// </summary>
		public IfcChimney(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcChimney with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcChimney(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcChimneyTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcChimney FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcChimney>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolumn.htm"/>
	/// </summary>
	public  partial class IfcColumn : IfcBuildingElement
	{
		public IfcColumnTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcColumn with all required attributes.
		/// </summary>
		public IfcColumn(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcColumn with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcColumn(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcColumnTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcColumn FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColumn>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccovering.htm"/>
	/// </summary>
	public  partial class IfcCovering : IfcBuildingElement
	{
		public IfcCoveringTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcCovering with all required attributes.
		/// </summary>
		public IfcCovering(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCovering with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCovering(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcCoveringTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCovering FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCovering>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurtainwall.htm"/>
	/// </summary>
	public  partial class IfcCurtainWall : IfcBuildingElement
	{
		public IfcCurtainWallTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcCurtainWall with all required attributes.
		/// </summary>
		public IfcCurtainWall(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCurtainWall with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCurtainWall(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcCurtainWallTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCurtainWall FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurtainWall>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoor.htm"/>
	/// </summary>
	public  partial class IfcDoor : IfcBuildingElement
	{
		public IfcPositiveLengthMeasure OverallHeight{get;set;} // optional
		public IfcPositiveLengthMeasure OverallWidth{get;set;} // optional
		public IfcDoorTypeEnum PredefinedType{get;set;} // optional
		public IfcDoorTypeOperationEnum OperationType{get;set;} // optional
		public IfcLabel UserDefinedOperationType{get;set;} // optional

		/// <summary>
		/// Construct a IfcDoor with all required attributes.
		/// </summary>
		public IfcDoor(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDoor with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDoor(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcPositiveLengthMeasure overallHeight,IfcPositiveLengthMeasure overallWidth,IfcDoorTypeEnum predefinedType,IfcDoorTypeOperationEnum operationType,IfcLabel userDefinedOperationType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			OverallHeight = overallHeight;
			OverallWidth = overallWidth;
			PredefinedType = predefinedType;
			OperationType = operationType;
			UserDefinedOperationType = userDefinedOperationType;

		}
		public static new IfcDoor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoor>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfooting.htm"/>
	/// </summary>
	public  partial class IfcFooting : IfcBuildingElement
	{
		public IfcFootingTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcFooting with all required attributes.
		/// </summary>
		public IfcFooting(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFooting with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFooting(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcFootingTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFooting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFooting>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmember.htm"/>
	/// </summary>
	public  partial class IfcMember : IfcBuildingElement
	{
		public IfcMemberTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcMember with all required attributes.
		/// </summary>
		public IfcMember(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcMember with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMember(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcMemberTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcMember FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMember>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpile.htm"/>
	/// </summary>
	public  partial class IfcPile : IfcBuildingElement
	{
		public IfcPileTypeEnum PredefinedType{get;set;} // optional
		public IfcPileConstructionEnum ConstructionType{get;set;} // optional

		/// <summary>
		/// Construct a IfcPile with all required attributes.
		/// </summary>
		public IfcPile(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcPile with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPile(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcPileTypeEnum predefinedType,IfcPileConstructionEnum constructionType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;
			ConstructionType = constructionType;

		}
		public static new IfcPile FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPile>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplate.htm"/>
	/// </summary>
	public  partial class IfcPlate : IfcBuildingElement
	{
		public IfcPlateTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcPlate with all required attributes.
		/// </summary>
		public IfcPlate(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcPlate with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPlate(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcPlateTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcPlate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlate>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrailing.htm"/>
	/// </summary>
	public  partial class IfcRailing : IfcBuildingElement
	{
		public IfcRailingTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcRailing with all required attributes.
		/// </summary>
		public IfcRailing(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcRailing with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRailing(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcRailingTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcRailing FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRailing>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcramp.htm"/>
	/// </summary>
	public  partial class IfcRamp : IfcBuildingElement
	{
		public IfcRampTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcRamp with all required attributes.
		/// </summary>
		public IfcRamp(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcRamp with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRamp(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcRampTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcRamp FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRamp>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrampflight.htm"/>
	/// </summary>
	public  partial class IfcRampFlight : IfcBuildingElement
	{
		public IfcRampFlightTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcRampFlight with all required attributes.
		/// </summary>
		public IfcRampFlight(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcRampFlight with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRampFlight(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcRampFlightTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcRampFlight FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRampFlight>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcroof.htm"/>
	/// </summary>
	public  partial class IfcRoof : IfcBuildingElement
	{
		public IfcRoofTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcRoof with all required attributes.
		/// </summary>
		public IfcRoof(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcRoof with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRoof(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcRoofTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcRoof FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRoof>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshadingdevice.htm"/>
	/// </summary>
	public  partial class IfcShadingDevice : IfcBuildingElement
	{
		public IfcShadingDeviceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcShadingDevice with all required attributes.
		/// </summary>
		public IfcShadingDevice(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcShadingDevice with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcShadingDevice(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcShadingDeviceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcShadingDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShadingDevice>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcslab.htm"/>
	/// </summary>
	public  partial class IfcSlab : IfcBuildingElement
	{
		public IfcSlabTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcSlab with all required attributes.
		/// </summary>
		public IfcSlab(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSlab with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSlab(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcSlabTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSlab FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSlab>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstair.htm"/>
	/// </summary>
	public  partial class IfcStair : IfcBuildingElement
	{
		public IfcStairTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcStair with all required attributes.
		/// </summary>
		public IfcStair(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcStair with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStair(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcStairTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcStair FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStair>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstairflight.htm"/>
	/// </summary>
	public  partial class IfcStairFlight : IfcBuildingElement
	{
		public int NumberOfRiser{get;set;} // optional
		public int NumberOfTreads{get;set;} // optional
		public IfcPositiveLengthMeasure RiserHeight{get;set;} // optional
		public IfcPositiveLengthMeasure TreadLength{get;set;} // optional
		public IfcStairFlightTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcStairFlight with all required attributes.
		/// </summary>
		public IfcStairFlight(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcStairFlight with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStairFlight(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,int numberOfRiser,int numberOfTreads,IfcPositiveLengthMeasure riserHeight,IfcPositiveLengthMeasure treadLength,IfcStairFlightTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			NumberOfRiser = numberOfRiser;
			NumberOfTreads = numberOfTreads;
			RiserHeight = riserHeight;
			TreadLength = treadLength;
			PredefinedType = predefinedType;

		}
		public static new IfcStairFlight FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStairFlight>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwall.htm"/>
	/// </summary>
	public  partial class IfcWall : IfcBuildingElement
	{
		public IfcWallTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcWall with all required attributes.
		/// </summary>
		public IfcWall(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcWall with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWall(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcWallTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcWall FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWall>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindow.htm"/>
	/// </summary>
	public  partial class IfcWindow : IfcBuildingElement
	{
		public IfcPositiveLengthMeasure OverallHeight{get;set;} // optional
		public IfcPositiveLengthMeasure OverallWidth{get;set;} // optional
		public IfcWindowTypeEnum PredefinedType{get;set;} // optional
		public IfcWindowTypePartitioningEnum PartitioningType{get;set;} // optional
		public IfcLabel UserDefinedPartitioningType{get;set;} // optional

		/// <summary>
		/// Construct a IfcWindow with all required attributes.
		/// </summary>
		public IfcWindow(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcWindow with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWindow(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcPositiveLengthMeasure overallHeight,IfcPositiveLengthMeasure overallWidth,IfcWindowTypeEnum predefinedType,IfcWindowTypePartitioningEnum partitioningType,IfcLabel userDefinedPartitioningType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			OverallHeight = overallHeight;
			OverallWidth = overallWidth;
			PredefinedType = predefinedType;
			PartitioningType = partitioningType;
			UserDefinedPartitioningType = userDefinedPartitioningType;

		}
		public static new IfcWindow FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWindow>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelement.htm"/>
	/// </summary>
	public abstract partial class IfcElement : IfcProduct
	{
		public IfcIdentifier Tag{get;set;} // optional

		/// <summary>
		/// Construct a IfcElement with all required attributes.
		/// </summary>
		public IfcElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation)
		{
			Tag = tag;

		}
		public static new IfcElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementpart.htm"/>
	/// </summary>
	public  partial class IfcBuildingElementPart : IfcElementComponent
	{
		public IfcBuildingElementPartTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcBuildingElementPart with all required attributes.
		/// </summary>
		public IfcBuildingElementPart(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcBuildingElementPart with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBuildingElementPart(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcBuildingElementPartTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcBuildingElementPart FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingElementPart>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementcomponent.htm"/>
	/// </summary>
	public abstract partial class IfcElementComponent : IfcElement
	{
		/// <summary>
		/// Construct a IfcElementComponent with all required attributes.
		/// </summary>
		public IfcElementComponent(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcElementComponent with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElementComponent(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcElementComponent FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementComponent>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementparttype.htm"/>
	/// </summary>
	public  partial class IfcBuildingElementPartType : IfcElementComponentType
	{
		public IfcBuildingElementPartTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcBuildingElementPartType with all required attributes.
		/// </summary>
		public IfcBuildingElementPartType(IfcGloballyUniqueId globalId,IfcBuildingElementPartTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcBuildingElementPartType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBuildingElementPartType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcBuildingElementPartTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcBuildingElementPartType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingElementPartType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementcomponenttype.htm"/>
	/// </summary>
	public abstract partial class IfcElementComponentType : IfcElementType
	{
		/// <summary>
		/// Construct a IfcElementComponentType with all required attributes.
		/// </summary>
		public IfcElementComponentType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcElementComponentType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElementComponentType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcElementComponentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementComponentType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementproxytype.htm"/>
	/// </summary>
	public  partial class IfcBuildingElementProxyType : IfcBuildingElementType
	{
		public IfcBuildingElementProxyTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcBuildingElementProxyType with all required attributes.
		/// </summary>
		public IfcBuildingElementProxyType(IfcGloballyUniqueId globalId,IfcBuildingElementProxyTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcBuildingElementProxyType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBuildingElementProxyType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcBuildingElementProxyTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcBuildingElementProxyType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingElementProxyType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchimneytype.htm"/>
	/// </summary>
	public  partial class IfcChimneyType : IfcBuildingElementType
	{
		public IfcChimneyTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcChimneyType with all required attributes.
		/// </summary>
		public IfcChimneyType(IfcGloballyUniqueId globalId,IfcChimneyTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcChimneyType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcChimneyType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcChimneyTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcChimneyType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcChimneyType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolumntype.htm"/>
	/// </summary>
	public  partial class IfcColumnType : IfcBuildingElementType
	{
		public IfcColumnTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcColumnType with all required attributes.
		/// </summary>
		public IfcColumnType(IfcGloballyUniqueId globalId,IfcColumnTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcColumnType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcColumnType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcColumnTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcColumnType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColumnType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoveringtype.htm"/>
	/// </summary>
	public  partial class IfcCoveringType : IfcBuildingElementType
	{
		public IfcCoveringTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcCoveringType with all required attributes.
		/// </summary>
		public IfcCoveringType(IfcGloballyUniqueId globalId,IfcCoveringTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcCoveringType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCoveringType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcCoveringTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCoveringType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoveringType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurtainwalltype.htm"/>
	/// </summary>
	public  partial class IfcCurtainWallType : IfcBuildingElementType
	{
		public IfcCurtainWallTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcCurtainWallType with all required attributes.
		/// </summary>
		public IfcCurtainWallType(IfcGloballyUniqueId globalId,IfcCurtainWallTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcCurtainWallType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCurtainWallType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcCurtainWallTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCurtainWallType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurtainWallType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoortype.htm"/>
	/// </summary>
	public  partial class IfcDoorType : IfcBuildingElementType
	{
		public IfcDoorTypeEnum PredefinedType{get;set;} 
		public IfcDoorTypeOperationEnum OperationType{get;set;} 
		public bool ParameterTakesPrecedence{get;set;} // optional
		public IfcLabel UserDefinedOperationType{get;set;} // optional

		/// <summary>
		/// Construct a IfcDoorType with all required attributes.
		/// </summary>
		public IfcDoorType(IfcGloballyUniqueId globalId,IfcDoorTypeEnum predefinedType,IfcDoorTypeOperationEnum operationType):base(globalId)
		{
			PredefinedType = predefinedType;
			OperationType = operationType;

		}
		/// <summary>
		/// Construct a IfcDoorType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDoorType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcDoorTypeEnum predefinedType,IfcDoorTypeOperationEnum operationType,bool parameterTakesPrecedence,IfcLabel userDefinedOperationType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;
			OperationType = operationType;
			ParameterTakesPrecedence = parameterTakesPrecedence;
			UserDefinedOperationType = userDefinedOperationType;

		}
		public static new IfcDoorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoorType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfootingtype.htm"/>
	/// </summary>
	public  partial class IfcFootingType : IfcBuildingElementType
	{
		public IfcFootingTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcFootingType with all required attributes.
		/// </summary>
		public IfcFootingType(IfcGloballyUniqueId globalId,IfcFootingTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcFootingType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFootingType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcFootingTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFootingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFootingType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmembertype.htm"/>
	/// </summary>
	public  partial class IfcMemberType : IfcBuildingElementType
	{
		public IfcMemberTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcMemberType with all required attributes.
		/// </summary>
		public IfcMemberType(IfcGloballyUniqueId globalId,IfcMemberTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcMemberType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMemberType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcMemberTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcMemberType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMemberType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpiletype.htm"/>
	/// </summary>
	public  partial class IfcPileType : IfcBuildingElementType
	{
		public IfcPileTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcPileType with all required attributes.
		/// </summary>
		public IfcPileType(IfcGloballyUniqueId globalId,IfcPileTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcPileType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPileType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcPileTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcPileType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPileType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplatetype.htm"/>
	/// </summary>
	public  partial class IfcPlateType : IfcBuildingElementType
	{
		public IfcPlateTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcPlateType with all required attributes.
		/// </summary>
		public IfcPlateType(IfcGloballyUniqueId globalId,IfcPlateTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcPlateType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPlateType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcPlateTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcPlateType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlateType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrailingtype.htm"/>
	/// </summary>
	public  partial class IfcRailingType : IfcBuildingElementType
	{
		public IfcRailingTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcRailingType with all required attributes.
		/// </summary>
		public IfcRailingType(IfcGloballyUniqueId globalId,IfcRailingTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcRailingType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRailingType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcRailingTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcRailingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRailingType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrampflighttype.htm"/>
	/// </summary>
	public  partial class IfcRampFlightType : IfcBuildingElementType
	{
		public IfcRampFlightTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcRampFlightType with all required attributes.
		/// </summary>
		public IfcRampFlightType(IfcGloballyUniqueId globalId,IfcRampFlightTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcRampFlightType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRampFlightType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcRampFlightTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcRampFlightType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRampFlightType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcramptype.htm"/>
	/// </summary>
	public  partial class IfcRampType : IfcBuildingElementType
	{
		public IfcRampTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcRampType with all required attributes.
		/// </summary>
		public IfcRampType(IfcGloballyUniqueId globalId,IfcRampTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcRampType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRampType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcRampTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcRampType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRampType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrooftype.htm"/>
	/// </summary>
	public  partial class IfcRoofType : IfcBuildingElementType
	{
		public IfcRoofTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcRoofType with all required attributes.
		/// </summary>
		public IfcRoofType(IfcGloballyUniqueId globalId,IfcRoofTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcRoofType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRoofType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcRoofTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcRoofType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRoofType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshadingdevicetype.htm"/>
	/// </summary>
	public  partial class IfcShadingDeviceType : IfcBuildingElementType
	{
		public IfcShadingDeviceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcShadingDeviceType with all required attributes.
		/// </summary>
		public IfcShadingDeviceType(IfcGloballyUniqueId globalId,IfcShadingDeviceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcShadingDeviceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcShadingDeviceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcShadingDeviceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcShadingDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShadingDeviceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcslabtype.htm"/>
	/// </summary>
	public  partial class IfcSlabType : IfcBuildingElementType
	{
		public IfcSlabTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcSlabType with all required attributes.
		/// </summary>
		public IfcSlabType(IfcGloballyUniqueId globalId,IfcSlabTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcSlabType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSlabType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcSlabTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSlabType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSlabType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstairflighttype.htm"/>
	/// </summary>
	public  partial class IfcStairFlightType : IfcBuildingElementType
	{
		public IfcStairFlightTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcStairFlightType with all required attributes.
		/// </summary>
		public IfcStairFlightType(IfcGloballyUniqueId globalId,IfcStairFlightTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcStairFlightType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStairFlightType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcStairFlightTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcStairFlightType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStairFlightType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstairtype.htm"/>
	/// </summary>
	public  partial class IfcStairType : IfcBuildingElementType
	{
		public IfcStairTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcStairType with all required attributes.
		/// </summary>
		public IfcStairType(IfcGloballyUniqueId globalId,IfcStairTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcStairType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStairType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcStairTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcStairType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStairType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwalltype.htm"/>
	/// </summary>
	public  partial class IfcWallType : IfcBuildingElementType
	{
		public IfcWallTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcWallType with all required attributes.
		/// </summary>
		public IfcWallType(IfcGloballyUniqueId globalId,IfcWallTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcWallType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWallType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcWallTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcWallType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWallType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowtype.htm"/>
	/// </summary>
	public  partial class IfcWindowType : IfcBuildingElementType
	{
		public IfcWindowTypeEnum PredefinedType{get;set;} 
		public IfcWindowTypePartitioningEnum PartitioningType{get;set;} 
		public bool ParameterTakesPrecedence{get;set;} // optional
		public IfcLabel UserDefinedPartitioningType{get;set;} // optional

		/// <summary>
		/// Construct a IfcWindowType with all required attributes.
		/// </summary>
		public IfcWindowType(IfcGloballyUniqueId globalId,IfcWindowTypeEnum predefinedType,IfcWindowTypePartitioningEnum partitioningType):base(globalId)
		{
			PredefinedType = predefinedType;
			PartitioningType = partitioningType;

		}
		/// <summary>
		/// Construct a IfcWindowType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWindowType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcWindowTypeEnum predefinedType,IfcWindowTypePartitioningEnum partitioningType,bool parameterTakesPrecedence,IfcLabel userDefinedPartitioningType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;
			PartitioningType = partitioningType;
			ParameterTakesPrecedence = parameterTakesPrecedence;
			UserDefinedPartitioningType = userDefinedPartitioningType;

		}
		public static new IfcWindowType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWindowType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcElementType : IfcTypeProduct
	{
		public IfcLabel ElementType{get;set;} // optional

		/// <summary>
		/// Construct a IfcElementType with all required attributes.
		/// </summary>
		public IfcElementType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag)
		{
			ElementType = elementType;

		}
		public static new IfcElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingstorey.htm"/>
	/// </summary>
	public  partial class IfcBuildingStorey : IfcSpatialStructureElement
	{
		public IfcLengthMeasure Elevation{get;set;} // optional

		/// <summary>
		/// Construct a IfcBuildingStorey with all required attributes.
		/// </summary>
		public IfcBuildingStorey(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcBuildingStorey with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBuildingStorey(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcLabel longName,IfcElementCompositionEnum compositionType,IfcLengthMeasure elevation):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,longName,compositionType)
		{
			Elevation = elevation;

		}
		public static new IfcBuildingStorey FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingStorey>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingsystem.htm"/>
	/// </summary>
	public  partial class IfcBuildingSystem : IfcSystem
	{
		public IfcBuildingSystemTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcBuildingSystem with all required attributes.
		/// </summary>
		public IfcBuildingSystem(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcBuildingSystem with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBuildingSystem(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcBuildingSystemTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcBuildingSystem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingSystem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsystem.htm"/>
	/// </summary>
	public  partial class IfcSystem : IfcGroup
	{
		/// <summary>
		/// Construct a IfcSystem with all required attributes.
		/// </summary>
		public IfcSystem(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSystem with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSystem(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType):base(globalId,ownerHistory,name,description,objectType)
		{

		}
		public static new IfcSystem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSystem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcburner.htm"/>
	/// </summary>
	public  partial class IfcBurner : IfcEnergyConversionDevice
	{
		public IfcBurnerTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcBurner with all required attributes.
		/// </summary>
		public IfcBurner(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcBurner with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBurner(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcBurnerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcBurner FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBurner>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcburnertype.htm"/>
	/// </summary>
	public  partial class IfcBurnerType : IfcEnergyConversionDeviceType
	{
		public IfcBurnerTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcBurnerType with all required attributes.
		/// </summary>
		public IfcBurnerType(IfcGloballyUniqueId globalId,IfcBurnerTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcBurnerType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcBurnerType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcBurnerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcBurnerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBurnerType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccshapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcCShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure Depth{get;set;} 
		public IfcPositiveLengthMeasure Width{get;set;} 
		public IfcPositiveLengthMeasure WallThickness{get;set;} 
		public IfcPositiveLengthMeasure Girth{get;set;} 
		public IfcNonNegativeLengthMeasure InternalFilletRadius{get;set;} // optional

		/// <summary>
		/// Construct a IfcCShapeProfileDef with all required attributes.
		/// </summary>
		public IfcCShapeProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure width,IfcPositiveLengthMeasure wallThickness,IfcPositiveLengthMeasure girth):base(profileType)
		{
			Depth = depth;
			Width = width;
			WallThickness = wallThickness;
			Girth = girth;

		}
		/// <summary>
		/// Construct a IfcCShapeProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCShapeProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure width,IfcPositiveLengthMeasure wallThickness,IfcPositiveLengthMeasure girth,IfcNonNegativeLengthMeasure internalFilletRadius):base(profileType,profileName,position)
		{
			Depth = depth;
			Width = width;
			WallThickness = wallThickness;
			Girth = girth;
			InternalFilletRadius = internalFilletRadius;

		}
		public static new IfcCShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCShapeProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablecarrierfitting.htm"/>
	/// </summary>
	public  partial class IfcCableCarrierFitting : IfcFlowFitting
	{
		public IfcCableCarrierFittingTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcCableCarrierFitting with all required attributes.
		/// </summary>
		public IfcCableCarrierFitting(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCableCarrierFitting with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCableCarrierFitting(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcCableCarrierFittingTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCableCarrierFitting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableCarrierFitting>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowfitting.htm"/>
	/// </summary>
	public  partial class IfcFlowFitting : IfcDistributionFlowElement
	{
		/// <summary>
		/// Construct a IfcFlowFitting with all required attributes.
		/// </summary>
		public IfcFlowFitting(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowFitting with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowFitting(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcFlowFitting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowFitting>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablecarrierfittingtype.htm"/>
	/// </summary>
	public  partial class IfcCableCarrierFittingType : IfcFlowFittingType
	{
		public IfcCableCarrierFittingTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcCableCarrierFittingType with all required attributes.
		/// </summary>
		public IfcCableCarrierFittingType(IfcGloballyUniqueId globalId,IfcCableCarrierFittingTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcCableCarrierFittingType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCableCarrierFittingType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcCableCarrierFittingTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCableCarrierFittingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableCarrierFittingType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowfittingtype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowFittingType : IfcDistributionFlowElementType
	{
		/// <summary>
		/// Construct a IfcFlowFittingType with all required attributes.
		/// </summary>
		public IfcFlowFittingType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowFittingType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowFittingType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcFlowFittingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowFittingType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablecarriersegment.htm"/>
	/// </summary>
	public  partial class IfcCableCarrierSegment : IfcFlowSegment
	{
		public IfcCableCarrierSegmentTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcCableCarrierSegment with all required attributes.
		/// </summary>
		public IfcCableCarrierSegment(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCableCarrierSegment with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCableCarrierSegment(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcCableCarrierSegmentTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCableCarrierSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableCarrierSegment>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowsegment.htm"/>
	/// </summary>
	public  partial class IfcFlowSegment : IfcDistributionFlowElement
	{
		/// <summary>
		/// Construct a IfcFlowSegment with all required attributes.
		/// </summary>
		public IfcFlowSegment(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowSegment with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowSegment(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcFlowSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowSegment>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablecarriersegmenttype.htm"/>
	/// </summary>
	public  partial class IfcCableCarrierSegmentType : IfcFlowSegmentType
	{
		public IfcCableCarrierSegmentTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcCableCarrierSegmentType with all required attributes.
		/// </summary>
		public IfcCableCarrierSegmentType(IfcGloballyUniqueId globalId,IfcCableCarrierSegmentTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcCableCarrierSegmentType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCableCarrierSegmentType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcCableCarrierSegmentTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCableCarrierSegmentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableCarrierSegmentType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowsegmenttype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowSegmentType : IfcDistributionFlowElementType
	{
		/// <summary>
		/// Construct a IfcFlowSegmentType with all required attributes.
		/// </summary>
		public IfcFlowSegmentType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowSegmentType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowSegmentType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcFlowSegmentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowSegmentType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablefitting.htm"/>
	/// </summary>
	public  partial class IfcCableFitting : IfcFlowFitting
	{
		public IfcCableFittingTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcCableFitting with all required attributes.
		/// </summary>
		public IfcCableFitting(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCableFitting with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCableFitting(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcCableFittingTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCableFitting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableFitting>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablefittingtype.htm"/>
	/// </summary>
	public  partial class IfcCableFittingType : IfcFlowFittingType
	{
		public IfcCableFittingTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcCableFittingType with all required attributes.
		/// </summary>
		public IfcCableFittingType(IfcGloballyUniqueId globalId,IfcCableFittingTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcCableFittingType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCableFittingType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcCableFittingTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCableFittingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableFittingType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablesegment.htm"/>
	/// </summary>
	public  partial class IfcCableSegment : IfcFlowSegment
	{
		public IfcCableSegmentTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcCableSegment with all required attributes.
		/// </summary>
		public IfcCableSegment(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCableSegment with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCableSegment(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcCableSegmentTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCableSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableSegment>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablesegmenttype.htm"/>
	/// </summary>
	public  partial class IfcCableSegmentType : IfcFlowSegmentType
	{
		public IfcCableSegmentTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcCableSegmentType with all required attributes.
		/// </summary>
		public IfcCableSegmentType(IfcGloballyUniqueId globalId,IfcCableSegmentTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcCableSegmentType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCableSegmentType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcCableSegmentTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCableSegmentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableSegmentType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesianpoint.htm"/>
	/// </summary>
	public  partial class IfcCartesianPoint : IfcPoint
	{
		public List<IfcLengthMeasure> Coordinates{get;set;} 

		/// <summary>
		/// Construct a IfcCartesianPoint with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCartesianPoint(List<IfcLengthMeasure> coordinates):base()
		{
			Coordinates = coordinates;

		}
		public static new IfcCartesianPoint FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianPoint>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpoint.htm"/>
	/// </summary>
	public abstract partial class IfcPoint : IfcGeometricRepresentationItem
	{
		/// <summary>
		/// Construct a IfcPoint with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPoint():base()
		{

		}
		public static new IfcPoint FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPoint>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesianpointlist.htm"/>
	/// </summary>
	public abstract partial class IfcCartesianPointList : IfcGeometricRepresentationItem
	{
		/// <summary>
		/// Construct a IfcCartesianPointList with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCartesianPointList():base()
		{

		}
		public static new IfcCartesianPointList FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianPointList>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesianpointlist3d.htm"/>
	/// </summary>
	public  partial class IfcCartesianPointList3D : IfcCartesianPointList
	{
		public List<List<IfcLengthMeasure>> CoordList{get;set;} 

		/// <summary>
		/// Construct a IfcCartesianPointList3D with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCartesianPointList3D(List<List<IfcLengthMeasure>> coordList):base()
		{
			CoordList = coordList;

		}
		public static new IfcCartesianPointList3D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianPointList3D>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesiantransformationoperator.htm"/>
	/// </summary>
	public abstract partial class IfcCartesianTransformationOperator : IfcGeometricRepresentationItem
	{
		public IfcDirection Axis1{get;set;} // optional
		public IfcDirection Axis2{get;set;} // optional
		public IfcCartesianPoint LocalOrigin{get;set;} 
		public double Scale{get;set;} // optional

		/// <summary>
		/// Construct a IfcCartesianTransformationOperator with all required attributes.
		/// </summary>
		public IfcCartesianTransformationOperator(IfcCartesianPoint localOrigin):base()
		{
			LocalOrigin = localOrigin;

		}
		/// <summary>
		/// Construct a IfcCartesianTransformationOperator with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCartesianTransformationOperator(IfcDirection axis1,IfcDirection axis2,IfcCartesianPoint localOrigin,double scale):base()
		{
			Axis1 = axis1;
			Axis2 = axis2;
			LocalOrigin = localOrigin;
			Scale = scale;

		}
		public static new IfcCartesianTransformationOperator FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianTransformationOperator>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesiantransformationoperator2d.htm"/>
	/// </summary>
	public  partial class IfcCartesianTransformationOperator2D : IfcCartesianTransformationOperator
	{
		/// <summary>
		/// Construct a IfcCartesianTransformationOperator2D with all required attributes.
		/// </summary>
		public IfcCartesianTransformationOperator2D(IfcCartesianPoint localOrigin):base(localOrigin)
		{

		}
		/// <summary>
		/// Construct a IfcCartesianTransformationOperator2D with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCartesianTransformationOperator2D(IfcDirection axis1,IfcDirection axis2,IfcCartesianPoint localOrigin,double scale):base(axis1,axis2,localOrigin,scale)
		{

		}
		public static new IfcCartesianTransformationOperator2D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianTransformationOperator2D>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesiantransformationoperator3d.htm"/>
	/// </summary>
	public  partial class IfcCartesianTransformationOperator3D : IfcCartesianTransformationOperator
	{
		public IfcDirection Axis3{get;set;} // optional

		/// <summary>
		/// Construct a IfcCartesianTransformationOperator3D with all required attributes.
		/// </summary>
		public IfcCartesianTransformationOperator3D(IfcCartesianPoint localOrigin):base(localOrigin)
		{

		}
		/// <summary>
		/// Construct a IfcCartesianTransformationOperator3D with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCartesianTransformationOperator3D(IfcDirection axis1,IfcDirection axis2,IfcCartesianPoint localOrigin,double scale,IfcDirection axis3):base(axis1,axis2,localOrigin,scale)
		{
			Axis3 = axis3;

		}
		public static new IfcCartesianTransformationOperator3D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianTransformationOperator3D>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesiantransformationoperator2dnonuniform.htm"/>
	/// </summary>
	public  partial class IfcCartesianTransformationOperator2DnonUniform : IfcCartesianTransformationOperator2D
	{
		public double Scale2{get;set;} // optional

		/// <summary>
		/// Construct a IfcCartesianTransformationOperator2DnonUniform with all required attributes.
		/// </summary>
		public IfcCartesianTransformationOperator2DnonUniform(IfcCartesianPoint localOrigin):base(localOrigin)
		{

		}
		/// <summary>
		/// Construct a IfcCartesianTransformationOperator2DnonUniform with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCartesianTransformationOperator2DnonUniform(IfcDirection axis1,IfcDirection axis2,IfcCartesianPoint localOrigin,double scale,double scale2):base(axis1,axis2,localOrigin,scale)
		{
			Scale2 = scale2;

		}
		public static new IfcCartesianTransformationOperator2DnonUniform FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianTransformationOperator2DnonUniform>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesiantransformationoperator3dnonuniform.htm"/>
	/// </summary>
	public  partial class IfcCartesianTransformationOperator3DnonUniform : IfcCartesianTransformationOperator3D
	{
		public double Scale2{get;set;} // optional
		public double Scale3{get;set;} // optional

		/// <summary>
		/// Construct a IfcCartesianTransformationOperator3DnonUniform with all required attributes.
		/// </summary>
		public IfcCartesianTransformationOperator3DnonUniform(IfcCartesianPoint localOrigin):base(localOrigin)
		{

		}
		/// <summary>
		/// Construct a IfcCartesianTransformationOperator3DnonUniform with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCartesianTransformationOperator3DnonUniform(IfcDirection axis1,IfcDirection axis2,IfcCartesianPoint localOrigin,double scale,IfcDirection axis3,double scale2,double scale3):base(axis1,axis2,localOrigin,scale,axis3)
		{
			Scale2 = scale2;
			Scale3 = scale3;

		}
		public static new IfcCartesianTransformationOperator3DnonUniform FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianTransformationOperator3DnonUniform>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchiller.htm"/>
	/// </summary>
	public  partial class IfcChiller : IfcEnergyConversionDevice
	{
		public IfcChillerTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcChiller with all required attributes.
		/// </summary>
		public IfcChiller(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcChiller with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcChiller(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcChillerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcChiller FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcChiller>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchillertype.htm"/>
	/// </summary>
	public  partial class IfcChillerType : IfcEnergyConversionDeviceType
	{
		public IfcChillerTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcChillerType with all required attributes.
		/// </summary>
		public IfcChillerType(IfcGloballyUniqueId globalId,IfcChillerTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcChillerType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcChillerType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcChillerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcChillerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcChillerType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccircle.htm"/>
	/// </summary>
	public  partial class IfcCircle : IfcConic
	{
		public IfcPositiveLengthMeasure Radius{get;set;} 

		/// <summary>
		/// Construct a IfcCircle with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCircle(IfcAxis2Placement position,IfcPositiveLengthMeasure radius):base(position)
		{
			Radius = radius;

		}
		public static new IfcCircle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCircle>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconic.htm"/>
	/// </summary>
	public abstract partial class IfcConic : IfcCurve
	{
		public IfcAxis2Placement Position{get;set;} 

		/// <summary>
		/// Construct a IfcConic with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConic(IfcAxis2Placement position):base()
		{
			Position = position;

		}
		public static new IfcConic FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConic>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccirclehollowprofiledef.htm"/>
	/// </summary>
	public  partial class IfcCircleHollowProfileDef : IfcCircleProfileDef
	{
		public IfcPositiveLengthMeasure WallThickness{get;set;} 

		/// <summary>
		/// Construct a IfcCircleHollowProfileDef with all required attributes.
		/// </summary>
		public IfcCircleHollowProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure radius,IfcPositiveLengthMeasure wallThickness):base(profileType,radius)
		{
			WallThickness = wallThickness;

		}
		/// <summary>
		/// Construct a IfcCircleHollowProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCircleHollowProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure radius,IfcPositiveLengthMeasure wallThickness):base(profileType,profileName,position,radius)
		{
			WallThickness = wallThickness;

		}
		public static new IfcCircleHollowProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCircleHollowProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccircleprofiledef.htm"/>
	/// </summary>
	public  partial class IfcCircleProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure Radius{get;set;} 

		/// <summary>
		/// Construct a IfcCircleProfileDef with all required attributes.
		/// </summary>
		public IfcCircleProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure radius):base(profileType)
		{
			Radius = radius;

		}
		/// <summary>
		/// Construct a IfcCircleProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCircleProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure radius):base(profileType,profileName,position)
		{
			Radius = radius;

		}
		public static new IfcCircleProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCircleProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccivilelement.htm"/>
	/// </summary>
	public  partial class IfcCivilElement : IfcElement
	{
		/// <summary>
		/// Construct a IfcCivilElement with all required attributes.
		/// </summary>
		public IfcCivilElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCivilElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCivilElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcCivilElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCivilElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccivilelementtype.htm"/>
	/// </summary>
	public  partial class IfcCivilElementType : IfcElementType
	{
		/// <summary>
		/// Construct a IfcCivilElementType with all required attributes.
		/// </summary>
		public IfcCivilElementType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCivilElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCivilElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcCivilElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCivilElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcclassification.htm"/>
	/// </summary>
	public  partial class IfcClassification : IfcExternalInformation
	{
		public IfcLabel Source{get;set;} // optional
		public IfcLabel Edition{get;set;} // optional
		public IfcDate EditionDate{get;set;} // optional
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public IfcURIReference Location{get;set;} // optional
		public List<IfcIdentifier> ReferenceTokens{get;set;} // optional

		/// <summary>
		/// Construct a IfcClassification with all required attributes.
		/// </summary>
		public IfcClassification(IfcLabel name):base()
		{
			Name = name;

		}
		/// <summary>
		/// Construct a IfcClassification with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcClassification(IfcLabel source,IfcLabel edition,IfcDate editionDate,IfcLabel name,IfcText description,IfcURIReference location,List<IfcIdentifier> referenceTokens):base()
		{
			Source = source;
			Edition = edition;
			EditionDate = editionDate;
			Name = name;
			Description = description;
			Location = location;
			ReferenceTokens = new List<IfcIdentifier>();

		}
		public static new IfcClassification FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcClassification>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternalinformation.htm"/>
	/// </summary>
	public abstract partial class IfcExternalInformation : BaseIfc
	{
		/// <summary>
		/// Construct a IfcExternalInformation with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcExternalInformation():base()
		{

		}
		public static  IfcExternalInformation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternalInformation>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcclassificationreference.htm"/>
	/// </summary>
	public  partial class IfcClassificationReference : IfcExternalReference
	{
		public IfcClassificationReferenceSelect ReferencedSource{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcIdentifier Sort{get;set;} // optional

		/// <summary>
		/// Construct a IfcClassificationReference with all required attributes.
		/// </summary>
		public IfcClassificationReference():base()
		{

		}
		/// <summary>
		/// Construct a IfcClassificationReference with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcClassificationReference(IfcURIReference location,IfcIdentifier identification,IfcLabel name,IfcClassificationReferenceSelect referencedSource,IfcText description,IfcIdentifier sort):base(location,identification,name)
		{
			ReferencedSource = referencedSource;
			Description = description;
			Sort = sort;

		}
		public static new IfcClassificationReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcClassificationReference>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternalreference.htm"/>
	/// </summary>
	public abstract partial class IfcExternalReference : BaseIfc
	{
		public IfcURIReference Location{get;set;} // optional
		public IfcIdentifier Identification{get;set;} // optional
		public IfcLabel Name{get;set;} // optional

		/// <summary>
		/// Construct a IfcExternalReference with all required attributes.
		/// </summary>
		public IfcExternalReference():base()
		{

		}
		/// <summary>
		/// Construct a IfcExternalReference with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcExternalReference(IfcURIReference location,IfcIdentifier identification,IfcLabel name):base()
		{
			Location = location;
			Identification = identification;
			Name = name;

		}
		public static  IfcExternalReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternalReference>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcclosedshell.htm"/>
	/// </summary>
	public  partial class IfcClosedShell : IfcConnectedFaceSet
	{
		/// <summary>
		/// Construct a IfcClosedShell with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcClosedShell(List<IfcFace> cfsFaces):base(cfsFaces)
		{

		}
		public static new IfcClosedShell FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcClosedShell>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectedfaceset.htm"/>
	/// </summary>
	public  partial class IfcConnectedFaceSet : IfcTopologicalRepresentationItem
	{
		public List<IfcFace> CfsFaces{get;set;} 

		/// <summary>
		/// Construct a IfcConnectedFaceSet with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConnectedFaceSet(List<IfcFace> cfsFaces):base()
		{
			CfsFaces = cfsFaces;

		}
		public static new IfcConnectedFaceSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectedFaceSet>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoil.htm"/>
	/// </summary>
	public  partial class IfcCoil : IfcEnergyConversionDevice
	{
		public IfcCoilTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcCoil with all required attributes.
		/// </summary>
		public IfcCoil(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCoil with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCoil(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcCoilTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCoil FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoil>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoiltype.htm"/>
	/// </summary>
	public  partial class IfcCoilType : IfcEnergyConversionDeviceType
	{
		public IfcCoilTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcCoilType with all required attributes.
		/// </summary>
		public IfcCoilType(IfcGloballyUniqueId globalId,IfcCoilTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcCoilType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCoilType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcCoilTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCoilType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoilType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolourrgb.htm"/>
	/// </summary>
	public  partial class IfcColourRgb : IfcColourSpecification
	{
		public IfcNormalisedRatioMeasure Red{get;set;} 
		public IfcNormalisedRatioMeasure Green{get;set;} 
		public IfcNormalisedRatioMeasure Blue{get;set;} 

		/// <summary>
		/// Construct a IfcColourRgb with all required attributes.
		/// </summary>
		public IfcColourRgb(IfcNormalisedRatioMeasure red,IfcNormalisedRatioMeasure green,IfcNormalisedRatioMeasure blue):base()
		{
			Red = red;
			Green = green;
			Blue = blue;

		}
		/// <summary>
		/// Construct a IfcColourRgb with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcColourRgb(IfcLabel name,IfcNormalisedRatioMeasure red,IfcNormalisedRatioMeasure green,IfcNormalisedRatioMeasure blue):base(name)
		{
			Red = red;
			Green = green;
			Blue = blue;

		}
		public static new IfcColourRgb FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColourRgb>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolourspecification.htm"/>
	/// </summary>
	public abstract partial class IfcColourSpecification : IfcPresentationItem
	{
		public IfcLabel Name{get;set;} // optional

		/// <summary>
		/// Construct a IfcColourSpecification with all required attributes.
		/// </summary>
		public IfcColourSpecification():base()
		{

		}
		/// <summary>
		/// Construct a IfcColourSpecification with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcColourSpecification(IfcLabel name):base()
		{
			Name = name;

		}
		public static new IfcColourSpecification FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColourSpecification>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolourrgblist.htm"/>
	/// </summary>
	public  partial class IfcColourRgbList : IfcPresentationItem
	{
		public List<List<IfcNormalisedRatioMeasure>> ColourList{get;set;} 

		/// <summary>
		/// Construct a IfcColourRgbList with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcColourRgbList(List<List<IfcNormalisedRatioMeasure>> colourList):base()
		{
			ColourList = colourList;

		}
		public static new IfcColourRgbList FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColourRgbList>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentationitem.htm"/>
	/// </summary>
	public abstract partial class IfcPresentationItem : BaseIfc
	{
		/// <summary>
		/// Construct a IfcPresentationItem with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPresentationItem():base()
		{

		}
		public static  IfcPresentationItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentationItem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolumnstandardcase.htm"/>
	/// </summary>
	public  partial class IfcColumnStandardCase : IfcColumn
	{
		/// <summary>
		/// Construct a IfcColumnStandardCase with all required attributes.
		/// </summary>
		public IfcColumnStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcColumnStandardCase with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcColumnStandardCase(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcColumnTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,predefinedType)
		{

		}
		public static new IfcColumnStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColumnStandardCase>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccommunicationsappliance.htm"/>
	/// </summary>
	public  partial class IfcCommunicationsAppliance : IfcFlowTerminal
	{
		public IfcCommunicationsApplianceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcCommunicationsAppliance with all required attributes.
		/// </summary>
		public IfcCommunicationsAppliance(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCommunicationsAppliance with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCommunicationsAppliance(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcCommunicationsApplianceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCommunicationsAppliance FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCommunicationsAppliance>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccommunicationsappliancetype.htm"/>
	/// </summary>
	public  partial class IfcCommunicationsApplianceType : IfcFlowTerminalType
	{
		public IfcCommunicationsApplianceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcCommunicationsApplianceType with all required attributes.
		/// </summary>
		public IfcCommunicationsApplianceType(IfcGloballyUniqueId globalId,IfcCommunicationsApplianceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcCommunicationsApplianceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCommunicationsApplianceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcCommunicationsApplianceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCommunicationsApplianceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCommunicationsApplianceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccomplexproperty.htm"/>
	/// </summary>
	public  partial class IfcComplexProperty : IfcProperty
	{
		public IfcIdentifier UsageName{get;set;} 
		public List<IfcProperty> HasProperties{get;set;} 

		/// <summary>
		/// Construct a IfcComplexProperty with all required attributes.
		/// </summary>
		public IfcComplexProperty(IfcIdentifier name,IfcIdentifier usageName,List<IfcProperty> hasProperties):base(name)
		{
			UsageName = usageName;
			HasProperties = hasProperties;

		}
		/// <summary>
		/// Construct a IfcComplexProperty with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcComplexProperty(IfcIdentifier name,IfcText description,IfcIdentifier usageName,List<IfcProperty> hasProperties):base(name,description)
		{
			UsageName = usageName;
			HasProperties = hasProperties;

		}
		public static new IfcComplexProperty FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcComplexProperty>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproperty.htm"/>
	/// </summary>
	public abstract partial class IfcProperty : IfcPropertyAbstraction
	{
		public IfcIdentifier Name{get;set;} 
		public IfcText Description{get;set;} // optional

		/// <summary>
		/// Construct a IfcProperty with all required attributes.
		/// </summary>
		public IfcProperty(IfcIdentifier name):base()
		{
			Name = name;

		}
		/// <summary>
		/// Construct a IfcProperty with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProperty(IfcIdentifier name,IfcText description):base()
		{
			Name = name;
			Description = description;

		}
		public static new IfcProperty FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProperty>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccomplexpropertytemplate.htm"/>
	/// </summary>
	public  partial class IfcComplexPropertyTemplate : IfcPropertyTemplate
	{
		public IfcLabel UsageName{get;set;} // optional
		public IfcComplexPropertyTemplateTypeEnum TemplateType{get;set;} // optional
		public List<IfcPropertyTemplate> HasPropertyTemplates{get;set;} // optional

		/// <summary>
		/// Construct a IfcComplexPropertyTemplate with all required attributes.
		/// </summary>
		public IfcComplexPropertyTemplate(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcComplexPropertyTemplate with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcComplexPropertyTemplate(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel usageName,IfcComplexPropertyTemplateTypeEnum templateType,List<IfcPropertyTemplate> hasPropertyTemplates):base(globalId,ownerHistory,name,description)
		{
			UsageName = usageName;
			TemplateType = templateType;
			HasPropertyTemplates = new List<IfcPropertyTemplate>();

		}
		public static new IfcComplexPropertyTemplate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcComplexPropertyTemplate>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertytemplate.htm"/>
	/// </summary>
	public abstract partial class IfcPropertyTemplate : IfcPropertyTemplateDefinition
	{
		/// <summary>
		/// Construct a IfcPropertyTemplate with all required attributes.
		/// </summary>
		public IfcPropertyTemplate(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcPropertyTemplate with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertyTemplate(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description):base(globalId,ownerHistory,name,description)
		{

		}
		public static new IfcPropertyTemplate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyTemplate>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompositecurvesegment.htm"/>
	/// </summary>
	public  partial class IfcCompositeCurveSegment : IfcGeometricRepresentationItem
	{
		public IfcTransitionCode Transition{get;set;} 
		public bool SameSense{get;set;} 
		public IfcCurve ParentCurve{get;set;} 

		/// <summary>
		/// Construct a IfcCompositeCurveSegment with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCompositeCurveSegment(IfcTransitionCode transition,bool sameSense,IfcCurve parentCurve):base()
		{
			Transition = transition;
			SameSense = sameSense;
			ParentCurve = parentCurve;

		}
		public static new IfcCompositeCurveSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompositeCurveSegment>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreparametrisedcompositecurvesegment.htm"/>
	/// </summary>
	public  partial class IfcReparametrisedCompositeCurveSegment : IfcCompositeCurveSegment
	{
		public IfcParameterValue ParamLength{get;set;} 

		/// <summary>
		/// Construct a IfcReparametrisedCompositeCurveSegment with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcReparametrisedCompositeCurveSegment(IfcTransitionCode transition,bool sameSense,IfcCurve parentCurve,IfcParameterValue paramLength):base(transition,sameSense,parentCurve)
		{
			ParamLength = paramLength;

		}
		public static new IfcReparametrisedCompositeCurveSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReparametrisedCompositeCurveSegment>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompositeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcCompositeProfileDef : IfcProfileDef
	{
		public List<IfcProfileDef> Profiles{get;set;} 
		public IfcLabel Label{get;set;} // optional

		/// <summary>
		/// Construct a IfcCompositeProfileDef with all required attributes.
		/// </summary>
		public IfcCompositeProfileDef(IfcProfileTypeEnum profileType,List<IfcProfileDef> profiles):base(profileType)
		{
			Profiles = profiles;

		}
		/// <summary>
		/// Construct a IfcCompositeProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCompositeProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,List<IfcProfileDef> profiles,IfcLabel label):base(profileType,profileName)
		{
			Profiles = profiles;
			Label = label;

		}
		public static new IfcCompositeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompositeProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompressor.htm"/>
	/// </summary>
	public  partial class IfcCompressor : IfcFlowMovingDevice
	{
		public IfcCompressorTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcCompressor with all required attributes.
		/// </summary>
		public IfcCompressor(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCompressor with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCompressor(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcCompressorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCompressor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompressor>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowmovingdevice.htm"/>
	/// </summary>
	public  partial class IfcFlowMovingDevice : IfcDistributionFlowElement
	{
		/// <summary>
		/// Construct a IfcFlowMovingDevice with all required attributes.
		/// </summary>
		public IfcFlowMovingDevice(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowMovingDevice with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowMovingDevice(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcFlowMovingDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowMovingDevice>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompressortype.htm"/>
	/// </summary>
	public  partial class IfcCompressorType : IfcFlowMovingDeviceType
	{
		public IfcCompressorTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcCompressorType with all required attributes.
		/// </summary>
		public IfcCompressorType(IfcGloballyUniqueId globalId,IfcCompressorTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcCompressorType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCompressorType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcCompressorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCompressorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompressorType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowmovingdevicetype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowMovingDeviceType : IfcDistributionFlowElementType
	{
		/// <summary>
		/// Construct a IfcFlowMovingDeviceType with all required attributes.
		/// </summary>
		public IfcFlowMovingDeviceType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowMovingDeviceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowMovingDeviceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcFlowMovingDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowMovingDeviceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccondenser.htm"/>
	/// </summary>
	public  partial class IfcCondenser : IfcEnergyConversionDevice
	{
		public IfcCondenserTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcCondenser with all required attributes.
		/// </summary>
		public IfcCondenser(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCondenser with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCondenser(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcCondenserTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCondenser FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCondenser>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccondensertype.htm"/>
	/// </summary>
	public  partial class IfcCondenserType : IfcEnergyConversionDeviceType
	{
		public IfcCondenserTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcCondenserType with all required attributes.
		/// </summary>
		public IfcCondenserType(IfcGloballyUniqueId globalId,IfcCondenserTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcCondenserType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCondenserType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcCondenserTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCondenserType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCondenserType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcellipse.htm"/>
	/// </summary>
	public  partial class IfcEllipse : IfcConic
	{
		public IfcPositiveLengthMeasure SemiAxis1{get;set;} 
		public IfcPositiveLengthMeasure SemiAxis2{get;set;} 

		/// <summary>
		/// Construct a IfcEllipse with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEllipse(IfcAxis2Placement position,IfcPositiveLengthMeasure semiAxis1,IfcPositiveLengthMeasure semiAxis2):base(position)
		{
			SemiAxis1 = semiAxis1;
			SemiAxis2 = semiAxis2;

		}
		public static new IfcEllipse FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEllipse>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcopenshell.htm"/>
	/// </summary>
	public  partial class IfcOpenShell : IfcConnectedFaceSet
	{
		/// <summary>
		/// Construct a IfcOpenShell with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcOpenShell(List<IfcFace> cfsFaces):base(cfsFaces)
		{

		}
		public static new IfcOpenShell FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOpenShell>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctopologicalrepresentationitem.htm"/>
	/// </summary>
	public abstract partial class IfcTopologicalRepresentationItem : IfcRepresentationItem
	{
		/// <summary>
		/// Construct a IfcTopologicalRepresentationItem with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTopologicalRepresentationItem():base()
		{

		}
		public static new IfcTopologicalRepresentationItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTopologicalRepresentationItem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectioncurvegeometry.htm"/>
	/// </summary>
	public  partial class IfcConnectionCurveGeometry : IfcConnectionGeometry
	{
		public IfcCurveOrEdgeCurve CurveOnRelatingElement{get;set;} 
		public IfcCurveOrEdgeCurve CurveOnRelatedElement{get;set;} // optional

		/// <summary>
		/// Construct a IfcConnectionCurveGeometry with all required attributes.
		/// </summary>
		public IfcConnectionCurveGeometry(IfcCurveOrEdgeCurve curveOnRelatingElement):base()
		{
			CurveOnRelatingElement = curveOnRelatingElement;

		}
		/// <summary>
		/// Construct a IfcConnectionCurveGeometry with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConnectionCurveGeometry(IfcCurveOrEdgeCurve curveOnRelatingElement,IfcCurveOrEdgeCurve curveOnRelatedElement):base()
		{
			CurveOnRelatingElement = curveOnRelatingElement;
			CurveOnRelatedElement = curveOnRelatedElement;

		}
		public static new IfcConnectionCurveGeometry FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectionCurveGeometry>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectiongeometry.htm"/>
	/// </summary>
	public abstract partial class IfcConnectionGeometry : BaseIfc
	{
		/// <summary>
		/// Construct a IfcConnectionGeometry with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConnectionGeometry():base()
		{

		}
		public static  IfcConnectionGeometry FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectionGeometry>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectionpointgeometry.htm"/>
	/// </summary>
	public  partial class IfcConnectionPointGeometry : IfcConnectionGeometry
	{
		public IfcPointOrVertexPoint PointOnRelatingElement{get;set;} 
		public IfcPointOrVertexPoint PointOnRelatedElement{get;set;} // optional

		/// <summary>
		/// Construct a IfcConnectionPointGeometry with all required attributes.
		/// </summary>
		public IfcConnectionPointGeometry(IfcPointOrVertexPoint pointOnRelatingElement):base()
		{
			PointOnRelatingElement = pointOnRelatingElement;

		}
		/// <summary>
		/// Construct a IfcConnectionPointGeometry with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConnectionPointGeometry(IfcPointOrVertexPoint pointOnRelatingElement,IfcPointOrVertexPoint pointOnRelatedElement):base()
		{
			PointOnRelatingElement = pointOnRelatingElement;
			PointOnRelatedElement = pointOnRelatedElement;

		}
		public static new IfcConnectionPointGeometry FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectionPointGeometry>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectionsurfacegeometry.htm"/>
	/// </summary>
	public  partial class IfcConnectionSurfaceGeometry : IfcConnectionGeometry
	{
		public IfcSurfaceOrFaceSurface SurfaceOnRelatingElement{get;set;} 
		public IfcSurfaceOrFaceSurface SurfaceOnRelatedElement{get;set;} // optional

		/// <summary>
		/// Construct a IfcConnectionSurfaceGeometry with all required attributes.
		/// </summary>
		public IfcConnectionSurfaceGeometry(IfcSurfaceOrFaceSurface surfaceOnRelatingElement):base()
		{
			SurfaceOnRelatingElement = surfaceOnRelatingElement;

		}
		/// <summary>
		/// Construct a IfcConnectionSurfaceGeometry with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConnectionSurfaceGeometry(IfcSurfaceOrFaceSurface surfaceOnRelatingElement,IfcSurfaceOrFaceSurface surfaceOnRelatedElement):base()
		{
			SurfaceOnRelatingElement = surfaceOnRelatingElement;
			SurfaceOnRelatedElement = surfaceOnRelatedElement;

		}
		public static new IfcConnectionSurfaceGeometry FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectionSurfaceGeometry>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectionvolumegeometry.htm"/>
	/// </summary>
	public  partial class IfcConnectionVolumeGeometry : IfcConnectionGeometry
	{
		public IfcSolidOrShell VolumeOnRelatingElement{get;set;} 
		public IfcSolidOrShell VolumeOnRelatedElement{get;set;} // optional

		/// <summary>
		/// Construct a IfcConnectionVolumeGeometry with all required attributes.
		/// </summary>
		public IfcConnectionVolumeGeometry(IfcSolidOrShell volumeOnRelatingElement):base()
		{
			VolumeOnRelatingElement = volumeOnRelatingElement;

		}
		/// <summary>
		/// Construct a IfcConnectionVolumeGeometry with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConnectionVolumeGeometry(IfcSolidOrShell volumeOnRelatingElement,IfcSolidOrShell volumeOnRelatedElement):base()
		{
			VolumeOnRelatingElement = volumeOnRelatingElement;
			VolumeOnRelatedElement = volumeOnRelatedElement;

		}
		public static new IfcConnectionVolumeGeometry FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectionVolumeGeometry>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectionpointeccentricity.htm"/>
	/// </summary>
	public  partial class IfcConnectionPointEccentricity : IfcConnectionPointGeometry
	{
		public IfcLengthMeasure EccentricityInX{get;set;} // optional
		public IfcLengthMeasure EccentricityInY{get;set;} // optional
		public IfcLengthMeasure EccentricityInZ{get;set;} // optional

		/// <summary>
		/// Construct a IfcConnectionPointEccentricity with all required attributes.
		/// </summary>
		public IfcConnectionPointEccentricity(IfcPointOrVertexPoint pointOnRelatingElement):base(pointOnRelatingElement)
		{

		}
		/// <summary>
		/// Construct a IfcConnectionPointEccentricity with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConnectionPointEccentricity(IfcPointOrVertexPoint pointOnRelatingElement,IfcPointOrVertexPoint pointOnRelatedElement,IfcLengthMeasure eccentricityInX,IfcLengthMeasure eccentricityInY,IfcLengthMeasure eccentricityInZ):base(pointOnRelatingElement,pointOnRelatedElement)
		{
			EccentricityInX = eccentricityInX;
			EccentricityInY = eccentricityInY;
			EccentricityInZ = eccentricityInZ;

		}
		public static new IfcConnectionPointEccentricity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectionPointEccentricity>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstraint.htm"/>
	/// </summary>
	public abstract partial class IfcConstraint : BaseIfc
	{
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public IfcConstraintEnum ConstraintGrade{get;set;} 
		public IfcLabel ConstraintSource{get;set;} // optional
		public IfcActorSelect CreatingActor{get;set;} // optional
		public IfcDateTime CreationTime{get;set;} // optional
		public IfcLabel UserDefinedGrade{get;set;} // optional

		/// <summary>
		/// Construct a IfcConstraint with all required attributes.
		/// </summary>
		public IfcConstraint(IfcLabel name,IfcConstraintEnum constraintGrade):base()
		{
			Name = name;
			ConstraintGrade = constraintGrade;

		}
		/// <summary>
		/// Construct a IfcConstraint with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConstraint(IfcLabel name,IfcText description,IfcConstraintEnum constraintGrade,IfcLabel constraintSource,IfcActorSelect creatingActor,IfcDateTime creationTime,IfcLabel userDefinedGrade):base()
		{
			Name = name;
			Description = description;
			ConstraintGrade = constraintGrade;
			ConstraintSource = constraintSource;
			CreatingActor = creatingActor;
			CreationTime = creationTime;
			UserDefinedGrade = userDefinedGrade;

		}
		public static  IfcConstraint FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstraint>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmetric.htm"/>
	/// </summary>
	public  partial class IfcMetric : IfcConstraint
	{
		public IfcBenchmarkEnum Benchmark{get;set;} 
		public IfcLabel ValueSource{get;set;} // optional
		public IfcMetricValueSelect DataValue{get;set;} 
		public IfcReference ReferencePath{get;set;} // optional

		/// <summary>
		/// Construct a IfcMetric with all required attributes.
		/// </summary>
		public IfcMetric(IfcLabel name,IfcConstraintEnum constraintGrade,IfcBenchmarkEnum benchmark,IfcMetricValueSelect dataValue):base(name,constraintGrade)
		{
			Benchmark = benchmark;
			DataValue = dataValue;

		}
		/// <summary>
		/// Construct a IfcMetric with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMetric(IfcLabel name,IfcText description,IfcConstraintEnum constraintGrade,IfcLabel constraintSource,IfcActorSelect creatingActor,IfcDateTime creationTime,IfcLabel userDefinedGrade,IfcBenchmarkEnum benchmark,IfcLabel valueSource,IfcMetricValueSelect dataValue,IfcReference referencePath):base(name,description,constraintGrade,constraintSource,creatingActor,creationTime,userDefinedGrade)
		{
			Benchmark = benchmark;
			ValueSource = valueSource;
			DataValue = dataValue;
			ReferencePath = referencePath;

		}
		public static new IfcMetric FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMetric>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobjective.htm"/>
	/// </summary>
	public  partial class IfcObjective : IfcConstraint
	{
		public List<IfcConstraint> BenchmarkValues{get;set;} // optional
		public IfcLogicalOperatorEnum LogicalAggregator{get;set;} // optional
		public IfcObjectiveEnum ObjectiveQualifier{get;set;} 
		public IfcLabel UserDefinedQualifier{get;set;} // optional

		/// <summary>
		/// Construct a IfcObjective with all required attributes.
		/// </summary>
		public IfcObjective(IfcLabel name,IfcConstraintEnum constraintGrade,IfcObjectiveEnum objectiveQualifier):base(name,constraintGrade)
		{
			ObjectiveQualifier = objectiveQualifier;

		}
		/// <summary>
		/// Construct a IfcObjective with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcObjective(IfcLabel name,IfcText description,IfcConstraintEnum constraintGrade,IfcLabel constraintSource,IfcActorSelect creatingActor,IfcDateTime creationTime,IfcLabel userDefinedGrade,List<IfcConstraint> benchmarkValues,IfcLogicalOperatorEnum logicalAggregator,IfcObjectiveEnum objectiveQualifier,IfcLabel userDefinedQualifier):base(name,description,constraintGrade,constraintSource,creatingActor,creationTime,userDefinedGrade)
		{
			BenchmarkValues = new List<IfcConstraint>();
			LogicalAggregator = logicalAggregator;
			ObjectiveQualifier = objectiveQualifier;
			UserDefinedQualifier = userDefinedQualifier;

		}
		public static new IfcObjective FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcObjective>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionequipmentresource.htm"/>
	/// </summary>
	public  partial class IfcConstructionEquipmentResource : IfcConstructionResource
	{
		public IfcConstructionEquipmentResourceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcConstructionEquipmentResource with all required attributes.
		/// </summary>
		public IfcConstructionEquipmentResource(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcConstructionEquipmentResource with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConstructionEquipmentResource(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcText longDescription,IfcResourceTime usage,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity,IfcConstructionEquipmentResourceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,identification,longDescription,usage,baseCosts,baseQuantity)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcConstructionEquipmentResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionEquipmentResource>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionresource.htm"/>
	/// </summary>
	public abstract partial class IfcConstructionResource : IfcResource
	{
		public IfcResourceTime Usage{get;set;} // optional
		public List<IfcAppliedValue> BaseCosts{get;set;} // optional
		public IfcPhysicalQuantity BaseQuantity{get;set;} // optional

		/// <summary>
		/// Construct a IfcConstructionResource with all required attributes.
		/// </summary>
		public IfcConstructionResource(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcConstructionResource with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConstructionResource(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcText longDescription,IfcResourceTime usage,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity):base(globalId,ownerHistory,name,description,objectType,identification,longDescription)
		{
			Usage = usage;
			BaseCosts = new List<IfcAppliedValue>();
			BaseQuantity = baseQuantity;

		}
		public static new IfcConstructionResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionResource>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionequipmentresourcetype.htm"/>
	/// </summary>
	public  partial class IfcConstructionEquipmentResourceType : IfcConstructionResourceType
	{
		public IfcConstructionEquipmentResourceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcConstructionEquipmentResourceType with all required attributes.
		/// </summary>
		public IfcConstructionEquipmentResourceType(IfcGloballyUniqueId globalId,IfcConstructionEquipmentResourceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcConstructionEquipmentResourceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConstructionEquipmentResourceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,IfcIdentifier identification,IfcText longDescription,IfcLabel resourceType,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity,IfcConstructionEquipmentResourceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,identification,longDescription,resourceType,baseCosts,baseQuantity)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcConstructionEquipmentResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionEquipmentResourceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionresourcetype.htm"/>
	/// </summary>
	public abstract partial class IfcConstructionResourceType : IfcTypeResource
	{
		public List<IfcAppliedValue> BaseCosts{get;set;} // optional
		public IfcPhysicalQuantity BaseQuantity{get;set;} // optional

		/// <summary>
		/// Construct a IfcConstructionResourceType with all required attributes.
		/// </summary>
		public IfcConstructionResourceType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcConstructionResourceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConstructionResourceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,IfcIdentifier identification,IfcText longDescription,IfcLabel resourceType,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,identification,longDescription,resourceType)
		{
			BaseCosts = new List<IfcAppliedValue>();
			BaseQuantity = baseQuantity;

		}
		public static new IfcConstructionResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionResourceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionmaterialresource.htm"/>
	/// </summary>
	public  partial class IfcConstructionMaterialResource : IfcConstructionResource
	{
		public IfcConstructionMaterialResourceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcConstructionMaterialResource with all required attributes.
		/// </summary>
		public IfcConstructionMaterialResource(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcConstructionMaterialResource with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConstructionMaterialResource(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcText longDescription,IfcResourceTime usage,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity,IfcConstructionMaterialResourceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,identification,longDescription,usage,baseCosts,baseQuantity)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcConstructionMaterialResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionMaterialResource>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionmaterialresourcetype.htm"/>
	/// </summary>
	public  partial class IfcConstructionMaterialResourceType : IfcConstructionResourceType
	{
		public IfcConstructionMaterialResourceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcConstructionMaterialResourceType with all required attributes.
		/// </summary>
		public IfcConstructionMaterialResourceType(IfcGloballyUniqueId globalId,IfcConstructionMaterialResourceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcConstructionMaterialResourceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConstructionMaterialResourceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,IfcIdentifier identification,IfcText longDescription,IfcLabel resourceType,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity,IfcConstructionMaterialResourceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,identification,longDescription,resourceType,baseCosts,baseQuantity)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcConstructionMaterialResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionMaterialResourceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionproductresource.htm"/>
	/// </summary>
	public  partial class IfcConstructionProductResource : IfcConstructionResource
	{
		public IfcConstructionProductResourceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcConstructionProductResource with all required attributes.
		/// </summary>
		public IfcConstructionProductResource(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcConstructionProductResource with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConstructionProductResource(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcText longDescription,IfcResourceTime usage,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity,IfcConstructionProductResourceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,identification,longDescription,usage,baseCosts,baseQuantity)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcConstructionProductResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionProductResource>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionproductresourcetype.htm"/>
	/// </summary>
	public  partial class IfcConstructionProductResourceType : IfcConstructionResourceType
	{
		public IfcConstructionProductResourceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcConstructionProductResourceType with all required attributes.
		/// </summary>
		public IfcConstructionProductResourceType(IfcGloballyUniqueId globalId,IfcConstructionProductResourceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcConstructionProductResourceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConstructionProductResourceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,IfcIdentifier identification,IfcText longDescription,IfcLabel resourceType,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity,IfcConstructionProductResourceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,identification,longDescription,resourceType,baseCosts,baseQuantity)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcConstructionProductResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionProductResourceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccrewresource.htm"/>
	/// </summary>
	public  partial class IfcCrewResource : IfcConstructionResource
	{
		public IfcCrewResourceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcCrewResource with all required attributes.
		/// </summary>
		public IfcCrewResource(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCrewResource with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCrewResource(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcText longDescription,IfcResourceTime usage,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity,IfcCrewResourceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,identification,longDescription,usage,baseCosts,baseQuantity)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCrewResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCrewResource>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclaborresource.htm"/>
	/// </summary>
	public  partial class IfcLaborResource : IfcConstructionResource
	{
		public IfcLaborResourceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcLaborResource with all required attributes.
		/// </summary>
		public IfcLaborResource(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcLaborResource with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLaborResource(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcText longDescription,IfcResourceTime usage,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity,IfcLaborResourceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,identification,longDescription,usage,baseCosts,baseQuantity)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcLaborResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLaborResource>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsubcontractresource.htm"/>
	/// </summary>
	public  partial class IfcSubContractResource : IfcConstructionResource
	{
		public IfcSubContractResourceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcSubContractResource with all required attributes.
		/// </summary>
		public IfcSubContractResource(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSubContractResource with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSubContractResource(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcText longDescription,IfcResourceTime usage,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity,IfcSubContractResourceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,identification,longDescription,usage,baseCosts,baseQuantity)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSubContractResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSubContractResource>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresource.htm"/>
	/// </summary>
	public abstract partial class IfcResource : IfcObject
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional

		/// <summary>
		/// Construct a IfcResource with all required attributes.
		/// </summary>
		public IfcResource(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcResource with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcResource(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcText longDescription):base(globalId,ownerHistory,name,description,objectType)
		{
			Identification = identification;
			LongDescription = longDescription;

		}
		public static new IfcResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResource>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccrewresourcetype.htm"/>
	/// </summary>
	public  partial class IfcCrewResourceType : IfcConstructionResourceType
	{
		public IfcCrewResourceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcCrewResourceType with all required attributes.
		/// </summary>
		public IfcCrewResourceType(IfcGloballyUniqueId globalId,IfcCrewResourceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcCrewResourceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCrewResourceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,IfcIdentifier identification,IfcText longDescription,IfcLabel resourceType,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity,IfcCrewResourceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,identification,longDescription,resourceType,baseCosts,baseQuantity)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCrewResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCrewResourceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclaborresourcetype.htm"/>
	/// </summary>
	public  partial class IfcLaborResourceType : IfcConstructionResourceType
	{
		public IfcLaborResourceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcLaborResourceType with all required attributes.
		/// </summary>
		public IfcLaborResourceType(IfcGloballyUniqueId globalId,IfcLaborResourceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcLaborResourceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLaborResourceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,IfcIdentifier identification,IfcText longDescription,IfcLabel resourceType,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity,IfcLaborResourceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,identification,longDescription,resourceType,baseCosts,baseQuantity)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcLaborResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLaborResourceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsubcontractresourcetype.htm"/>
	/// </summary>
	public  partial class IfcSubContractResourceType : IfcConstructionResourceType
	{
		public IfcSubContractResourceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcSubContractResourceType with all required attributes.
		/// </summary>
		public IfcSubContractResourceType(IfcGloballyUniqueId globalId,IfcSubContractResourceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcSubContractResourceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSubContractResourceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,IfcIdentifier identification,IfcText longDescription,IfcLabel resourceType,List<IfcAppliedValue> baseCosts,IfcPhysicalQuantity baseQuantity,IfcSubContractResourceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,identification,longDescription,resourceType,baseCosts,baseQuantity)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSubContractResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSubContractResourceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctyperesource.htm"/>
	/// </summary>
	public abstract partial class IfcTypeResource : IfcTypeObject
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional
		public IfcLabel ResourceType{get;set;} // optional

		/// <summary>
		/// Construct a IfcTypeResource with all required attributes.
		/// </summary>
		public IfcTypeResource(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcTypeResource with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTypeResource(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,IfcIdentifier identification,IfcText longDescription,IfcLabel resourceType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets)
		{
			Identification = identification;
			LongDescription = longDescription;
			ResourceType = resourceType;

		}
		public static new IfcTypeResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTypeResource>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontext.htm"/>
	/// </summary>
	public abstract partial class IfcContext : IfcObjectDefinition
	{
		public IfcLabel ObjectType{get;set;} // optional
		public IfcLabel LongName{get;set;} // optional
		public IfcLabel Phase{get;set;} // optional
		public List<IfcRepresentationContext> RepresentationContexts{get;set;} // optional
		public IfcUnitAssignment UnitsInContext{get;set;} // optional

		/// <summary>
		/// Construct a IfcContext with all required attributes.
		/// </summary>
		public IfcContext(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcContext with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcContext(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcLabel longName,IfcLabel phase,List<IfcRepresentationContext> representationContexts,IfcUnitAssignment unitsInContext):base(globalId,ownerHistory,name,description)
		{
			ObjectType = objectType;
			LongName = longName;
			Phase = phase;
			RepresentationContexts = new List<IfcRepresentationContext>();
			UnitsInContext = unitsInContext;

		}
		public static new IfcContext FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcContext>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproject.htm"/>
	/// </summary>
	public  partial class IfcProject : IfcContext
	{
		/// <summary>
		/// Construct a IfcProject with all required attributes.
		/// </summary>
		public IfcProject(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcProject with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProject(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcLabel longName,IfcLabel phase,List<IfcRepresentationContext> representationContexts,IfcUnitAssignment unitsInContext):base(globalId,ownerHistory,name,description,objectType,longName,phase,representationContexts,unitsInContext)
		{

		}
		public static new IfcProject FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProject>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectlibrary.htm"/>
	/// </summary>
	public  partial class IfcProjectLibrary : IfcContext
	{
		/// <summary>
		/// Construct a IfcProjectLibrary with all required attributes.
		/// </summary>
		public IfcProjectLibrary(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcProjectLibrary with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProjectLibrary(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcLabel longName,IfcLabel phase,List<IfcRepresentationContext> representationContexts,IfcUnitAssignment unitsInContext):base(globalId,ownerHistory,name,description,objectType,longName,phase,representationContexts,unitsInContext)
		{

		}
		public static new IfcProjectLibrary FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProjectLibrary>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobjectdefinition.htm"/>
	/// </summary>
	public abstract partial class IfcObjectDefinition : IfcRoot
	{
		/// <summary>
		/// Construct a IfcObjectDefinition with all required attributes.
		/// </summary>
		public IfcObjectDefinition(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcObjectDefinition with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcObjectDefinition(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description):base(globalId,ownerHistory,name,description)
		{

		}
		public static new IfcObjectDefinition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcObjectDefinition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontextdependentunit.htm"/>
	/// </summary>
	public  partial class IfcContextDependentUnit : IfcNamedUnit
	{
		public IfcLabel Name{get;set;} 

		/// <summary>
		/// Construct a IfcContextDependentUnit with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcContextDependentUnit(IfcDimensionalExponents dimensions,IfcUnitEnum unitType,IfcLabel name):base(dimensions,unitType)
		{
			Name = name;

		}
		public static new IfcContextDependentUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcContextDependentUnit>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcnamedunit.htm"/>
	/// </summary>
	public abstract partial class IfcNamedUnit : BaseIfc
	{
		public IfcDimensionalExponents Dimensions{get;set;} 
		public IfcUnitEnum UnitType{get;set;} 

		/// <summary>
		/// Construct a IfcNamedUnit with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcNamedUnit(IfcDimensionalExponents dimensions,IfcUnitEnum unitType):base()
		{
			Dimensions = dimensions;
			UnitType = unitType;

		}
		public static  IfcNamedUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcNamedUnit>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccostitem.htm"/>
	/// </summary>
	public  partial class IfcCostItem : IfcControl
	{
		public IfcCostItemTypeEnum PredefinedType{get;set;} // optional
		public List<IfcCostValue> CostValues{get;set;} // optional
		public List<IfcPhysicalQuantity> CostQuantities{get;set;} // optional

		/// <summary>
		/// Construct a IfcCostItem with all required attributes.
		/// </summary>
		public IfcCostItem(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCostItem with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCostItem(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcCostItemTypeEnum predefinedType,List<IfcCostValue> costValues,List<IfcPhysicalQuantity> costQuantities):base(globalId,ownerHistory,name,description,objectType,identification)
		{
			PredefinedType = predefinedType;
			CostValues = new List<IfcCostValue>();
			CostQuantities = new List<IfcPhysicalQuantity>();

		}
		public static new IfcCostItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCostItem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccostschedule.htm"/>
	/// </summary>
	public  partial class IfcCostSchedule : IfcControl
	{
		public IfcCostScheduleTypeEnum PredefinedType{get;set;} // optional
		public IfcLabel Status{get;set;} // optional
		public IfcDateTime SubmittedOn{get;set;} // optional
		public IfcDateTime UpdateDate{get;set;} // optional

		/// <summary>
		/// Construct a IfcCostSchedule with all required attributes.
		/// </summary>
		public IfcCostSchedule(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCostSchedule with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCostSchedule(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcCostScheduleTypeEnum predefinedType,IfcLabel status,IfcDateTime submittedOn,IfcDateTime updateDate):base(globalId,ownerHistory,name,description,objectType,identification)
		{
			PredefinedType = predefinedType;
			Status = status;
			SubmittedOn = submittedOn;
			UpdateDate = updateDate;

		}
		public static new IfcCostSchedule FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCostSchedule>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcperformancehistory.htm"/>
	/// </summary>
	public  partial class IfcPerformanceHistory : IfcControl
	{
		public IfcLabel LifeCyclePhase{get;set;} 
		public IfcPerformanceHistoryTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcPerformanceHistory with all required attributes.
		/// </summary>
		public IfcPerformanceHistory(IfcGloballyUniqueId globalId,IfcLabel lifeCyclePhase):base(globalId)
		{
			LifeCyclePhase = lifeCyclePhase;

		}
		/// <summary>
		/// Construct a IfcPerformanceHistory with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPerformanceHistory(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcLabel lifeCyclePhase,IfcPerformanceHistoryTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,identification)
		{
			LifeCyclePhase = lifeCyclePhase;
			PredefinedType = predefinedType;

		}
		public static new IfcPerformanceHistory FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPerformanceHistory>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpermit.htm"/>
	/// </summary>
	public  partial class IfcPermit : IfcControl
	{
		public IfcPermitTypeEnum PredefinedType{get;set;} // optional
		public IfcLabel Status{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional

		/// <summary>
		/// Construct a IfcPermit with all required attributes.
		/// </summary>
		public IfcPermit(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcPermit with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPermit(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcPermitTypeEnum predefinedType,IfcLabel status,IfcText longDescription):base(globalId,ownerHistory,name,description,objectType,identification)
		{
			PredefinedType = predefinedType;
			Status = status;
			LongDescription = longDescription;

		}
		public static new IfcPermit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPermit>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectorder.htm"/>
	/// </summary>
	public  partial class IfcProjectOrder : IfcControl
	{
		public IfcProjectOrderTypeEnum PredefinedType{get;set;} // optional
		public IfcLabel Status{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional

		/// <summary>
		/// Construct a IfcProjectOrder with all required attributes.
		/// </summary>
		public IfcProjectOrder(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcProjectOrder with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProjectOrder(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcProjectOrderTypeEnum predefinedType,IfcLabel status,IfcText longDescription):base(globalId,ownerHistory,name,description,objectType,identification)
		{
			PredefinedType = predefinedType;
			Status = status;
			LongDescription = longDescription;

		}
		public static new IfcProjectOrder FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProjectOrder>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkcalendar.htm"/>
	/// </summary>
	public  partial class IfcWorkCalendar : IfcControl
	{
		public List<IfcWorkTime> WorkingTimes{get;set;} // optional
		public List<IfcWorkTime> ExceptionTimes{get;set;} // optional
		public IfcWorkCalendarTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcWorkCalendar with all required attributes.
		/// </summary>
		public IfcWorkCalendar(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcWorkCalendar with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWorkCalendar(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,List<IfcWorkTime> workingTimes,List<IfcWorkTime> exceptionTimes,IfcWorkCalendarTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,identification)
		{
			WorkingTimes = new List<IfcWorkTime>();
			ExceptionTimes = new List<IfcWorkTime>();
			PredefinedType = predefinedType;

		}
		public static new IfcWorkCalendar FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWorkCalendar>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkcontrol.htm"/>
	/// </summary>
	public abstract partial class IfcWorkControl : IfcControl
	{
		public IfcDateTime CreationDate{get;set;} 
		public List<IfcPerson> Creators{get;set;} // optional
		public IfcLabel Purpose{get;set;} // optional
		public IfcDuration Duration{get;set;} // optional
		public IfcDuration TotalFloat{get;set;} // optional
		public IfcDateTime StartTime{get;set;} 
		public IfcDateTime FinishTime{get;set;} // optional

		/// <summary>
		/// Construct a IfcWorkControl with all required attributes.
		/// </summary>
		public IfcWorkControl(IfcGloballyUniqueId globalId,IfcDateTime creationDate,IfcDateTime startTime):base(globalId)
		{
			CreationDate = creationDate;
			StartTime = startTime;

		}
		/// <summary>
		/// Construct a IfcWorkControl with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWorkControl(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcDateTime creationDate,List<IfcPerson> creators,IfcLabel purpose,IfcDuration duration,IfcDuration totalFloat,IfcDateTime startTime,IfcDateTime finishTime):base(globalId,ownerHistory,name,description,objectType,identification)
		{
			CreationDate = creationDate;
			Creators = new List<IfcPerson>();
			Purpose = purpose;
			Duration = duration;
			TotalFloat = totalFloat;
			StartTime = startTime;
			FinishTime = finishTime;

		}
		public static new IfcWorkControl FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWorkControl>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontroller.htm"/>
	/// </summary>
	public  partial class IfcController : IfcDistributionControlElement
	{
		public IfcControllerTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcController with all required attributes.
		/// </summary>
		public IfcController(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcController with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcController(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcControllerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcController FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcController>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontrollertype.htm"/>
	/// </summary>
	public  partial class IfcControllerType : IfcDistributionControlElementType
	{
		public IfcControllerTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcControllerType with all required attributes.
		/// </summary>
		public IfcControllerType(IfcGloballyUniqueId globalId,IfcControllerTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcControllerType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcControllerType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcControllerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcControllerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcControllerType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconversionbasedunit.htm"/>
	/// </summary>
	public  partial class IfcConversionBasedUnit : IfcNamedUnit
	{
		public IfcLabel Name{get;set;} 
		public IfcMeasureWithUnit ConversionFactor{get;set;} 

		/// <summary>
		/// Construct a IfcConversionBasedUnit with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConversionBasedUnit(IfcDimensionalExponents dimensions,IfcUnitEnum unitType,IfcLabel name,IfcMeasureWithUnit conversionFactor):base(dimensions,unitType)
		{
			Name = name;
			ConversionFactor = conversionFactor;

		}
		public static new IfcConversionBasedUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConversionBasedUnit>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconversionbasedunitwithoffset.htm"/>
	/// </summary>
	public  partial class IfcConversionBasedUnitWithOffset : IfcConversionBasedUnit
	{
		public IfcReal ConversionOffset{get;set;} 

		/// <summary>
		/// Construct a IfcConversionBasedUnitWithOffset with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcConversionBasedUnitWithOffset(IfcDimensionalExponents dimensions,IfcUnitEnum unitType,IfcLabel name,IfcMeasureWithUnit conversionFactor,IfcReal conversionOffset):base(dimensions,unitType,name,conversionFactor)
		{
			ConversionOffset = conversionOffset;

		}
		public static new IfcConversionBasedUnitWithOffset FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConversionBasedUnitWithOffset>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccooledbeam.htm"/>
	/// </summary>
	public  partial class IfcCooledBeam : IfcEnergyConversionDevice
	{
		public IfcCooledBeamTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcCooledBeam with all required attributes.
		/// </summary>
		public IfcCooledBeam(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCooledBeam with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCooledBeam(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcCooledBeamTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCooledBeam FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCooledBeam>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccooledbeamtype.htm"/>
	/// </summary>
	public  partial class IfcCooledBeamType : IfcEnergyConversionDeviceType
	{
		public IfcCooledBeamTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcCooledBeamType with all required attributes.
		/// </summary>
		public IfcCooledBeamType(IfcGloballyUniqueId globalId,IfcCooledBeamTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcCooledBeamType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCooledBeamType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcCooledBeamTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCooledBeamType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCooledBeamType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoolingtower.htm"/>
	/// </summary>
	public  partial class IfcCoolingTower : IfcEnergyConversionDevice
	{
		public IfcCoolingTowerTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcCoolingTower with all required attributes.
		/// </summary>
		public IfcCoolingTower(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcCoolingTower with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCoolingTower(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcCoolingTowerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCoolingTower FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoolingTower>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoolingtowertype.htm"/>
	/// </summary>
	public  partial class IfcCoolingTowerType : IfcEnergyConversionDeviceType
	{
		public IfcCoolingTowerTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcCoolingTowerType with all required attributes.
		/// </summary>
		public IfcCoolingTowerType(IfcGloballyUniqueId globalId,IfcCoolingTowerTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcCoolingTowerType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCoolingTowerType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcCoolingTowerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcCoolingTowerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoolingTowerType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoordinateoperation.htm"/>
	/// </summary>
	public abstract partial class IfcCoordinateOperation : BaseIfc
	{
		public IfcCoordinateReferenceSystemSelect SourceCRS{get;set;} 
		public IfcCoordinateReferenceSystem TargetCRS{get;set;} 

		/// <summary>
		/// Construct a IfcCoordinateOperation with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCoordinateOperation(IfcCoordinateReferenceSystemSelect sourceCRS,IfcCoordinateReferenceSystem targetCRS):base()
		{
			SourceCRS = sourceCRS;
			TargetCRS = targetCRS;

		}
		public static  IfcCoordinateOperation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoordinateOperation>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmapconversion.htm"/>
	/// </summary>
	public  partial class IfcMapConversion : IfcCoordinateOperation
	{
		public IfcLengthMeasure Eastings{get;set;} 
		public IfcLengthMeasure Northings{get;set;} 
		public IfcLengthMeasure OrthogonalHeight{get;set;} 
		public IfcReal XAxisAbscissa{get;set;} // optional
		public IfcReal XAxisOrdinate{get;set;} // optional
		public IfcReal Scale{get;set;} // optional

		/// <summary>
		/// Construct a IfcMapConversion with all required attributes.
		/// </summary>
		public IfcMapConversion(IfcCoordinateReferenceSystemSelect sourceCRS,IfcCoordinateReferenceSystem targetCRS,IfcLengthMeasure eastings,IfcLengthMeasure northings,IfcLengthMeasure orthogonalHeight):base(sourceCRS,targetCRS)
		{
			Eastings = eastings;
			Northings = northings;
			OrthogonalHeight = orthogonalHeight;

		}
		/// <summary>
		/// Construct a IfcMapConversion with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMapConversion(IfcCoordinateReferenceSystemSelect sourceCRS,IfcCoordinateReferenceSystem targetCRS,IfcLengthMeasure eastings,IfcLengthMeasure northings,IfcLengthMeasure orthogonalHeight,IfcReal xAxisAbscissa,IfcReal xAxisOrdinate,IfcReal scale):base(sourceCRS,targetCRS)
		{
			Eastings = eastings;
			Northings = northings;
			OrthogonalHeight = orthogonalHeight;
			XAxisAbscissa = xAxisAbscissa;
			XAxisOrdinate = xAxisOrdinate;
			Scale = scale;

		}
		public static new IfcMapConversion FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMapConversion>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoordinatereferencesystem.htm"/>
	/// </summary>
	public abstract partial class IfcCoordinateReferenceSystem : BaseIfc
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcIdentifier GeodeticDatum{get;set;} 
		public IfcIdentifier VerticalDatum{get;set;} // optional

		/// <summary>
		/// Construct a IfcCoordinateReferenceSystem with all required attributes.
		/// </summary>
		public IfcCoordinateReferenceSystem(IfcIdentifier geodeticDatum):base()
		{
			GeodeticDatum = geodeticDatum;

		}
		/// <summary>
		/// Construct a IfcCoordinateReferenceSystem with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCoordinateReferenceSystem(IfcLabel name,IfcText description,IfcIdentifier geodeticDatum,IfcIdentifier verticalDatum):base()
		{
			Name = name;
			Description = description;
			GeodeticDatum = geodeticDatum;
			VerticalDatum = verticalDatum;

		}
		public static  IfcCoordinateReferenceSystem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoordinateReferenceSystem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectedcrs.htm"/>
	/// </summary>
	public  partial class IfcProjectedCRS : IfcCoordinateReferenceSystem
	{
		public IfcIdentifier MapProjection{get;set;} // optional
		public IfcIdentifier MapZone{get;set;} // optional
		public IfcNamedUnit MapUnit{get;set;} // optional

		/// <summary>
		/// Construct a IfcProjectedCRS with all required attributes.
		/// </summary>
		public IfcProjectedCRS(IfcIdentifier geodeticDatum):base(geodeticDatum)
		{

		}
		/// <summary>
		/// Construct a IfcProjectedCRS with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProjectedCRS(IfcLabel name,IfcText description,IfcIdentifier geodeticDatum,IfcIdentifier verticalDatum,IfcIdentifier mapProjection,IfcIdentifier mapZone,IfcNamedUnit mapUnit):base(name,description,geodeticDatum,verticalDatum)
		{
			MapProjection = mapProjection;
			MapZone = mapZone;
			MapUnit = mapUnit;

		}
		public static new IfcProjectedCRS FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProjectedCRS>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrectangularpyramid.htm"/>
	/// </summary>
	public  partial class IfcRectangularPyramid : IfcCsgPrimitive3D
	{
		public IfcPositiveLengthMeasure XLength{get;set;} 
		public IfcPositiveLengthMeasure YLength{get;set;} 
		public IfcPositiveLengthMeasure Height{get;set;} 

		/// <summary>
		/// Construct a IfcRectangularPyramid with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRectangularPyramid(IfcAxis2Placement3D position,IfcPositiveLengthMeasure xLength,IfcPositiveLengthMeasure yLength,IfcPositiveLengthMeasure height):base(position)
		{
			XLength = xLength;
			YLength = yLength;
			Height = height;

		}
		public static new IfcRectangularPyramid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRectangularPyramid>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrightcircularcone.htm"/>
	/// </summary>
	public  partial class IfcRightCircularCone : IfcCsgPrimitive3D
	{
		public IfcPositiveLengthMeasure Height{get;set;} 
		public IfcPositiveLengthMeasure BottomRadius{get;set;} 

		/// <summary>
		/// Construct a IfcRightCircularCone with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRightCircularCone(IfcAxis2Placement3D position,IfcPositiveLengthMeasure height,IfcPositiveLengthMeasure bottomRadius):base(position)
		{
			Height = height;
			BottomRadius = bottomRadius;

		}
		public static new IfcRightCircularCone FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRightCircularCone>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrightcircularcylinder.htm"/>
	/// </summary>
	public  partial class IfcRightCircularCylinder : IfcCsgPrimitive3D
	{
		public IfcPositiveLengthMeasure Height{get;set;} 
		public IfcPositiveLengthMeasure Radius{get;set;} 

		/// <summary>
		/// Construct a IfcRightCircularCylinder with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRightCircularCylinder(IfcAxis2Placement3D position,IfcPositiveLengthMeasure height,IfcPositiveLengthMeasure radius):base(position)
		{
			Height = height;
			Radius = radius;

		}
		public static new IfcRightCircularCylinder FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRightCircularCylinder>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsphere.htm"/>
	/// </summary>
	public  partial class IfcSphere : IfcCsgPrimitive3D
	{
		public IfcPositiveLengthMeasure Radius{get;set;} 

		/// <summary>
		/// Construct a IfcSphere with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSphere(IfcAxis2Placement3D position,IfcPositiveLengthMeasure radius):base(position)
		{
			Radius = radius;

		}
		public static new IfcSphere FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSphere>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccsgsolid.htm"/>
	/// </summary>
	public  partial class IfcCsgSolid : IfcSolidModel
	{
		public IfcCsgSelect TreeRootExpression{get;set;} 

		/// <summary>
		/// Construct a IfcCsgSolid with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCsgSolid(IfcCsgSelect treeRootExpression):base()
		{
			TreeRootExpression = treeRootExpression;

		}
		public static new IfcCsgSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCsgSolid>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsolidmodel.htm"/>
	/// </summary>
	public abstract partial class IfcSolidModel : IfcGeometricRepresentationItem
	{
		/// <summary>
		/// Construct a IfcSolidModel with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSolidModel():base()
		{

		}
		public static new IfcSolidModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSolidModel>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurrencyrelationship.htm"/>
	/// </summary>
	public  partial class IfcCurrencyRelationship : IfcResourceLevelRelationship
	{
		public IfcMonetaryUnit RelatingMonetaryUnit{get;set;} 
		public IfcMonetaryUnit RelatedMonetaryUnit{get;set;} 
		public IfcPositiveRatioMeasure ExchangeRate{get;set;} 
		public IfcDateTime RateDateTime{get;set;} // optional
		public IfcLibraryInformation RateSource{get;set;} // optional

		/// <summary>
		/// Construct a IfcCurrencyRelationship with all required attributes.
		/// </summary>
		public IfcCurrencyRelationship(IfcMonetaryUnit relatingMonetaryUnit,IfcMonetaryUnit relatedMonetaryUnit,IfcPositiveRatioMeasure exchangeRate):base()
		{
			RelatingMonetaryUnit = relatingMonetaryUnit;
			RelatedMonetaryUnit = relatedMonetaryUnit;
			ExchangeRate = exchangeRate;

		}
		/// <summary>
		/// Construct a IfcCurrencyRelationship with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCurrencyRelationship(IfcLabel name,IfcText description,IfcMonetaryUnit relatingMonetaryUnit,IfcMonetaryUnit relatedMonetaryUnit,IfcPositiveRatioMeasure exchangeRate,IfcDateTime rateDateTime,IfcLibraryInformation rateSource):base(name,description)
		{
			RelatingMonetaryUnit = relatingMonetaryUnit;
			RelatedMonetaryUnit = relatedMonetaryUnit;
			ExchangeRate = exchangeRate;
			RateDateTime = rateDateTime;
			RateSource = rateSource;

		}
		public static new IfcCurrencyRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurrencyRelationship>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcline.htm"/>
	/// </summary>
	public  partial class IfcLine : IfcCurve
	{
		public IfcCartesianPoint Pnt{get;set;} 
		public IfcVector Dir{get;set;} 

		/// <summary>
		/// Construct a IfcLine with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLine(IfcCartesianPoint pnt,IfcVector dir):base()
		{
			Pnt = pnt;
			Dir = dir;

		}
		public static new IfcLine FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLine>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoffsetcurve2d.htm"/>
	/// </summary>
	public  partial class IfcOffsetCurve2D : IfcCurve
	{
		public IfcCurve BasisCurve{get;set;} 
		public IfcLengthMeasure Distance{get;set;} 
		public bool? SelfIntersect{get;set;} 

		/// <summary>
		/// Construct a IfcOffsetCurve2D with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcOffsetCurve2D(IfcCurve basisCurve,IfcLengthMeasure distance,bool? selfIntersect):base()
		{
			BasisCurve = basisCurve;
			Distance = distance;
			SelfIntersect = selfIntersect;

		}
		public static new IfcOffsetCurve2D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOffsetCurve2D>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoffsetcurve3d.htm"/>
	/// </summary>
	public  partial class IfcOffsetCurve3D : IfcCurve
	{
		public IfcCurve BasisCurve{get;set;} 
		public IfcLengthMeasure Distance{get;set;} 
		public bool? SelfIntersect{get;set;} 
		public IfcDirection RefDirection{get;set;} 

		/// <summary>
		/// Construct a IfcOffsetCurve3D with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcOffsetCurve3D(IfcCurve basisCurve,IfcLengthMeasure distance,bool? selfIntersect,IfcDirection refDirection):base()
		{
			BasisCurve = basisCurve;
			Distance = distance;
			SelfIntersect = selfIntersect;
			RefDirection = refDirection;

		}
		public static new IfcOffsetCurve3D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOffsetCurve3D>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpcurve.htm"/>
	/// </summary>
	public  partial class IfcPcurve : IfcCurve
	{
		public IfcSurface BasisSurface{get;set;} 
		public IfcCurve ReferenceCurve{get;set;} 

		/// <summary>
		/// Construct a IfcPcurve with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPcurve(IfcSurface basisSurface,IfcCurve referenceCurve):base()
		{
			BasisSurface = basisSurface;
			ReferenceCurve = referenceCurve;

		}
		public static new IfcPcurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPcurve>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvestyle.htm"/>
	/// </summary>
	public  partial class IfcCurveStyle : IfcPresentationStyle
	{
		public IfcCurveFontOrScaledCurveFontSelect CurveFont{get;set;} // optional
		public IfcSizeSelect CurveWidth{get;set;} // optional
		public IfcColour CurveColour{get;set;} // optional
		public bool ModelOrDraughting{get;set;} // optional

		/// <summary>
		/// Construct a IfcCurveStyle with all required attributes.
		/// </summary>
		public IfcCurveStyle():base()
		{

		}
		/// <summary>
		/// Construct a IfcCurveStyle with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCurveStyle(IfcLabel name,IfcCurveFontOrScaledCurveFontSelect curveFont,IfcSizeSelect curveWidth,IfcColour curveColour,bool modelOrDraughting):base(name)
		{
			CurveFont = curveFont;
			CurveWidth = curveWidth;
			CurveColour = curveColour;
			ModelOrDraughting = modelOrDraughting;

		}
		public static new IfcCurveStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveStyle>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentationstyle.htm"/>
	/// </summary>
	public abstract partial class IfcPresentationStyle : BaseIfc
	{
		public IfcLabel Name{get;set;} // optional

		/// <summary>
		/// Construct a IfcPresentationStyle with all required attributes.
		/// </summary>
		public IfcPresentationStyle():base()
		{

		}
		/// <summary>
		/// Construct a IfcPresentationStyle with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPresentationStyle(IfcLabel name):base()
		{
			Name = name;

		}
		public static  IfcPresentationStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentationStyle>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvestylefont.htm"/>
	/// </summary>
	public  partial class IfcCurveStyleFont : IfcPresentationItem
	{
		public IfcLabel Name{get;set;} // optional
		public List<IfcCurveStyleFontPattern> PatternList{get;set;} 

		/// <summary>
		/// Construct a IfcCurveStyleFont with all required attributes.
		/// </summary>
		public IfcCurveStyleFont(List<IfcCurveStyleFontPattern> patternList):base()
		{
			PatternList = patternList;

		}
		/// <summary>
		/// Construct a IfcCurveStyleFont with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCurveStyleFont(IfcLabel name,List<IfcCurveStyleFontPattern> patternList):base()
		{
			Name = name;
			PatternList = patternList;

		}
		public static new IfcCurveStyleFont FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveStyleFont>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvestylefontandscaling.htm"/>
	/// </summary>
	public  partial class IfcCurveStyleFontAndScaling : IfcPresentationItem
	{
		public IfcLabel Name{get;set;} // optional
		public IfcCurveStyleFontSelect CurveFont{get;set;} 
		public IfcPositiveRatioMeasure CurveFontScaling{get;set;} 

		/// <summary>
		/// Construct a IfcCurveStyleFontAndScaling with all required attributes.
		/// </summary>
		public IfcCurveStyleFontAndScaling(IfcCurveStyleFontSelect curveFont,IfcPositiveRatioMeasure curveFontScaling):base()
		{
			CurveFont = curveFont;
			CurveFontScaling = curveFontScaling;

		}
		/// <summary>
		/// Construct a IfcCurveStyleFontAndScaling with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCurveStyleFontAndScaling(IfcLabel name,IfcCurveStyleFontSelect curveFont,IfcPositiveRatioMeasure curveFontScaling):base()
		{
			Name = name;
			CurveFont = curveFont;
			CurveFontScaling = curveFontScaling;

		}
		public static new IfcCurveStyleFontAndScaling FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveStyleFontAndScaling>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvestylefontpattern.htm"/>
	/// </summary>
	public  partial class IfcCurveStyleFontPattern : IfcPresentationItem
	{
		public IfcLengthMeasure VisibleSegmentLength{get;set;} 
		public IfcPositiveLengthMeasure InvisibleSegmentLength{get;set;} 

		/// <summary>
		/// Construct a IfcCurveStyleFontPattern with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCurveStyleFontPattern(IfcLengthMeasure visibleSegmentLength,IfcPositiveLengthMeasure invisibleSegmentLength):base()
		{
			VisibleSegmentLength = visibleSegmentLength;
			InvisibleSegmentLength = invisibleSegmentLength;

		}
		public static new IfcCurveStyleFontPattern FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveStyleFontPattern>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccylindricalsurface.htm"/>
	/// </summary>
	public  partial class IfcCylindricalSurface : IfcElementarySurface
	{
		public IfcPositiveLengthMeasure Radius{get;set;} 

		/// <summary>
		/// Construct a IfcCylindricalSurface with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcCylindricalSurface(IfcAxis2Placement3D position,IfcPositiveLengthMeasure radius):base(position)
		{
			Radius = radius;

		}
		public static new IfcCylindricalSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCylindricalSurface>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementarysurface.htm"/>
	/// </summary>
	public abstract partial class IfcElementarySurface : IfcSurface
	{
		public IfcAxis2Placement3D Position{get;set;} 

		/// <summary>
		/// Construct a IfcElementarySurface with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElementarySurface(IfcAxis2Placement3D position):base()
		{
			Position = position;

		}
		public static new IfcElementarySurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementarySurface>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdamper.htm"/>
	/// </summary>
	public  partial class IfcDamper : IfcFlowController
	{
		public IfcDamperTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcDamper with all required attributes.
		/// </summary>
		public IfcDamper(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDamper with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDamper(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcDamperTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcDamper FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDamper>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdampertype.htm"/>
	/// </summary>
	public  partial class IfcDamperType : IfcFlowControllerType
	{
		public IfcDamperTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcDamperType with all required attributes.
		/// </summary>
		public IfcDamperType(IfcGloballyUniqueId globalId,IfcDamperTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcDamperType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDamperType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcDamperTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcDamperType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDamperType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcderivedprofiledef.htm"/>
	/// </summary>
	public  partial class IfcDerivedProfileDef : IfcProfileDef
	{
		public IfcProfileDef ParentProfile{get;set;} 
		public IfcCartesianTransformationOperator2D Operator{get;set;} 
		public IfcLabel Label{get;set;} // optional

		/// <summary>
		/// Construct a IfcDerivedProfileDef with all required attributes.
		/// </summary>
		public IfcDerivedProfileDef(IfcProfileTypeEnum profileType,IfcProfileDef parentProfile,IfcCartesianTransformationOperator2D op):base(profileType)
		{
			ParentProfile = parentProfile;
			Operator = op;

		}
		/// <summary>
		/// Construct a IfcDerivedProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDerivedProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcProfileDef parentProfile,IfcCartesianTransformationOperator2D op,IfcLabel label):base(profileType,profileName)
		{
			ParentProfile = parentProfile;
			Operator = op;
			Label = label;

		}
		public static new IfcDerivedProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDerivedProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmirroredprofiledef.htm"/>
	/// </summary>
	public  partial class IfcMirroredProfileDef : IfcDerivedProfileDef
	{
		/// <summary>
		/// Construct a IfcMirroredProfileDef with all required attributes.
		/// </summary>
		public IfcMirroredProfileDef(IfcProfileTypeEnum profileType,IfcProfileDef parentProfile,IfcCartesianTransformationOperator2D op):base(profileType,parentProfile,op)
		{

		}
		/// <summary>
		/// Construct a IfcMirroredProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMirroredProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcProfileDef parentProfile,IfcCartesianTransformationOperator2D op,IfcLabel label):base(profileType,profileName,parentProfile,op,label)
		{

		}
		public static new IfcMirroredProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMirroredProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcderivedunit.htm"/>
	/// </summary>
	public  partial class IfcDerivedUnit : BaseIfc
	{
		public List<IfcDerivedUnitElement> Elements{get;set;} 
		public IfcDerivedUnitEnum UnitType{get;set;} 
		public IfcLabel UserDefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcDerivedUnit with all required attributes.
		/// </summary>
		public IfcDerivedUnit(List<IfcDerivedUnitElement> elements,IfcDerivedUnitEnum unitType):base()
		{
			Elements = elements;
			UnitType = unitType;

		}
		/// <summary>
		/// Construct a IfcDerivedUnit with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDerivedUnit(List<IfcDerivedUnitElement> elements,IfcDerivedUnitEnum unitType,IfcLabel userDefinedType):base()
		{
			Elements = elements;
			UnitType = unitType;
			UserDefinedType = userDefinedType;

		}
		public static  IfcDerivedUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDerivedUnit>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcderivedunitelement.htm"/>
	/// </summary>
	public  partial class IfcDerivedUnitElement : BaseIfc
	{
		public IfcNamedUnit Unit{get;set;} 
		public int Exponent{get;set;} 

		/// <summary>
		/// Construct a IfcDerivedUnitElement with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDerivedUnitElement(IfcNamedUnit unit,int exponent):base()
		{
			Unit = unit;
			Exponent = exponent;

		}
		public static  IfcDerivedUnitElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDerivedUnitElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdimensionalexponents.htm"/>
	/// </summary>
	public  partial class IfcDimensionalExponents : BaseIfc
	{
		public int LengthExponent{get;set;} 
		public int MassExponent{get;set;} 
		public int TimeExponent{get;set;} 
		public int ElectricCurrentExponent{get;set;} 
		public int ThermodynamicTemperatureExponent{get;set;} 
		public int AmountOfSubstanceExponent{get;set;} 
		public int LuminousIntensityExponent{get;set;} 

		/// <summary>
		/// Construct a IfcDimensionalExponents with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDimensionalExponents(int lengthExponent,int massExponent,int timeExponent,int electricCurrentExponent,int thermodynamicTemperatureExponent,int amountOfSubstanceExponent,int luminousIntensityExponent):base()
		{
			LengthExponent = lengthExponent;
			MassExponent = massExponent;
			TimeExponent = timeExponent;
			ElectricCurrentExponent = electricCurrentExponent;
			ThermodynamicTemperatureExponent = thermodynamicTemperatureExponent;
			AmountOfSubstanceExponent = amountOfSubstanceExponent;
			LuminousIntensityExponent = luminousIntensityExponent;

		}
		public static  IfcDimensionalExponents FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDimensionalExponents>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdirection.htm"/>
	/// </summary>
	public  partial class IfcDirection : IfcGeometricRepresentationItem
	{
		public List<double> DirectionRatios{get;set;} 

		/// <summary>
		/// Construct a IfcDirection with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDirection(List<double> directionRatios):base()
		{
			DirectionRatios = directionRatios;

		}
		public static new IfcDirection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDirection>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdiscreteaccessory.htm"/>
	/// </summary>
	public  partial class IfcDiscreteAccessory : IfcElementComponent
	{
		public IfcDiscreteAccessoryTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcDiscreteAccessory with all required attributes.
		/// </summary>
		public IfcDiscreteAccessory(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDiscreteAccessory with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDiscreteAccessory(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcDiscreteAccessoryTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcDiscreteAccessory FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDiscreteAccessory>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdiscreteaccessorytype.htm"/>
	/// </summary>
	public  partial class IfcDiscreteAccessoryType : IfcElementComponentType
	{
		public IfcDiscreteAccessoryTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcDiscreteAccessoryType with all required attributes.
		/// </summary>
		public IfcDiscreteAccessoryType(IfcGloballyUniqueId globalId,IfcDiscreteAccessoryTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcDiscreteAccessoryType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDiscreteAccessoryType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcDiscreteAccessoryTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcDiscreteAccessoryType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDiscreteAccessoryType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionchamberelement.htm"/>
	/// </summary>
	public  partial class IfcDistributionChamberElement : IfcDistributionFlowElement
	{
		public IfcDistributionChamberElementTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcDistributionChamberElement with all required attributes.
		/// </summary>
		public IfcDistributionChamberElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDistributionChamberElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDistributionChamberElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcDistributionChamberElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcDistributionChamberElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionChamberElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionflowelement.htm"/>
	/// </summary>
	public  partial class IfcDistributionFlowElement : IfcDistributionElement
	{
		/// <summary>
		/// Construct a IfcDistributionFlowElement with all required attributes.
		/// </summary>
		public IfcDistributionFlowElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDistributionFlowElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDistributionFlowElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcDistributionFlowElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionFlowElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionchamberelementtype.htm"/>
	/// </summary>
	public  partial class IfcDistributionChamberElementType : IfcDistributionFlowElementType
	{
		public IfcDistributionChamberElementTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcDistributionChamberElementType with all required attributes.
		/// </summary>
		public IfcDistributionChamberElementType(IfcGloballyUniqueId globalId,IfcDistributionChamberElementTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcDistributionChamberElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDistributionChamberElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcDistributionChamberElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcDistributionChamberElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionChamberElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionflowelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcDistributionFlowElementType : IfcDistributionElementType
	{
		/// <summary>
		/// Construct a IfcDistributionFlowElementType with all required attributes.
		/// </summary>
		public IfcDistributionFlowElementType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDistributionFlowElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDistributionFlowElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcDistributionFlowElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionFlowElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributioncircuit.htm"/>
	/// </summary>
	public  partial class IfcDistributionCircuit : IfcDistributionSystem
	{
		/// <summary>
		/// Construct a IfcDistributionCircuit with all required attributes.
		/// </summary>
		public IfcDistributionCircuit(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDistributionCircuit with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDistributionCircuit(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcLabel longName,IfcDistributionSystemEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,longName,predefinedType)
		{

		}
		public static new IfcDistributionCircuit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionCircuit>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionsystem.htm"/>
	/// </summary>
	public  partial class IfcDistributionSystem : IfcSystem
	{
		public IfcLabel LongName{get;set;} // optional
		public IfcDistributionSystemEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcDistributionSystem with all required attributes.
		/// </summary>
		public IfcDistributionSystem(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDistributionSystem with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDistributionSystem(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcLabel longName,IfcDistributionSystemEnum predefinedType):base(globalId,ownerHistory,name,description,objectType)
		{
			LongName = longName;
			PredefinedType = predefinedType;

		}
		public static new IfcDistributionSystem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionSystem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowinstrument.htm"/>
	/// </summary>
	public  partial class IfcFlowInstrument : IfcDistributionControlElement
	{
		public IfcFlowInstrumentTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcFlowInstrument with all required attributes.
		/// </summary>
		public IfcFlowInstrument(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowInstrument with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowInstrument(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcFlowInstrumentTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFlowInstrument FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowInstrument>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprotectivedevicetrippingunit.htm"/>
	/// </summary>
	public  partial class IfcProtectiveDeviceTrippingUnit : IfcDistributionControlElement
	{
		public IfcProtectiveDeviceTrippingUnitTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcProtectiveDeviceTrippingUnit with all required attributes.
		/// </summary>
		public IfcProtectiveDeviceTrippingUnit(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcProtectiveDeviceTrippingUnit with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProtectiveDeviceTrippingUnit(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcProtectiveDeviceTrippingUnitTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcProtectiveDeviceTrippingUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProtectiveDeviceTrippingUnit>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsensor.htm"/>
	/// </summary>
	public  partial class IfcSensor : IfcDistributionControlElement
	{
		public IfcSensorTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcSensor with all required attributes.
		/// </summary>
		public IfcSensor(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSensor with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSensor(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcSensorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSensor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSensor>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitarycontrolelement.htm"/>
	/// </summary>
	public  partial class IfcUnitaryControlElement : IfcDistributionControlElement
	{
		public IfcUnitaryControlElementTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcUnitaryControlElement with all required attributes.
		/// </summary>
		public IfcUnitaryControlElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcUnitaryControlElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcUnitaryControlElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcUnitaryControlElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcUnitaryControlElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUnitaryControlElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionelement.htm"/>
	/// </summary>
	public  partial class IfcDistributionElement : IfcElement
	{
		/// <summary>
		/// Construct a IfcDistributionElement with all required attributes.
		/// </summary>
		public IfcDistributionElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDistributionElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDistributionElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcDistributionElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowinstrumenttype.htm"/>
	/// </summary>
	public  partial class IfcFlowInstrumentType : IfcDistributionControlElementType
	{
		public IfcFlowInstrumentTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcFlowInstrumentType with all required attributes.
		/// </summary>
		public IfcFlowInstrumentType(IfcGloballyUniqueId globalId,IfcFlowInstrumentTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcFlowInstrumentType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowInstrumentType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcFlowInstrumentTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFlowInstrumentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowInstrumentType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprotectivedevicetrippingunittype.htm"/>
	/// </summary>
	public  partial class IfcProtectiveDeviceTrippingUnitType : IfcDistributionControlElementType
	{
		public IfcProtectiveDeviceTrippingUnitTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcProtectiveDeviceTrippingUnitType with all required attributes.
		/// </summary>
		public IfcProtectiveDeviceTrippingUnitType(IfcGloballyUniqueId globalId,IfcProtectiveDeviceTrippingUnitTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcProtectiveDeviceTrippingUnitType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProtectiveDeviceTrippingUnitType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcProtectiveDeviceTrippingUnitTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcProtectiveDeviceTrippingUnitType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProtectiveDeviceTrippingUnitType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsensortype.htm"/>
	/// </summary>
	public  partial class IfcSensorType : IfcDistributionControlElementType
	{
		public IfcSensorTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcSensorType with all required attributes.
		/// </summary>
		public IfcSensorType(IfcGloballyUniqueId globalId,IfcSensorTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcSensorType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSensorType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcSensorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSensorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSensorType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitarycontrolelementtype.htm"/>
	/// </summary>
	public  partial class IfcUnitaryControlElementType : IfcDistributionControlElementType
	{
		public IfcUnitaryControlElementTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcUnitaryControlElementType with all required attributes.
		/// </summary>
		public IfcUnitaryControlElementType(IfcGloballyUniqueId globalId,IfcUnitaryControlElementTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcUnitaryControlElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcUnitaryControlElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcUnitaryControlElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcUnitaryControlElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUnitaryControlElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionelementtype.htm"/>
	/// </summary>
	public  partial class IfcDistributionElementType : IfcElementType
	{
		/// <summary>
		/// Construct a IfcDistributionElementType with all required attributes.
		/// </summary>
		public IfcDistributionElementType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDistributionElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDistributionElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcDistributionElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowstoragedevice.htm"/>
	/// </summary>
	public  partial class IfcFlowStorageDevice : IfcDistributionFlowElement
	{
		/// <summary>
		/// Construct a IfcFlowStorageDevice with all required attributes.
		/// </summary>
		public IfcFlowStorageDevice(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowStorageDevice with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowStorageDevice(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcFlowStorageDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowStorageDevice>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowtreatmentdevice.htm"/>
	/// </summary>
	public  partial class IfcFlowTreatmentDevice : IfcDistributionFlowElement
	{
		/// <summary>
		/// Construct a IfcFlowTreatmentDevice with all required attributes.
		/// </summary>
		public IfcFlowTreatmentDevice(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowTreatmentDevice with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowTreatmentDevice(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcFlowTreatmentDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowTreatmentDevice>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowstoragedevicetype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowStorageDeviceType : IfcDistributionFlowElementType
	{
		/// <summary>
		/// Construct a IfcFlowStorageDeviceType with all required attributes.
		/// </summary>
		public IfcFlowStorageDeviceType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowStorageDeviceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowStorageDeviceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcFlowStorageDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowStorageDeviceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowtreatmentdevicetype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowTreatmentDeviceType : IfcDistributionFlowElementType
	{
		/// <summary>
		/// Construct a IfcFlowTreatmentDeviceType with all required attributes.
		/// </summary>
		public IfcFlowTreatmentDeviceType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowTreatmentDeviceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowTreatmentDeviceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcFlowTreatmentDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowTreatmentDeviceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionport.htm"/>
	/// </summary>
	public  partial class IfcDistributionPort : IfcPort
	{
		public IfcFlowDirectionEnum FlowDirection{get;set;} // optional
		public IfcDistributionPortTypeEnum PredefinedType{get;set;} // optional
		public IfcDistributionSystemEnum SystemType{get;set;} // optional

		/// <summary>
		/// Construct a IfcDistributionPort with all required attributes.
		/// </summary>
		public IfcDistributionPort(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDistributionPort with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDistributionPort(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcFlowDirectionEnum flowDirection,IfcDistributionPortTypeEnum predefinedType,IfcDistributionSystemEnum systemType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation)
		{
			FlowDirection = flowDirection;
			PredefinedType = predefinedType;
			SystemType = systemType;

		}
		public static new IfcDistributionPort FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionPort>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcport.htm"/>
	/// </summary>
	public abstract partial class IfcPort : IfcProduct
	{
		/// <summary>
		/// Construct a IfcPort with all required attributes.
		/// </summary>
		public IfcPort(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcPort with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPort(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation)
		{

		}
		public static new IfcPort FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPort>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdocumentinformation.htm"/>
	/// </summary>
	public  partial class IfcDocumentInformation : IfcExternalInformation
	{
		public IfcIdentifier Identification{get;set;} 
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public IfcURIReference Location{get;set;} // optional
		public IfcText Purpose{get;set;} // optional
		public IfcText IntendedUse{get;set;} // optional
		public IfcText Scope{get;set;} // optional
		public IfcLabel Revision{get;set;} // optional
		public IfcActorSelect DocumentOwner{get;set;} // optional
		public List<IfcActorSelect> Editors{get;set;} // optional
		public IfcDateTime CreationTime{get;set;} // optional
		public IfcDateTime LastRevisionTime{get;set;} // optional
		public IfcIdentifier ElectronicFormat{get;set;} // optional
		public IfcDate ValidFrom{get;set;} // optional
		public IfcDate ValidUntil{get;set;} // optional
		public IfcDocumentConfidentialityEnum Confidentiality{get;set;} // optional
		public IfcDocumentStatusEnum Status{get;set;} // optional

		/// <summary>
		/// Construct a IfcDocumentInformation with all required attributes.
		/// </summary>
		public IfcDocumentInformation(IfcIdentifier identification,IfcLabel name):base()
		{
			Identification = identification;
			Name = name;

		}
		/// <summary>
		/// Construct a IfcDocumentInformation with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDocumentInformation(IfcIdentifier identification,IfcLabel name,IfcText description,IfcURIReference location,IfcText purpose,IfcText intendedUse,IfcText scope,IfcLabel revision,IfcActorSelect documentOwner,List<IfcActorSelect> editors,IfcDateTime creationTime,IfcDateTime lastRevisionTime,IfcIdentifier electronicFormat,IfcDate validFrom,IfcDate validUntil,IfcDocumentConfidentialityEnum confidentiality,IfcDocumentStatusEnum status):base()
		{
			Identification = identification;
			Name = name;
			Description = description;
			Location = location;
			Purpose = purpose;
			IntendedUse = intendedUse;
			Scope = scope;
			Revision = revision;
			DocumentOwner = documentOwner;
			Editors = new List<IfcActorSelect>();
			CreationTime = creationTime;
			LastRevisionTime = lastRevisionTime;
			ElectronicFormat = electronicFormat;
			ValidFrom = validFrom;
			ValidUntil = validUntil;
			Confidentiality = confidentiality;
			Status = status;

		}
		public static new IfcDocumentInformation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDocumentInformation>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdocumentinformationrelationship.htm"/>
	/// </summary>
	public  partial class IfcDocumentInformationRelationship : IfcResourceLevelRelationship
	{
		public IfcDocumentInformation RelatingDocument{get;set;} 
		public List<IfcDocumentInformation> RelatedDocuments{get;set;} 
		public IfcLabel RelationshipType{get;set;} // optional

		/// <summary>
		/// Construct a IfcDocumentInformationRelationship with all required attributes.
		/// </summary>
		public IfcDocumentInformationRelationship(IfcDocumentInformation relatingDocument,List<IfcDocumentInformation> relatedDocuments):base()
		{
			RelatingDocument = relatingDocument;
			RelatedDocuments = relatedDocuments;

		}
		/// <summary>
		/// Construct a IfcDocumentInformationRelationship with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDocumentInformationRelationship(IfcLabel name,IfcText description,IfcDocumentInformation relatingDocument,List<IfcDocumentInformation> relatedDocuments,IfcLabel relationshipType):base(name,description)
		{
			RelatingDocument = relatingDocument;
			RelatedDocuments = relatedDocuments;
			RelationshipType = relationshipType;

		}
		public static new IfcDocumentInformationRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDocumentInformationRelationship>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdocumentreference.htm"/>
	/// </summary>
	public  partial class IfcDocumentReference : IfcExternalReference
	{
		public IfcText Description{get;set;} // optional
		public IfcDocumentInformation ReferencedDocument{get;set;} // optional

		/// <summary>
		/// Construct a IfcDocumentReference with all required attributes.
		/// </summary>
		public IfcDocumentReference():base()
		{

		}
		/// <summary>
		/// Construct a IfcDocumentReference with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDocumentReference(IfcURIReference location,IfcIdentifier identification,IfcLabel name,IfcText description,IfcDocumentInformation referencedDocument):base(location,identification,name)
		{
			Description = description;
			ReferencedDocument = referencedDocument;

		}
		public static new IfcDocumentReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDocumentReference>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorstandardcase.htm"/>
	/// </summary>
	public  partial class IfcDoorStandardCase : IfcDoor
	{
		/// <summary>
		/// Construct a IfcDoorStandardCase with all required attributes.
		/// </summary>
		public IfcDoorStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDoorStandardCase with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDoorStandardCase(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcPositiveLengthMeasure overallHeight,IfcPositiveLengthMeasure overallWidth,IfcDoorTypeEnum predefinedType,IfcDoorTypeOperationEnum operationType,IfcLabel userDefinedOperationType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,overallHeight,overallWidth,predefinedType,operationType,userDefinedOperationType)
		{

		}
		public static new IfcDoorStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoorStandardCase>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorliningproperties.htm"/>
	/// </summary>
	public  partial class IfcDoorLiningProperties : IfcPreDefinedPropertySet
	{
		public IfcPositiveLengthMeasure LiningDepth{get;set;} // optional
		public IfcNonNegativeLengthMeasure LiningThickness{get;set;} // optional
		public IfcPositiveLengthMeasure ThresholdDepth{get;set;} // optional
		public IfcNonNegativeLengthMeasure ThresholdThickness{get;set;} // optional
		public IfcNonNegativeLengthMeasure TransomThickness{get;set;} // optional
		public IfcLengthMeasure TransomOffset{get;set;} // optional
		public IfcLengthMeasure LiningOffset{get;set;} // optional
		public IfcLengthMeasure ThresholdOffset{get;set;} // optional
		public IfcPositiveLengthMeasure CasingThickness{get;set;} // optional
		public IfcPositiveLengthMeasure CasingDepth{get;set;} // optional
		public IfcShapeAspect ShapeAspectStyle{get;set;} // optional
		public IfcLengthMeasure LiningToPanelOffsetX{get;set;} // optional
		public IfcLengthMeasure LiningToPanelOffsetY{get;set;} // optional

		/// <summary>
		/// Construct a IfcDoorLiningProperties with all required attributes.
		/// </summary>
		public IfcDoorLiningProperties(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDoorLiningProperties with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDoorLiningProperties(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcPositiveLengthMeasure liningDepth,IfcNonNegativeLengthMeasure liningThickness,IfcPositiveLengthMeasure thresholdDepth,IfcNonNegativeLengthMeasure thresholdThickness,IfcNonNegativeLengthMeasure transomThickness,IfcLengthMeasure transomOffset,IfcLengthMeasure liningOffset,IfcLengthMeasure thresholdOffset,IfcPositiveLengthMeasure casingThickness,IfcPositiveLengthMeasure casingDepth,IfcShapeAspect shapeAspectStyle,IfcLengthMeasure liningToPanelOffsetX,IfcLengthMeasure liningToPanelOffsetY):base(globalId,ownerHistory,name,description)
		{
			LiningDepth = liningDepth;
			LiningThickness = liningThickness;
			ThresholdDepth = thresholdDepth;
			ThresholdThickness = thresholdThickness;
			TransomThickness = transomThickness;
			TransomOffset = transomOffset;
			LiningOffset = liningOffset;
			ThresholdOffset = thresholdOffset;
			CasingThickness = casingThickness;
			CasingDepth = casingDepth;
			ShapeAspectStyle = shapeAspectStyle;
			LiningToPanelOffsetX = liningToPanelOffsetX;
			LiningToPanelOffsetY = liningToPanelOffsetY;

		}
		public static new IfcDoorLiningProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoorLiningProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpredefinedpropertyset.htm"/>
	/// </summary>
	public abstract partial class IfcPreDefinedPropertySet : IfcPropertySetDefinition
	{
		/// <summary>
		/// Construct a IfcPreDefinedPropertySet with all required attributes.
		/// </summary>
		public IfcPreDefinedPropertySet(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcPreDefinedPropertySet with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPreDefinedPropertySet(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description):base(globalId,ownerHistory,name,description)
		{

		}
		public static new IfcPreDefinedPropertySet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPreDefinedPropertySet>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorpanelproperties.htm"/>
	/// </summary>
	public  partial class IfcDoorPanelProperties : IfcPreDefinedPropertySet
	{
		public IfcPositiveLengthMeasure PanelDepth{get;set;} // optional
		public IfcDoorPanelOperationEnum PanelOperation{get;set;} 
		public IfcNormalisedRatioMeasure PanelWidth{get;set;} // optional
		public IfcDoorPanelPositionEnum PanelPosition{get;set;} 
		public IfcShapeAspect ShapeAspectStyle{get;set;} // optional

		/// <summary>
		/// Construct a IfcDoorPanelProperties with all required attributes.
		/// </summary>
		public IfcDoorPanelProperties(IfcGloballyUniqueId globalId,IfcDoorPanelOperationEnum panelOperation,IfcDoorPanelPositionEnum panelPosition):base(globalId)
		{
			PanelOperation = panelOperation;
			PanelPosition = panelPosition;

		}
		/// <summary>
		/// Construct a IfcDoorPanelProperties with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDoorPanelProperties(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcPositiveLengthMeasure panelDepth,IfcDoorPanelOperationEnum panelOperation,IfcNormalisedRatioMeasure panelWidth,IfcDoorPanelPositionEnum panelPosition,IfcShapeAspect shapeAspectStyle):base(globalId,ownerHistory,name,description)
		{
			PanelDepth = panelDepth;
			PanelOperation = panelOperation;
			PanelWidth = panelWidth;
			PanelPosition = panelPosition;
			ShapeAspectStyle = shapeAspectStyle;

		}
		public static new IfcDoorPanelProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoorPanelProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorstyle.htm"/>
	/// </summary>
	public  partial class IfcDoorStyle : IfcTypeProduct
	{
		public IfcDoorStyleOperationEnum OperationType{get;set;} 
		public IfcDoorStyleConstructionEnum ConstructionType{get;set;} 
		public bool ParameterTakesPrecedence{get;set;} 
		public bool Sizeable{get;set;} 

		/// <summary>
		/// Construct a IfcDoorStyle with all required attributes.
		/// </summary>
		public IfcDoorStyle(IfcGloballyUniqueId globalId,IfcDoorStyleOperationEnum operationType,IfcDoorStyleConstructionEnum constructionType,bool parameterTakesPrecedence,bool sizeable):base(globalId)
		{
			OperationType = operationType;
			ConstructionType = constructionType;
			ParameterTakesPrecedence = parameterTakesPrecedence;
			Sizeable = sizeable;

		}
		/// <summary>
		/// Construct a IfcDoorStyle with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDoorStyle(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcDoorStyleOperationEnum operationType,IfcDoorStyleConstructionEnum constructionType,bool parameterTakesPrecedence,bool sizeable):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag)
		{
			OperationType = operationType;
			ConstructionType = constructionType;
			ParameterTakesPrecedence = parameterTakesPrecedence;
			Sizeable = sizeable;

		}
		public static new IfcDoorStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoorStyle>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctypeproduct.htm"/>
	/// </summary>
	public  partial class IfcTypeProduct : IfcTypeObject
	{
		public List<IfcRepresentationMap> RepresentationMaps{get;set;} // optional
		public IfcLabel Tag{get;set;} // optional

		/// <summary>
		/// Construct a IfcTypeProduct with all required attributes.
		/// </summary>
		public IfcTypeProduct(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcTypeProduct with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTypeProduct(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets)
		{
			RepresentationMaps = new List<IfcRepresentationMap>();
			Tag = tag;

		}
		public static new IfcTypeProduct FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTypeProduct>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdraughtingpredefinedcolour.htm"/>
	/// </summary>
	public  partial class IfcDraughtingPreDefinedColour : IfcPreDefinedColour
	{
		/// <summary>
		/// Construct a IfcDraughtingPreDefinedColour with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDraughtingPreDefinedColour(IfcLabel name):base(name)
		{

		}
		public static new IfcDraughtingPreDefinedColour FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDraughtingPreDefinedColour>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpredefinedcolour.htm"/>
	/// </summary>
	public abstract partial class IfcPreDefinedColour : IfcPreDefinedItem
	{
		/// <summary>
		/// Construct a IfcPreDefinedColour with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPreDefinedColour(IfcLabel name):base(name)
		{

		}
		public static new IfcPreDefinedColour FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPreDefinedColour>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdraughtingpredefinedcurvefont.htm"/>
	/// </summary>
	public  partial class IfcDraughtingPreDefinedCurveFont : IfcPreDefinedCurveFont
	{
		/// <summary>
		/// Construct a IfcDraughtingPreDefinedCurveFont with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDraughtingPreDefinedCurveFont(IfcLabel name):base(name)
		{

		}
		public static new IfcDraughtingPreDefinedCurveFont FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDraughtingPreDefinedCurveFont>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpredefinedcurvefont.htm"/>
	/// </summary>
	public abstract partial class IfcPreDefinedCurveFont : IfcPreDefinedItem
	{
		/// <summary>
		/// Construct a IfcPreDefinedCurveFont with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPreDefinedCurveFont(IfcLabel name):base(name)
		{

		}
		public static new IfcPreDefinedCurveFont FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPreDefinedCurveFont>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductfitting.htm"/>
	/// </summary>
	public  partial class IfcDuctFitting : IfcFlowFitting
	{
		public IfcDuctFittingTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcDuctFitting with all required attributes.
		/// </summary>
		public IfcDuctFitting(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDuctFitting with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDuctFitting(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcDuctFittingTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcDuctFitting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuctFitting>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductfittingtype.htm"/>
	/// </summary>
	public  partial class IfcDuctFittingType : IfcFlowFittingType
	{
		public IfcDuctFittingTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcDuctFittingType with all required attributes.
		/// </summary>
		public IfcDuctFittingType(IfcGloballyUniqueId globalId,IfcDuctFittingTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcDuctFittingType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDuctFittingType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcDuctFittingTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcDuctFittingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuctFittingType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductsegment.htm"/>
	/// </summary>
	public  partial class IfcDuctSegment : IfcFlowSegment
	{
		public IfcDuctSegmentTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcDuctSegment with all required attributes.
		/// </summary>
		public IfcDuctSegment(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDuctSegment with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDuctSegment(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcDuctSegmentTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcDuctSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuctSegment>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductsegmenttype.htm"/>
	/// </summary>
	public  partial class IfcDuctSegmentType : IfcFlowSegmentType
	{
		public IfcDuctSegmentTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcDuctSegmentType with all required attributes.
		/// </summary>
		public IfcDuctSegmentType(IfcGloballyUniqueId globalId,IfcDuctSegmentTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcDuctSegmentType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDuctSegmentType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcDuctSegmentTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcDuctSegmentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuctSegmentType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductsilencer.htm"/>
	/// </summary>
	public  partial class IfcDuctSilencer : IfcFlowTreatmentDevice
	{
		public IfcDuctSilencerTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcDuctSilencer with all required attributes.
		/// </summary>
		public IfcDuctSilencer(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcDuctSilencer with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDuctSilencer(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcDuctSilencerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcDuctSilencer FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuctSilencer>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductsilencertype.htm"/>
	/// </summary>
	public  partial class IfcDuctSilencerType : IfcFlowTreatmentDeviceType
	{
		public IfcDuctSilencerTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcDuctSilencerType with all required attributes.
		/// </summary>
		public IfcDuctSilencerType(IfcGloballyUniqueId globalId,IfcDuctSilencerTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcDuctSilencerType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcDuctSilencerType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcDuctSilencerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcDuctSilencerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuctSilencerType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcedge.htm"/>
	/// </summary>
	public  partial class IfcEdge : IfcTopologicalRepresentationItem
	{
		public IfcVertex EdgeStart{get;set;} 
		public IfcVertex EdgeEnd{get;set;} 

		/// <summary>
		/// Construct a IfcEdge with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEdge(IfcVertex edgeStart,IfcVertex edgeEnd):base()
		{
			EdgeStart = edgeStart;
			EdgeEnd = edgeEnd;

		}
		public static new IfcEdge FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEdge>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcedgecurve.htm"/>
	/// </summary>
	public  partial class IfcEdgeCurve : IfcEdge
	{
		public IfcCurve EdgeGeometry{get;set;} 
		public bool SameSense{get;set;} 

		/// <summary>
		/// Construct a IfcEdgeCurve with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEdgeCurve(IfcVertex edgeStart,IfcVertex edgeEnd,IfcCurve edgeGeometry,bool sameSense):base(edgeStart,edgeEnd)
		{
			EdgeGeometry = edgeGeometry;
			SameSense = sameSense;

		}
		public static new IfcEdgeCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEdgeCurve>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcorientededge.htm"/>
	/// </summary>
	public  partial class IfcOrientedEdge : IfcEdge
	{
		public IfcEdge EdgeElement{get;set;} 
		public bool Orientation{get;set;} 

		/// <summary>
		/// Construct a IfcOrientedEdge with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcOrientedEdge(IfcVertex edgeStart,IfcVertex edgeEnd,IfcEdge edgeElement,bool orientation):base(edgeStart,edgeEnd)
		{
			EdgeElement = edgeElement;
			Orientation = orientation;

		}
		public static new IfcOrientedEdge FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOrientedEdge>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsubedge.htm"/>
	/// </summary>
	public  partial class IfcSubedge : IfcEdge
	{
		public IfcEdge ParentEdge{get;set;} 

		/// <summary>
		/// Construct a IfcSubedge with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSubedge(IfcVertex edgeStart,IfcVertex edgeEnd,IfcEdge parentEdge):base(edgeStart,edgeEnd)
		{
			ParentEdge = parentEdge;

		}
		public static new IfcSubedge FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSubedge>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcedgeloop.htm"/>
	/// </summary>
	public  partial class IfcEdgeLoop : IfcLoop
	{
		public List<IfcOrientedEdge> EdgeList{get;set;} 

		/// <summary>
		/// Construct a IfcEdgeLoop with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEdgeLoop(List<IfcOrientedEdge> edgeList):base()
		{
			EdgeList = edgeList;

		}
		public static new IfcEdgeLoop FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEdgeLoop>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcloop.htm"/>
	/// </summary>
	public  partial class IfcLoop : IfcTopologicalRepresentationItem
	{
		/// <summary>
		/// Construct a IfcLoop with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLoop():base()
		{

		}
		public static new IfcLoop FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLoop>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricappliance.htm"/>
	/// </summary>
	public  partial class IfcElectricAppliance : IfcFlowTerminal
	{
		public IfcElectricApplianceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcElectricAppliance with all required attributes.
		/// </summary>
		public IfcElectricAppliance(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcElectricAppliance with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElectricAppliance(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcElectricApplianceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcElectricAppliance FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricAppliance>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricappliancetype.htm"/>
	/// </summary>
	public  partial class IfcElectricApplianceType : IfcFlowTerminalType
	{
		public IfcElectricApplianceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcElectricApplianceType with all required attributes.
		/// </summary>
		public IfcElectricApplianceType(IfcGloballyUniqueId globalId,IfcElectricApplianceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcElectricApplianceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElectricApplianceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcElectricApplianceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcElectricApplianceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricApplianceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricdistributionboard.htm"/>
	/// </summary>
	public  partial class IfcElectricDistributionBoard : IfcFlowController
	{
		public IfcElectricDistributionBoardTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcElectricDistributionBoard with all required attributes.
		/// </summary>
		public IfcElectricDistributionBoard(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcElectricDistributionBoard with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElectricDistributionBoard(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcElectricDistributionBoardTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcElectricDistributionBoard FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricDistributionBoard>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricdistributionboardtype.htm"/>
	/// </summary>
	public  partial class IfcElectricDistributionBoardType : IfcFlowControllerType
	{
		public IfcElectricDistributionBoardTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcElectricDistributionBoardType with all required attributes.
		/// </summary>
		public IfcElectricDistributionBoardType(IfcGloballyUniqueId globalId,IfcElectricDistributionBoardTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcElectricDistributionBoardType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElectricDistributionBoardType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcElectricDistributionBoardTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcElectricDistributionBoardType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricDistributionBoardType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricflowstoragedevice.htm"/>
	/// </summary>
	public  partial class IfcElectricFlowStorageDevice : IfcFlowStorageDevice
	{
		public IfcElectricFlowStorageDeviceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcElectricFlowStorageDevice with all required attributes.
		/// </summary>
		public IfcElectricFlowStorageDevice(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcElectricFlowStorageDevice with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElectricFlowStorageDevice(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcElectricFlowStorageDeviceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcElectricFlowStorageDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricFlowStorageDevice>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricflowstoragedevicetype.htm"/>
	/// </summary>
	public  partial class IfcElectricFlowStorageDeviceType : IfcFlowStorageDeviceType
	{
		public IfcElectricFlowStorageDeviceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcElectricFlowStorageDeviceType with all required attributes.
		/// </summary>
		public IfcElectricFlowStorageDeviceType(IfcGloballyUniqueId globalId,IfcElectricFlowStorageDeviceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcElectricFlowStorageDeviceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElectricFlowStorageDeviceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcElectricFlowStorageDeviceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcElectricFlowStorageDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricFlowStorageDeviceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricgenerator.htm"/>
	/// </summary>
	public  partial class IfcElectricGenerator : IfcEnergyConversionDevice
	{
		public IfcElectricGeneratorTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcElectricGenerator with all required attributes.
		/// </summary>
		public IfcElectricGenerator(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcElectricGenerator with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElectricGenerator(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcElectricGeneratorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcElectricGenerator FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricGenerator>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricgeneratortype.htm"/>
	/// </summary>
	public  partial class IfcElectricGeneratorType : IfcEnergyConversionDeviceType
	{
		public IfcElectricGeneratorTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcElectricGeneratorType with all required attributes.
		/// </summary>
		public IfcElectricGeneratorType(IfcGloballyUniqueId globalId,IfcElectricGeneratorTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcElectricGeneratorType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElectricGeneratorType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcElectricGeneratorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcElectricGeneratorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricGeneratorType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricmotor.htm"/>
	/// </summary>
	public  partial class IfcElectricMotor : IfcEnergyConversionDevice
	{
		public IfcElectricMotorTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcElectricMotor with all required attributes.
		/// </summary>
		public IfcElectricMotor(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcElectricMotor with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElectricMotor(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcElectricMotorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcElectricMotor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricMotor>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricmotortype.htm"/>
	/// </summary>
	public  partial class IfcElectricMotorType : IfcEnergyConversionDeviceType
	{
		public IfcElectricMotorTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcElectricMotorType with all required attributes.
		/// </summary>
		public IfcElectricMotorType(IfcGloballyUniqueId globalId,IfcElectricMotorTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcElectricMotorType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElectricMotorType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcElectricMotorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcElectricMotorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricMotorType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectrictimecontrol.htm"/>
	/// </summary>
	public  partial class IfcElectricTimeControl : IfcFlowController
	{
		public IfcElectricTimeControlTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcElectricTimeControl with all required attributes.
		/// </summary>
		public IfcElectricTimeControl(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcElectricTimeControl with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElectricTimeControl(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcElectricTimeControlTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcElectricTimeControl FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricTimeControl>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectrictimecontroltype.htm"/>
	/// </summary>
	public  partial class IfcElectricTimeControlType : IfcFlowControllerType
	{
		public IfcElectricTimeControlTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcElectricTimeControlType with all required attributes.
		/// </summary>
		public IfcElectricTimeControlType(IfcGloballyUniqueId globalId,IfcElectricTimeControlTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcElectricTimeControlType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElectricTimeControlType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcElectricTimeControlTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcElectricTimeControlType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricTimeControlType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementassembly.htm"/>
	/// </summary>
	public  partial class IfcElementAssembly : IfcElement
	{
		public IfcAssemblyPlaceEnum AssemblyPlace{get;set;} // optional
		public IfcElementAssemblyTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcElementAssembly with all required attributes.
		/// </summary>
		public IfcElementAssembly(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcElementAssembly with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElementAssembly(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcAssemblyPlaceEnum assemblyPlace,IfcElementAssemblyTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			AssemblyPlace = assemblyPlace;
			PredefinedType = predefinedType;

		}
		public static new IfcElementAssembly FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementAssembly>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfeatureelement.htm"/>
	/// </summary>
	public abstract partial class IfcFeatureElement : IfcElement
	{
		/// <summary>
		/// Construct a IfcFeatureElement with all required attributes.
		/// </summary>
		public IfcFeatureElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFeatureElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFeatureElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcFeatureElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFeatureElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfurnishingelement.htm"/>
	/// </summary>
	public  partial class IfcFurnishingElement : IfcElement
	{
		/// <summary>
		/// Construct a IfcFurnishingElement with all required attributes.
		/// </summary>
		public IfcFurnishingElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFurnishingElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFurnishingElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcFurnishingElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFurnishingElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeographicelement.htm"/>
	/// </summary>
	public  partial class IfcGeographicElement : IfcElement
	{
		public IfcGeographicElementTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcGeographicElement with all required attributes.
		/// </summary>
		public IfcGeographicElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcGeographicElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcGeographicElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcGeographicElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcGeographicElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeographicElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransportelement.htm"/>
	/// </summary>
	public  partial class IfcTransportElement : IfcElement
	{
		public IfcTransportElementTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcTransportElement with all required attributes.
		/// </summary>
		public IfcTransportElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcTransportElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTransportElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcTransportElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcTransportElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTransportElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvirtualelement.htm"/>
	/// </summary>
	public  partial class IfcVirtualElement : IfcElement
	{
		/// <summary>
		/// Construct a IfcVirtualElement with all required attributes.
		/// </summary>
		public IfcVirtualElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcVirtualElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcVirtualElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcVirtualElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVirtualElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementassemblytype.htm"/>
	/// </summary>
	public  partial class IfcElementAssemblyType : IfcElementType
	{
		public IfcElementAssemblyTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcElementAssemblyType with all required attributes.
		/// </summary>
		public IfcElementAssemblyType(IfcGloballyUniqueId globalId,IfcElementAssemblyTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcElementAssemblyType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElementAssemblyType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcElementAssemblyTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcElementAssemblyType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementAssemblyType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfastener.htm"/>
	/// </summary>
	public  partial class IfcFastener : IfcElementComponent
	{
		public IfcFastenerTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcFastener with all required attributes.
		/// </summary>
		public IfcFastener(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFastener with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFastener(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcFastenerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFastener FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFastener>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmechanicalfastener.htm"/>
	/// </summary>
	public  partial class IfcMechanicalFastener : IfcElementComponent
	{
		public IfcPositiveLengthMeasure NominalDiameter{get;set;} // optional
		public IfcPositiveLengthMeasure NominalLength{get;set;} // optional
		public IfcMechanicalFastenerTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcMechanicalFastener with all required attributes.
		/// </summary>
		public IfcMechanicalFastener(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcMechanicalFastener with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMechanicalFastener(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcPositiveLengthMeasure nominalDiameter,IfcPositiveLengthMeasure nominalLength,IfcMechanicalFastenerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			NominalDiameter = nominalDiameter;
			NominalLength = nominalLength;
			PredefinedType = predefinedType;

		}
		public static new IfcMechanicalFastener FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMechanicalFastener>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingelement.htm"/>
	/// </summary>
	public abstract partial class IfcReinforcingElement : IfcElementComponent
	{
		public IfcLabel SteelGrade{get;set;} // optional

		/// <summary>
		/// Construct a IfcReinforcingElement with all required attributes.
		/// </summary>
		public IfcReinforcingElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcReinforcingElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcReinforcingElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcLabel steelGrade):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			SteelGrade = steelGrade;

		}
		public static new IfcReinforcingElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcingElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvibrationisolator.htm"/>
	/// </summary>
	public  partial class IfcVibrationIsolator : IfcElementComponent
	{
		public IfcVibrationIsolatorTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcVibrationIsolator with all required attributes.
		/// </summary>
		public IfcVibrationIsolator(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcVibrationIsolator with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcVibrationIsolator(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcVibrationIsolatorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcVibrationIsolator FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVibrationIsolator>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfastenertype.htm"/>
	/// </summary>
	public  partial class IfcFastenerType : IfcElementComponentType
	{
		public IfcFastenerTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcFastenerType with all required attributes.
		/// </summary>
		public IfcFastenerType(IfcGloballyUniqueId globalId,IfcFastenerTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcFastenerType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFastenerType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcFastenerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFastenerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFastenerType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmechanicalfastenertype.htm"/>
	/// </summary>
	public  partial class IfcMechanicalFastenerType : IfcElementComponentType
	{
		public IfcMechanicalFastenerTypeEnum PredefinedType{get;set;} 
		public IfcPositiveLengthMeasure NominalDiameter{get;set;} // optional
		public IfcPositiveLengthMeasure NominalLength{get;set;} // optional

		/// <summary>
		/// Construct a IfcMechanicalFastenerType with all required attributes.
		/// </summary>
		public IfcMechanicalFastenerType(IfcGloballyUniqueId globalId,IfcMechanicalFastenerTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcMechanicalFastenerType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMechanicalFastenerType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcMechanicalFastenerTypeEnum predefinedType,IfcPositiveLengthMeasure nominalDiameter,IfcPositiveLengthMeasure nominalLength):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;
			NominalDiameter = nominalDiameter;
			NominalLength = nominalLength;

		}
		public static new IfcMechanicalFastenerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMechanicalFastenerType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcReinforcingElementType : IfcElementComponentType
	{
		/// <summary>
		/// Construct a IfcReinforcingElementType with all required attributes.
		/// </summary>
		public IfcReinforcingElementType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcReinforcingElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcReinforcingElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcReinforcingElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcingElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvibrationisolatortype.htm"/>
	/// </summary>
	public  partial class IfcVibrationIsolatorType : IfcElementComponentType
	{
		public IfcVibrationIsolatorTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcVibrationIsolatorType with all required attributes.
		/// </summary>
		public IfcVibrationIsolatorType(IfcGloballyUniqueId globalId,IfcVibrationIsolatorTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcVibrationIsolatorType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcVibrationIsolatorType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcVibrationIsolatorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcVibrationIsolatorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVibrationIsolatorType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementquantity.htm"/>
	/// </summary>
	public  partial class IfcElementQuantity : IfcQuantitySet
	{
		public IfcLabel MethodOfMeasurement{get;set;} // optional
		public List<IfcPhysicalQuantity> Quantities{get;set;} 

		/// <summary>
		/// Construct a IfcElementQuantity with all required attributes.
		/// </summary>
		public IfcElementQuantity(IfcGloballyUniqueId globalId,List<IfcPhysicalQuantity> quantities):base(globalId)
		{
			Quantities = quantities;

		}
		/// <summary>
		/// Construct a IfcElementQuantity with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcElementQuantity(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel methodOfMeasurement,List<IfcPhysicalQuantity> quantities):base(globalId,ownerHistory,name,description)
		{
			MethodOfMeasurement = methodOfMeasurement;
			Quantities = quantities;

		}
		public static new IfcElementQuantity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementQuantity>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantityset.htm"/>
	/// </summary>
	public abstract partial class IfcQuantitySet : IfcPropertySetDefinition
	{
		/// <summary>
		/// Construct a IfcQuantitySet with all required attributes.
		/// </summary>
		public IfcQuantitySet(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcQuantitySet with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcQuantitySet(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description):base(globalId,ownerHistory,name,description)
		{

		}
		public static new IfcQuantitySet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantitySet>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfurnishingelementtype.htm"/>
	/// </summary>
	public  partial class IfcFurnishingElementType : IfcElementType
	{
		/// <summary>
		/// Construct a IfcFurnishingElementType with all required attributes.
		/// </summary>
		public IfcFurnishingElementType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFurnishingElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFurnishingElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcFurnishingElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFurnishingElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeographicelementtype.htm"/>
	/// </summary>
	public  partial class IfcGeographicElementType : IfcElementType
	{
		public IfcGeographicElementTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcGeographicElementType with all required attributes.
		/// </summary>
		public IfcGeographicElementType(IfcGloballyUniqueId globalId,IfcGeographicElementTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcGeographicElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcGeographicElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcGeographicElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcGeographicElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeographicElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransportelementtype.htm"/>
	/// </summary>
	public  partial class IfcTransportElementType : IfcElementType
	{
		public IfcTransportElementTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcTransportElementType with all required attributes.
		/// </summary>
		public IfcTransportElementType(IfcGloballyUniqueId globalId,IfcTransportElementTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcTransportElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTransportElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcTransportElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcTransportElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTransportElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplane.htm"/>
	/// </summary>
	public  partial class IfcPlane : IfcElementarySurface
	{
		/// <summary>
		/// Construct a IfcPlane with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPlane(IfcAxis2Placement3D position):base(position)
		{

		}
		public static new IfcPlane FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlane>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcellipseprofiledef.htm"/>
	/// </summary>
	public  partial class IfcEllipseProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure SemiAxis1{get;set;} 
		public IfcPositiveLengthMeasure SemiAxis2{get;set;} 

		/// <summary>
		/// Construct a IfcEllipseProfileDef with all required attributes.
		/// </summary>
		public IfcEllipseProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure semiAxis1,IfcPositiveLengthMeasure semiAxis2):base(profileType)
		{
			SemiAxis1 = semiAxis1;
			SemiAxis2 = semiAxis2;

		}
		/// <summary>
		/// Construct a IfcEllipseProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEllipseProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure semiAxis1,IfcPositiveLengthMeasure semiAxis2):base(profileType,profileName,position)
		{
			SemiAxis1 = semiAxis1;
			SemiAxis2 = semiAxis2;

		}
		public static new IfcEllipseProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEllipseProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcengine.htm"/>
	/// </summary>
	public  partial class IfcEngine : IfcEnergyConversionDevice
	{
		public IfcEngineTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcEngine with all required attributes.
		/// </summary>
		public IfcEngine(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcEngine with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEngine(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcEngineTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcEngine FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEngine>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevaporativecooler.htm"/>
	/// </summary>
	public  partial class IfcEvaporativeCooler : IfcEnergyConversionDevice
	{
		public IfcEvaporativeCoolerTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcEvaporativeCooler with all required attributes.
		/// </summary>
		public IfcEvaporativeCooler(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcEvaporativeCooler with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEvaporativeCooler(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcEvaporativeCoolerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcEvaporativeCooler FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEvaporativeCooler>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevaporator.htm"/>
	/// </summary>
	public  partial class IfcEvaporator : IfcEnergyConversionDevice
	{
		public IfcEvaporatorTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcEvaporator with all required attributes.
		/// </summary>
		public IfcEvaporator(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcEvaporator with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEvaporator(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcEvaporatorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcEvaporator FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEvaporator>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcheatexchanger.htm"/>
	/// </summary>
	public  partial class IfcHeatExchanger : IfcEnergyConversionDevice
	{
		public IfcHeatExchangerTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcHeatExchanger with all required attributes.
		/// </summary>
		public IfcHeatExchanger(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcHeatExchanger with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcHeatExchanger(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcHeatExchangerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcHeatExchanger FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHeatExchanger>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifchumidifier.htm"/>
	/// </summary>
	public  partial class IfcHumidifier : IfcEnergyConversionDevice
	{
		public IfcHumidifierTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcHumidifier with all required attributes.
		/// </summary>
		public IfcHumidifier(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcHumidifier with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcHumidifier(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcHumidifierTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcHumidifier FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHumidifier>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmotorconnection.htm"/>
	/// </summary>
	public  partial class IfcMotorConnection : IfcEnergyConversionDevice
	{
		public IfcMotorConnectionTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcMotorConnection with all required attributes.
		/// </summary>
		public IfcMotorConnection(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcMotorConnection with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMotorConnection(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcMotorConnectionTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcMotorConnection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMotorConnection>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsolardevice.htm"/>
	/// </summary>
	public  partial class IfcSolarDevice : IfcEnergyConversionDevice
	{
		public IfcSolarDeviceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcSolarDevice with all required attributes.
		/// </summary>
		public IfcSolarDevice(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSolarDevice with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSolarDevice(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcSolarDeviceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSolarDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSolarDevice>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransformer.htm"/>
	/// </summary>
	public  partial class IfcTransformer : IfcEnergyConversionDevice
	{
		public IfcTransformerTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcTransformer with all required attributes.
		/// </summary>
		public IfcTransformer(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcTransformer with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTransformer(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcTransformerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcTransformer FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTransformer>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctubebundle.htm"/>
	/// </summary>
	public  partial class IfcTubeBundle : IfcEnergyConversionDevice
	{
		public IfcTubeBundleTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcTubeBundle with all required attributes.
		/// </summary>
		public IfcTubeBundle(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcTubeBundle with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTubeBundle(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcTubeBundleTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcTubeBundle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTubeBundle>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitaryequipment.htm"/>
	/// </summary>
	public  partial class IfcUnitaryEquipment : IfcEnergyConversionDevice
	{
		public IfcUnitaryEquipmentTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcUnitaryEquipment with all required attributes.
		/// </summary>
		public IfcUnitaryEquipment(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcUnitaryEquipment with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcUnitaryEquipment(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcUnitaryEquipmentTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcUnitaryEquipment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUnitaryEquipment>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcenginetype.htm"/>
	/// </summary>
	public  partial class IfcEngineType : IfcEnergyConversionDeviceType
	{
		public IfcEngineTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcEngineType with all required attributes.
		/// </summary>
		public IfcEngineType(IfcGloballyUniqueId globalId,IfcEngineTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcEngineType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEngineType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcEngineTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcEngineType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEngineType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevaporativecoolertype.htm"/>
	/// </summary>
	public  partial class IfcEvaporativeCoolerType : IfcEnergyConversionDeviceType
	{
		public IfcEvaporativeCoolerTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcEvaporativeCoolerType with all required attributes.
		/// </summary>
		public IfcEvaporativeCoolerType(IfcGloballyUniqueId globalId,IfcEvaporativeCoolerTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcEvaporativeCoolerType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEvaporativeCoolerType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcEvaporativeCoolerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcEvaporativeCoolerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEvaporativeCoolerType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevaporatortype.htm"/>
	/// </summary>
	public  partial class IfcEvaporatorType : IfcEnergyConversionDeviceType
	{
		public IfcEvaporatorTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcEvaporatorType with all required attributes.
		/// </summary>
		public IfcEvaporatorType(IfcGloballyUniqueId globalId,IfcEvaporatorTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcEvaporatorType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEvaporatorType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcEvaporatorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcEvaporatorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEvaporatorType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcheatexchangertype.htm"/>
	/// </summary>
	public  partial class IfcHeatExchangerType : IfcEnergyConversionDeviceType
	{
		public IfcHeatExchangerTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcHeatExchangerType with all required attributes.
		/// </summary>
		public IfcHeatExchangerType(IfcGloballyUniqueId globalId,IfcHeatExchangerTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcHeatExchangerType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcHeatExchangerType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcHeatExchangerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcHeatExchangerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHeatExchangerType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifchumidifiertype.htm"/>
	/// </summary>
	public  partial class IfcHumidifierType : IfcEnergyConversionDeviceType
	{
		public IfcHumidifierTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcHumidifierType with all required attributes.
		/// </summary>
		public IfcHumidifierType(IfcGloballyUniqueId globalId,IfcHumidifierTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcHumidifierType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcHumidifierType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcHumidifierTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcHumidifierType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHumidifierType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmotorconnectiontype.htm"/>
	/// </summary>
	public  partial class IfcMotorConnectionType : IfcEnergyConversionDeviceType
	{
		public IfcMotorConnectionTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcMotorConnectionType with all required attributes.
		/// </summary>
		public IfcMotorConnectionType(IfcGloballyUniqueId globalId,IfcMotorConnectionTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcMotorConnectionType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMotorConnectionType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcMotorConnectionTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcMotorConnectionType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMotorConnectionType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsolardevicetype.htm"/>
	/// </summary>
	public  partial class IfcSolarDeviceType : IfcEnergyConversionDeviceType
	{
		public IfcSolarDeviceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcSolarDeviceType with all required attributes.
		/// </summary>
		public IfcSolarDeviceType(IfcGloballyUniqueId globalId,IfcSolarDeviceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcSolarDeviceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSolarDeviceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcSolarDeviceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSolarDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSolarDeviceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransformertype.htm"/>
	/// </summary>
	public  partial class IfcTransformerType : IfcEnergyConversionDeviceType
	{
		public IfcTransformerTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcTransformerType with all required attributes.
		/// </summary>
		public IfcTransformerType(IfcGloballyUniqueId globalId,IfcTransformerTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcTransformerType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTransformerType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcTransformerTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcTransformerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTransformerType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctubebundletype.htm"/>
	/// </summary>
	public  partial class IfcTubeBundleType : IfcEnergyConversionDeviceType
	{
		public IfcTubeBundleTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcTubeBundleType with all required attributes.
		/// </summary>
		public IfcTubeBundleType(IfcGloballyUniqueId globalId,IfcTubeBundleTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcTubeBundleType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTubeBundleType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcTubeBundleTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcTubeBundleType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTubeBundleType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitaryequipmenttype.htm"/>
	/// </summary>
	public  partial class IfcUnitaryEquipmentType : IfcEnergyConversionDeviceType
	{
		public IfcUnitaryEquipmentTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcUnitaryEquipmentType with all required attributes.
		/// </summary>
		public IfcUnitaryEquipmentType(IfcGloballyUniqueId globalId,IfcUnitaryEquipmentTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcUnitaryEquipmentType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcUnitaryEquipmentType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcUnitaryEquipmentTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcUnitaryEquipmentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUnitaryEquipmentType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevent.htm"/>
	/// </summary>
	public  partial class IfcEvent : IfcProcess
	{
		public IfcEventTypeEnum PredefinedType{get;set;} // optional
		public IfcEventTriggerTypeEnum EventTriggerType{get;set;} // optional
		public IfcLabel UserDefinedEventTriggerType{get;set;} // optional
		public IfcEventTime EventOccurenceTime{get;set;} // optional

		/// <summary>
		/// Construct a IfcEvent with all required attributes.
		/// </summary>
		public IfcEvent(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcEvent with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEvent(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcText longDescription,IfcEventTypeEnum predefinedType,IfcEventTriggerTypeEnum eventTriggerType,IfcLabel userDefinedEventTriggerType,IfcEventTime eventOccurenceTime):base(globalId,ownerHistory,name,description,objectType,identification,longDescription)
		{
			PredefinedType = predefinedType;
			EventTriggerType = eventTriggerType;
			UserDefinedEventTriggerType = userDefinedEventTriggerType;
			EventOccurenceTime = eventOccurenceTime;

		}
		public static new IfcEvent FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEvent>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprocess.htm"/>
	/// </summary>
	public abstract partial class IfcProcess : IfcObject
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional

		/// <summary>
		/// Construct a IfcProcess with all required attributes.
		/// </summary>
		public IfcProcess(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcProcess with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProcess(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcText longDescription):base(globalId,ownerHistory,name,description,objectType)
		{
			Identification = identification;
			LongDescription = longDescription;

		}
		public static new IfcProcess FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProcess>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifceventtime.htm"/>
	/// </summary>
	public  partial class IfcEventTime : IfcSchedulingTime
	{
		public IfcDateTime ActualDate{get;set;} // optional
		public IfcDateTime EarlyDate{get;set;} // optional
		public IfcDateTime LateDate{get;set;} // optional
		public IfcDateTime ScheduleDate{get;set;} // optional

		/// <summary>
		/// Construct a IfcEventTime with all required attributes.
		/// </summary>
		public IfcEventTime():base()
		{

		}
		/// <summary>
		/// Construct a IfcEventTime with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEventTime(IfcLabel name,IfcDataOriginEnum dataOrigin,IfcLabel userDefinedDataOrigin,IfcDateTime actualDate,IfcDateTime earlyDate,IfcDateTime lateDate,IfcDateTime scheduleDate):base(name,dataOrigin,userDefinedDataOrigin)
		{
			ActualDate = actualDate;
			EarlyDate = earlyDate;
			LateDate = lateDate;
			ScheduleDate = scheduleDate;

		}
		public static new IfcEventTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEventTime>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcschedulingtime.htm"/>
	/// </summary>
	public abstract partial class IfcSchedulingTime : BaseIfc
	{
		public IfcLabel Name{get;set;} // optional
		public IfcDataOriginEnum DataOrigin{get;set;} // optional
		public IfcLabel UserDefinedDataOrigin{get;set;} // optional

		/// <summary>
		/// Construct a IfcSchedulingTime with all required attributes.
		/// </summary>
		public IfcSchedulingTime():base()
		{

		}
		/// <summary>
		/// Construct a IfcSchedulingTime with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSchedulingTime(IfcLabel name,IfcDataOriginEnum dataOrigin,IfcLabel userDefinedDataOrigin):base()
		{
			Name = name;
			DataOrigin = dataOrigin;
			UserDefinedDataOrigin = userDefinedDataOrigin;

		}
		public static  IfcSchedulingTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSchedulingTime>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifceventtype.htm"/>
	/// </summary>
	public  partial class IfcEventType : IfcTypeProcess
	{
		public IfcEventTypeEnum PredefinedType{get;set;} 
		public IfcEventTriggerTypeEnum EventTriggerType{get;set;} 
		public IfcLabel UserDefinedEventTriggerType{get;set;} // optional

		/// <summary>
		/// Construct a IfcEventType with all required attributes.
		/// </summary>
		public IfcEventType(IfcGloballyUniqueId globalId,IfcEventTypeEnum predefinedType,IfcEventTriggerTypeEnum eventTriggerType):base(globalId)
		{
			PredefinedType = predefinedType;
			EventTriggerType = eventTriggerType;

		}
		/// <summary>
		/// Construct a IfcEventType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcEventType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,IfcIdentifier identification,IfcText longDescription,IfcLabel processType,IfcEventTypeEnum predefinedType,IfcEventTriggerTypeEnum eventTriggerType,IfcLabel userDefinedEventTriggerType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,identification,longDescription,processType)
		{
			PredefinedType = predefinedType;
			EventTriggerType = eventTriggerType;
			UserDefinedEventTriggerType = userDefinedEventTriggerType;

		}
		public static new IfcEventType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEventType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctypeprocess.htm"/>
	/// </summary>
	public abstract partial class IfcTypeProcess : IfcTypeObject
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional
		public IfcLabel ProcessType{get;set;} // optional

		/// <summary>
		/// Construct a IfcTypeProcess with all required attributes.
		/// </summary>
		public IfcTypeProcess(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcTypeProcess with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTypeProcess(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,IfcIdentifier identification,IfcText longDescription,IfcLabel processType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets)
		{
			Identification = identification;
			LongDescription = longDescription;
			ProcessType = processType;

		}
		public static new IfcTypeProcess FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTypeProcess>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcextendedproperties.htm"/>
	/// </summary>
	public abstract partial class IfcExtendedProperties : IfcPropertyAbstraction
	{
		public IfcIdentifier Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public List<IfcProperty> Properties{get;set;} 

		/// <summary>
		/// Construct a IfcExtendedProperties with all required attributes.
		/// </summary>
		public IfcExtendedProperties(List<IfcProperty> properties):base()
		{
			Properties = properties;

		}
		/// <summary>
		/// Construct a IfcExtendedProperties with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcExtendedProperties(IfcIdentifier name,IfcText description,List<IfcProperty> properties):base()
		{
			Name = name;
			Description = description;
			Properties = properties;

		}
		public static new IfcExtendedProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExtendedProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialproperties.htm"/>
	/// </summary>
	public  partial class IfcMaterialProperties : IfcExtendedProperties
	{
		public IfcMaterialDefinition Material{get;set;} 

		/// <summary>
		/// Construct a IfcMaterialProperties with all required attributes.
		/// </summary>
		public IfcMaterialProperties(List<IfcProperty> properties,IfcMaterialDefinition material):base(properties)
		{
			Material = material;

		}
		/// <summary>
		/// Construct a IfcMaterialProperties with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialProperties(IfcIdentifier name,IfcText description,List<IfcProperty> properties,IfcMaterialDefinition material):base(name,description,properties)
		{
			Material = material;

		}
		public static new IfcMaterialProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprofileproperties.htm"/>
	/// </summary>
	public  partial class IfcProfileProperties : IfcExtendedProperties
	{
		public IfcProfileDef ProfileDefinition{get;set;} 

		/// <summary>
		/// Construct a IfcProfileProperties with all required attributes.
		/// </summary>
		public IfcProfileProperties(List<IfcProperty> properties,IfcProfileDef profileDefinition):base(properties)
		{
			ProfileDefinition = profileDefinition;

		}
		/// <summary>
		/// Construct a IfcProfileProperties with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProfileProperties(IfcIdentifier name,IfcText description,List<IfcProperty> properties,IfcProfileDef profileDefinition):base(name,description,properties)
		{
			ProfileDefinition = profileDefinition;

		}
		public static new IfcProfileProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProfileProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertyabstraction.htm"/>
	/// </summary>
	public abstract partial class IfcPropertyAbstraction : BaseIfc
	{
		/// <summary>
		/// Construct a IfcPropertyAbstraction with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertyAbstraction():base()
		{

		}
		public static  IfcPropertyAbstraction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyAbstraction>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclibraryinformation.htm"/>
	/// </summary>
	public  partial class IfcLibraryInformation : IfcExternalInformation
	{
		public IfcLabel Name{get;set;} 
		public IfcLabel Version{get;set;} // optional
		public IfcActorSelect Publisher{get;set;} // optional
		public IfcDateTime VersionDate{get;set;} // optional
		public IfcURIReference Location{get;set;} // optional
		public IfcText Description{get;set;} // optional

		/// <summary>
		/// Construct a IfcLibraryInformation with all required attributes.
		/// </summary>
		public IfcLibraryInformation(IfcLabel name):base()
		{
			Name = name;

		}
		/// <summary>
		/// Construct a IfcLibraryInformation with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLibraryInformation(IfcLabel name,IfcLabel version,IfcActorSelect publisher,IfcDateTime versionDate,IfcURIReference location,IfcText description):base()
		{
			Name = name;
			Version = version;
			Publisher = publisher;
			VersionDate = versionDate;
			Location = location;
			Description = description;

		}
		public static new IfcLibraryInformation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLibraryInformation>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternallydefinedhatchstyle.htm"/>
	/// </summary>
	public  partial class IfcExternallyDefinedHatchStyle : IfcExternalReference
	{
		/// <summary>
		/// Construct a IfcExternallyDefinedHatchStyle with all required attributes.
		/// </summary>
		public IfcExternallyDefinedHatchStyle():base()
		{

		}
		/// <summary>
		/// Construct a IfcExternallyDefinedHatchStyle with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcExternallyDefinedHatchStyle(IfcURIReference location,IfcIdentifier identification,IfcLabel name):base(location,identification,name)
		{

		}
		public static new IfcExternallyDefinedHatchStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternallyDefinedHatchStyle>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternallydefinedsurfacestyle.htm"/>
	/// </summary>
	public  partial class IfcExternallyDefinedSurfaceStyle : IfcExternalReference
	{
		/// <summary>
		/// Construct a IfcExternallyDefinedSurfaceStyle with all required attributes.
		/// </summary>
		public IfcExternallyDefinedSurfaceStyle():base()
		{

		}
		/// <summary>
		/// Construct a IfcExternallyDefinedSurfaceStyle with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcExternallyDefinedSurfaceStyle(IfcURIReference location,IfcIdentifier identification,IfcLabel name):base(location,identification,name)
		{

		}
		public static new IfcExternallyDefinedSurfaceStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternallyDefinedSurfaceStyle>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternallydefinedtextfont.htm"/>
	/// </summary>
	public  partial class IfcExternallyDefinedTextFont : IfcExternalReference
	{
		/// <summary>
		/// Construct a IfcExternallyDefinedTextFont with all required attributes.
		/// </summary>
		public IfcExternallyDefinedTextFont():base()
		{

		}
		/// <summary>
		/// Construct a IfcExternallyDefinedTextFont with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcExternallyDefinedTextFont(IfcURIReference location,IfcIdentifier identification,IfcLabel name):base(location,identification,name)
		{

		}
		public static new IfcExternallyDefinedTextFont FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternallyDefinedTextFont>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclibraryreference.htm"/>
	/// </summary>
	public  partial class IfcLibraryReference : IfcExternalReference
	{
		public IfcText Description{get;set;} // optional
		public IfcLanguageId Language{get;set;} // optional
		public IfcLibraryInformation ReferencedLibrary{get;set;} // optional

		/// <summary>
		/// Construct a IfcLibraryReference with all required attributes.
		/// </summary>
		public IfcLibraryReference():base()
		{

		}
		/// <summary>
		/// Construct a IfcLibraryReference with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLibraryReference(IfcURIReference location,IfcIdentifier identification,IfcLabel name,IfcText description,IfcLanguageId language,IfcLibraryInformation referencedLibrary):base(location,identification,name)
		{
			Description = description;
			Language = language;
			ReferencedLibrary = referencedLibrary;

		}
		public static new IfcLibraryReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLibraryReference>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternalreferencerelationship.htm"/>
	/// </summary>
	public  partial class IfcExternalReferenceRelationship : IfcResourceLevelRelationship
	{
		public IfcExternalReference RelatingReference{get;set;} 
		public List<IfcResourceObjectSelect> RelatedResourceObjects{get;set;} 

		/// <summary>
		/// Construct a IfcExternalReferenceRelationship with all required attributes.
		/// </summary>
		public IfcExternalReferenceRelationship(IfcExternalReference relatingReference,List<IfcResourceObjectSelect> relatedResourceObjects):base()
		{
			RelatingReference = relatingReference;
			RelatedResourceObjects = relatedResourceObjects;

		}
		/// <summary>
		/// Construct a IfcExternalReferenceRelationship with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcExternalReferenceRelationship(IfcLabel name,IfcText description,IfcExternalReference relatingReference,List<IfcResourceObjectSelect> relatedResourceObjects):base(name,description)
		{
			RelatingReference = relatingReference;
			RelatedResourceObjects = relatedResourceObjects;

		}
		public static new IfcExternalReferenceRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternalReferenceRelationship>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternalspatialelement.htm"/>
	/// </summary>
	public  partial class IfcExternalSpatialElement : IfcExternalSpatialStructureElement
	{
		public IfcExternalSpatialElementTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcExternalSpatialElement with all required attributes.
		/// </summary>
		public IfcExternalSpatialElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcExternalSpatialElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcExternalSpatialElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcLabel longName,IfcExternalSpatialElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,longName)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcExternalSpatialElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternalSpatialElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternalspatialstructureelement.htm"/>
	/// </summary>
	public abstract partial class IfcExternalSpatialStructureElement : IfcSpatialElement
	{
		/// <summary>
		/// Construct a IfcExternalSpatialStructureElement with all required attributes.
		/// </summary>
		public IfcExternalSpatialStructureElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcExternalSpatialStructureElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcExternalSpatialStructureElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcLabel longName):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,longName)
		{

		}
		public static new IfcExternalSpatialStructureElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternalSpatialStructureElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialelement.htm"/>
	/// </summary>
	public abstract partial class IfcSpatialElement : IfcProduct
	{
		public IfcLabel LongName{get;set;} // optional

		/// <summary>
		/// Construct a IfcSpatialElement with all required attributes.
		/// </summary>
		public IfcSpatialElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSpatialElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSpatialElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcLabel longName):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation)
		{
			LongName = longName;

		}
		public static new IfcSpatialElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpatialElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcextrudedareasolid.htm"/>
	/// </summary>
	public  partial class IfcExtrudedAreaSolid : IfcSweptAreaSolid
	{
		public IfcDirection ExtrudedDirection{get;set;} 
		public IfcPositiveLengthMeasure Depth{get;set;} 

		/// <summary>
		/// Construct a IfcExtrudedAreaSolid with all required attributes.
		/// </summary>
		public IfcExtrudedAreaSolid(IfcProfileDef sweptArea,IfcDirection extrudedDirection,IfcPositiveLengthMeasure depth):base(sweptArea)
		{
			ExtrudedDirection = extrudedDirection;
			Depth = depth;

		}
		/// <summary>
		/// Construct a IfcExtrudedAreaSolid with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcExtrudedAreaSolid(IfcProfileDef sweptArea,IfcAxis2Placement3D position,IfcDirection extrudedDirection,IfcPositiveLengthMeasure depth):base(sweptArea,position)
		{
			ExtrudedDirection = extrudedDirection;
			Depth = depth;

		}
		public static new IfcExtrudedAreaSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExtrudedAreaSolid>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcextrudedareasolidtapered.htm"/>
	/// </summary>
	public  partial class IfcExtrudedAreaSolidTapered : IfcExtrudedAreaSolid
	{
		public IfcProfileDef EndSweptArea{get;set;} 

		/// <summary>
		/// Construct a IfcExtrudedAreaSolidTapered with all required attributes.
		/// </summary>
		public IfcExtrudedAreaSolidTapered(IfcProfileDef sweptArea,IfcDirection extrudedDirection,IfcPositiveLengthMeasure depth,IfcProfileDef endSweptArea):base(sweptArea,extrudedDirection,depth)
		{
			EndSweptArea = endSweptArea;

		}
		/// <summary>
		/// Construct a IfcExtrudedAreaSolidTapered with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcExtrudedAreaSolidTapered(IfcProfileDef sweptArea,IfcAxis2Placement3D position,IfcDirection extrudedDirection,IfcPositiveLengthMeasure depth,IfcProfileDef endSweptArea):base(sweptArea,position,extrudedDirection,depth)
		{
			EndSweptArea = endSweptArea;

		}
		public static new IfcExtrudedAreaSolidTapered FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExtrudedAreaSolidTapered>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsweptareasolid.htm"/>
	/// </summary>
	public abstract partial class IfcSweptAreaSolid : IfcSolidModel
	{
		public IfcProfileDef SweptArea{get;set;} 
		public IfcAxis2Placement3D Position{get;set;} // optional

		/// <summary>
		/// Construct a IfcSweptAreaSolid with all required attributes.
		/// </summary>
		public IfcSweptAreaSolid(IfcProfileDef sweptArea):base()
		{
			SweptArea = sweptArea;

		}
		/// <summary>
		/// Construct a IfcSweptAreaSolid with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSweptAreaSolid(IfcProfileDef sweptArea,IfcAxis2Placement3D position):base()
		{
			SweptArea = sweptArea;
			Position = position;

		}
		public static new IfcSweptAreaSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSweptAreaSolid>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcface.htm"/>
	/// </summary>
	public  partial class IfcFace : IfcTopologicalRepresentationItem
	{
		public List<IfcFaceBound> Bounds{get;set;} 

		/// <summary>
		/// Construct a IfcFace with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFace(List<IfcFaceBound> bounds):base()
		{
			Bounds = bounds;

		}
		public static new IfcFace FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFace>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfacebasedsurfacemodel.htm"/>
	/// </summary>
	public  partial class IfcFaceBasedSurfaceModel : IfcGeometricRepresentationItem
	{
		public List<IfcConnectedFaceSet> FbsmFaces{get;set;} 

		/// <summary>
		/// Construct a IfcFaceBasedSurfaceModel with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFaceBasedSurfaceModel(List<IfcConnectedFaceSet> fbsmFaces):base()
		{
			FbsmFaces = fbsmFaces;

		}
		public static new IfcFaceBasedSurfaceModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFaceBasedSurfaceModel>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfacebound.htm"/>
	/// </summary>
	public  partial class IfcFaceBound : IfcTopologicalRepresentationItem
	{
		public IfcLoop Bound{get;set;} 
		public bool Orientation{get;set;} 

		/// <summary>
		/// Construct a IfcFaceBound with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFaceBound(IfcLoop bound,bool orientation):base()
		{
			Bound = bound;
			Orientation = orientation;

		}
		public static new IfcFaceBound FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFaceBound>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfaceouterbound.htm"/>
	/// </summary>
	public  partial class IfcFaceOuterBound : IfcFaceBound
	{
		/// <summary>
		/// Construct a IfcFaceOuterBound with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFaceOuterBound(IfcLoop bound,bool orientation):base(bound,orientation)
		{

		}
		public static new IfcFaceOuterBound FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFaceOuterBound>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfacetedbrep.htm"/>
	/// </summary>
	public  partial class IfcFacetedBrep : IfcManifoldSolidBrep
	{
		/// <summary>
		/// Construct a IfcFacetedBrep with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFacetedBrep(IfcClosedShell outer):base(outer)
		{

		}
		public static new IfcFacetedBrep FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFacetedBrep>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfacetedbrepwithvoids.htm"/>
	/// </summary>
	public  partial class IfcFacetedBrepWithVoids : IfcFacetedBrep
	{
		public List<IfcClosedShell> Voids{get;set;} 

		/// <summary>
		/// Construct a IfcFacetedBrepWithVoids with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFacetedBrepWithVoids(IfcClosedShell outer,List<IfcClosedShell> voids):base(outer)
		{
			Voids = voids;

		}
		public static new IfcFacetedBrepWithVoids FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFacetedBrepWithVoids>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfailureconnectioncondition.htm"/>
	/// </summary>
	public  partial class IfcFailureConnectionCondition : IfcStructuralConnectionCondition
	{
		public IfcForceMeasure TensionFailureX{get;set;} // optional
		public IfcForceMeasure TensionFailureY{get;set;} // optional
		public IfcForceMeasure TensionFailureZ{get;set;} // optional
		public IfcForceMeasure CompressionFailureX{get;set;} // optional
		public IfcForceMeasure CompressionFailureY{get;set;} // optional
		public IfcForceMeasure CompressionFailureZ{get;set;} // optional

		/// <summary>
		/// Construct a IfcFailureConnectionCondition with all required attributes.
		/// </summary>
		public IfcFailureConnectionCondition():base()
		{

		}
		/// <summary>
		/// Construct a IfcFailureConnectionCondition with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFailureConnectionCondition(IfcLabel name,IfcForceMeasure tensionFailureX,IfcForceMeasure tensionFailureY,IfcForceMeasure tensionFailureZ,IfcForceMeasure compressionFailureX,IfcForceMeasure compressionFailureY,IfcForceMeasure compressionFailureZ):base(name)
		{
			TensionFailureX = tensionFailureX;
			TensionFailureY = tensionFailureY;
			TensionFailureZ = tensionFailureZ;
			CompressionFailureX = compressionFailureX;
			CompressionFailureY = compressionFailureY;
			CompressionFailureZ = compressionFailureZ;

		}
		public static new IfcFailureConnectionCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFailureConnectionCondition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralconnectioncondition.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralConnectionCondition : BaseIfc
	{
		public IfcLabel Name{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralConnectionCondition with all required attributes.
		/// </summary>
		public IfcStructuralConnectionCondition():base()
		{

		}
		/// <summary>
		/// Construct a IfcStructuralConnectionCondition with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralConnectionCondition(IfcLabel name):base()
		{
			Name = name;

		}
		public static  IfcStructuralConnectionCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralConnectionCondition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfan.htm"/>
	/// </summary>
	public  partial class IfcFan : IfcFlowMovingDevice
	{
		public IfcFanTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcFan with all required attributes.
		/// </summary>
		public IfcFan(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFan with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFan(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcFanTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFan FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFan>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfantype.htm"/>
	/// </summary>
	public  partial class IfcFanType : IfcFlowMovingDeviceType
	{
		public IfcFanTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcFanType with all required attributes.
		/// </summary>
		public IfcFanType(IfcGloballyUniqueId globalId,IfcFanTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcFanType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFanType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcFanTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFanType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFanType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfeatureelementaddition.htm"/>
	/// </summary>
	public abstract partial class IfcFeatureElementAddition : IfcFeatureElement
	{
		/// <summary>
		/// Construct a IfcFeatureElementAddition with all required attributes.
		/// </summary>
		public IfcFeatureElementAddition(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFeatureElementAddition with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFeatureElementAddition(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcFeatureElementAddition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFeatureElementAddition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfeatureelementsubtraction.htm"/>
	/// </summary>
	public abstract partial class IfcFeatureElementSubtraction : IfcFeatureElement
	{
		/// <summary>
		/// Construct a IfcFeatureElementSubtraction with all required attributes.
		/// </summary>
		public IfcFeatureElementSubtraction(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFeatureElementSubtraction with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFeatureElementSubtraction(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{

		}
		public static new IfcFeatureElementSubtraction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFeatureElementSubtraction>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacefeature.htm"/>
	/// </summary>
	public  partial class IfcSurfaceFeature : IfcFeatureElement
	{
		public IfcSurfaceFeatureTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcSurfaceFeature with all required attributes.
		/// </summary>
		public IfcSurfaceFeature(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSurfaceFeature with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSurfaceFeature(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcSurfaceFeatureTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSurfaceFeature FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceFeature>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectionelement.htm"/>
	/// </summary>
	public  partial class IfcProjectionElement : IfcFeatureElementAddition
	{
		public IfcProjectionElementTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcProjectionElement with all required attributes.
		/// </summary>
		public IfcProjectionElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcProjectionElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProjectionElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcProjectionElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcProjectionElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProjectionElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcopeningelement.htm"/>
	/// </summary>
	public  partial class IfcOpeningElement : IfcFeatureElementSubtraction
	{
		public IfcOpeningElementTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcOpeningElement with all required attributes.
		/// </summary>
		public IfcOpeningElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcOpeningElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcOpeningElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcOpeningElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcOpeningElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOpeningElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvoidingfeature.htm"/>
	/// </summary>
	public  partial class IfcVoidingFeature : IfcFeatureElementSubtraction
	{
		public IfcVoidingFeatureTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcVoidingFeature with all required attributes.
		/// </summary>
		public IfcVoidingFeature(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcVoidingFeature with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcVoidingFeature(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcVoidingFeatureTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcVoidingFeature FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVoidingFeature>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfillareastyle.htm"/>
	/// </summary>
	public  partial class IfcFillAreaStyle : IfcPresentationStyle
	{
		public List<IfcFillStyleSelect> FillStyles{get;set;} 
		public bool ModelorDraughting{get;set;} // optional

		/// <summary>
		/// Construct a IfcFillAreaStyle with all required attributes.
		/// </summary>
		public IfcFillAreaStyle(List<IfcFillStyleSelect> fillStyles):base()
		{
			FillStyles = fillStyles;

		}
		/// <summary>
		/// Construct a IfcFillAreaStyle with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFillAreaStyle(IfcLabel name,List<IfcFillStyleSelect> fillStyles,bool modelorDraughting):base(name)
		{
			FillStyles = fillStyles;
			ModelorDraughting = modelorDraughting;

		}
		public static new IfcFillAreaStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFillAreaStyle>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfillareastylehatching.htm"/>
	/// </summary>
	public  partial class IfcFillAreaStyleHatching : IfcGeometricRepresentationItem
	{
		public IfcCurveStyle HatchLineAppearance{get;set;} 
		public IfcHatchLineDistanceSelect StartOfNextHatchLine{get;set;} 
		public IfcCartesianPoint PointOfReferenceHatchLine{get;set;} // optional
		public IfcCartesianPoint PatternStart{get;set;} // optional
		public IfcPlaneAngleMeasure HatchLineAngle{get;set;} 

		/// <summary>
		/// Construct a IfcFillAreaStyleHatching with all required attributes.
		/// </summary>
		public IfcFillAreaStyleHatching(IfcCurveStyle hatchLineAppearance,IfcHatchLineDistanceSelect startOfNextHatchLine,IfcPlaneAngleMeasure hatchLineAngle):base()
		{
			HatchLineAppearance = hatchLineAppearance;
			StartOfNextHatchLine = startOfNextHatchLine;
			HatchLineAngle = hatchLineAngle;

		}
		/// <summary>
		/// Construct a IfcFillAreaStyleHatching with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFillAreaStyleHatching(IfcCurveStyle hatchLineAppearance,IfcHatchLineDistanceSelect startOfNextHatchLine,IfcCartesianPoint pointOfReferenceHatchLine,IfcCartesianPoint patternStart,IfcPlaneAngleMeasure hatchLineAngle):base()
		{
			HatchLineAppearance = hatchLineAppearance;
			StartOfNextHatchLine = startOfNextHatchLine;
			PointOfReferenceHatchLine = pointOfReferenceHatchLine;
			PatternStart = patternStart;
			HatchLineAngle = hatchLineAngle;

		}
		public static new IfcFillAreaStyleHatching FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFillAreaStyleHatching>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfillareastyletiles.htm"/>
	/// </summary>
	public  partial class IfcFillAreaStyleTiles : IfcGeometricRepresentationItem
	{
		public List<IfcVector> TilingPattern{get;set;} 
		public List<IfcStyledItem> Tiles{get;set;} 
		public IfcPositiveRatioMeasure TilingScale{get;set;} 

		/// <summary>
		/// Construct a IfcFillAreaStyleTiles with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFillAreaStyleTiles(List<IfcVector> tilingPattern,List<IfcStyledItem> tiles,IfcPositiveRatioMeasure tilingScale):base()
		{
			TilingPattern = tilingPattern;
			Tiles = tiles;
			TilingScale = tilingScale;

		}
		public static new IfcFillAreaStyleTiles FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFillAreaStyleTiles>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfilter.htm"/>
	/// </summary>
	public  partial class IfcFilter : IfcFlowTreatmentDevice
	{
		public IfcFilterTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcFilter with all required attributes.
		/// </summary>
		public IfcFilter(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFilter with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFilter(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcFilterTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFilter FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFilter>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfiltertype.htm"/>
	/// </summary>
	public  partial class IfcFilterType : IfcFlowTreatmentDeviceType
	{
		public IfcFilterTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcFilterType with all required attributes.
		/// </summary>
		public IfcFilterType(IfcGloballyUniqueId globalId,IfcFilterTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcFilterType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFilterType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcFilterTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFilterType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFilterType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfiresuppressionterminal.htm"/>
	/// </summary>
	public  partial class IfcFireSuppressionTerminal : IfcFlowTerminal
	{
		public IfcFireSuppressionTerminalTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcFireSuppressionTerminal with all required attributes.
		/// </summary>
		public IfcFireSuppressionTerminal(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFireSuppressionTerminal with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFireSuppressionTerminal(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcFireSuppressionTerminalTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFireSuppressionTerminal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFireSuppressionTerminal>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfiresuppressionterminaltype.htm"/>
	/// </summary>
	public  partial class IfcFireSuppressionTerminalType : IfcFlowTerminalType
	{
		public IfcFireSuppressionTerminalTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcFireSuppressionTerminalType with all required attributes.
		/// </summary>
		public IfcFireSuppressionTerminalType(IfcGloballyUniqueId globalId,IfcFireSuppressionTerminalTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcFireSuppressionTerminalType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFireSuppressionTerminalType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcFireSuppressionTerminalTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFireSuppressionTerminalType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFireSuppressionTerminalType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfixedreferencesweptareasolid.htm"/>
	/// </summary>
	public  partial class IfcFixedReferenceSweptAreaSolid : IfcSweptAreaSolid
	{
		public IfcCurve Directrix{get;set;} 
		public IfcParameterValue StartParam{get;set;} // optional
		public IfcParameterValue EndParam{get;set;} // optional
		public IfcDirection FixedReference{get;set;} 

		/// <summary>
		/// Construct a IfcFixedReferenceSweptAreaSolid with all required attributes.
		/// </summary>
		public IfcFixedReferenceSweptAreaSolid(IfcProfileDef sweptArea,IfcCurve directrix,IfcDirection fixedReference):base(sweptArea)
		{
			Directrix = directrix;
			FixedReference = fixedReference;

		}
		/// <summary>
		/// Construct a IfcFixedReferenceSweptAreaSolid with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFixedReferenceSweptAreaSolid(IfcProfileDef sweptArea,IfcAxis2Placement3D position,IfcCurve directrix,IfcParameterValue startParam,IfcParameterValue endParam,IfcDirection fixedReference):base(sweptArea,position)
		{
			Directrix = directrix;
			StartParam = startParam;
			EndParam = endParam;
			FixedReference = fixedReference;

		}
		public static new IfcFixedReferenceSweptAreaSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFixedReferenceSweptAreaSolid>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowmeter.htm"/>
	/// </summary>
	public  partial class IfcFlowMeter : IfcFlowController
	{
		public IfcFlowMeterTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcFlowMeter with all required attributes.
		/// </summary>
		public IfcFlowMeter(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFlowMeter with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowMeter(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcFlowMeterTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFlowMeter FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowMeter>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprotectivedevice.htm"/>
	/// </summary>
	public  partial class IfcProtectiveDevice : IfcFlowController
	{
		public IfcProtectiveDeviceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcProtectiveDevice with all required attributes.
		/// </summary>
		public IfcProtectiveDevice(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcProtectiveDevice with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProtectiveDevice(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcProtectiveDeviceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcProtectiveDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProtectiveDevice>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcswitchingdevice.htm"/>
	/// </summary>
	public  partial class IfcSwitchingDevice : IfcFlowController
	{
		public IfcSwitchingDeviceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcSwitchingDevice with all required attributes.
		/// </summary>
		public IfcSwitchingDevice(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSwitchingDevice with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSwitchingDevice(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcSwitchingDeviceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSwitchingDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSwitchingDevice>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvalve.htm"/>
	/// </summary>
	public  partial class IfcValve : IfcFlowController
	{
		public IfcValveTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcValve with all required attributes.
		/// </summary>
		public IfcValve(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcValve with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcValve(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcValveTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcValve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcValve>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowmetertype.htm"/>
	/// </summary>
	public  partial class IfcFlowMeterType : IfcFlowControllerType
	{
		public IfcFlowMeterTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcFlowMeterType with all required attributes.
		/// </summary>
		public IfcFlowMeterType(IfcGloballyUniqueId globalId,IfcFlowMeterTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcFlowMeterType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFlowMeterType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcFlowMeterTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFlowMeterType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowMeterType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprotectivedevicetype.htm"/>
	/// </summary>
	public  partial class IfcProtectiveDeviceType : IfcFlowControllerType
	{
		public IfcProtectiveDeviceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcProtectiveDeviceType with all required attributes.
		/// </summary>
		public IfcProtectiveDeviceType(IfcGloballyUniqueId globalId,IfcProtectiveDeviceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcProtectiveDeviceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProtectiveDeviceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcProtectiveDeviceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcProtectiveDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProtectiveDeviceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcswitchingdevicetype.htm"/>
	/// </summary>
	public  partial class IfcSwitchingDeviceType : IfcFlowControllerType
	{
		public IfcSwitchingDeviceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcSwitchingDeviceType with all required attributes.
		/// </summary>
		public IfcSwitchingDeviceType(IfcGloballyUniqueId globalId,IfcSwitchingDeviceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcSwitchingDeviceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSwitchingDeviceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcSwitchingDeviceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSwitchingDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSwitchingDeviceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvalvetype.htm"/>
	/// </summary>
	public  partial class IfcValveType : IfcFlowControllerType
	{
		public IfcValveTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcValveType with all required attributes.
		/// </summary>
		public IfcValveType(IfcGloballyUniqueId globalId,IfcValveTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcValveType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcValveType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcValveTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcValveType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcValveType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcjunctionbox.htm"/>
	/// </summary>
	public  partial class IfcJunctionBox : IfcFlowFitting
	{
		public IfcJunctionBoxTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcJunctionBox with all required attributes.
		/// </summary>
		public IfcJunctionBox(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcJunctionBox with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcJunctionBox(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcJunctionBoxTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcJunctionBox FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcJunctionBox>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpipefitting.htm"/>
	/// </summary>
	public  partial class IfcPipeFitting : IfcFlowFitting
	{
		public IfcPipeFittingTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcPipeFitting with all required attributes.
		/// </summary>
		public IfcPipeFitting(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcPipeFitting with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPipeFitting(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcPipeFittingTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcPipeFitting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPipeFitting>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcjunctionboxtype.htm"/>
	/// </summary>
	public  partial class IfcJunctionBoxType : IfcFlowFittingType
	{
		public IfcJunctionBoxTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcJunctionBoxType with all required attributes.
		/// </summary>
		public IfcJunctionBoxType(IfcGloballyUniqueId globalId,IfcJunctionBoxTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcJunctionBoxType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcJunctionBoxType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcJunctionBoxTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcJunctionBoxType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcJunctionBoxType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpipefittingtype.htm"/>
	/// </summary>
	public  partial class IfcPipeFittingType : IfcFlowFittingType
	{
		public IfcPipeFittingTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcPipeFittingType with all required attributes.
		/// </summary>
		public IfcPipeFittingType(IfcGloballyUniqueId globalId,IfcPipeFittingTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcPipeFittingType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPipeFittingType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcPipeFittingTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcPipeFittingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPipeFittingType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpump.htm"/>
	/// </summary>
	public  partial class IfcPump : IfcFlowMovingDevice
	{
		public IfcPumpTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcPump with all required attributes.
		/// </summary>
		public IfcPump(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcPump with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPump(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcPumpTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcPump FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPump>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpumptype.htm"/>
	/// </summary>
	public  partial class IfcPumpType : IfcFlowMovingDeviceType
	{
		public IfcPumpTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcPumpType with all required attributes.
		/// </summary>
		public IfcPumpType(IfcGloballyUniqueId globalId,IfcPumpTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcPumpType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPumpType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcPumpTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcPumpType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPumpType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpipesegment.htm"/>
	/// </summary>
	public  partial class IfcPipeSegment : IfcFlowSegment
	{
		public IfcPipeSegmentTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcPipeSegment with all required attributes.
		/// </summary>
		public IfcPipeSegment(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcPipeSegment with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPipeSegment(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcPipeSegmentTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcPipeSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPipeSegment>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpipesegmenttype.htm"/>
	/// </summary>
	public  partial class IfcPipeSegmentType : IfcFlowSegmentType
	{
		public IfcPipeSegmentTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcPipeSegmentType with all required attributes.
		/// </summary>
		public IfcPipeSegmentType(IfcGloballyUniqueId globalId,IfcPipeSegmentTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcPipeSegmentType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPipeSegmentType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcPipeSegmentTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcPipeSegmentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPipeSegmentType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctank.htm"/>
	/// </summary>
	public  partial class IfcTank : IfcFlowStorageDevice
	{
		public IfcTankTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcTank with all required attributes.
		/// </summary>
		public IfcTank(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcTank with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTank(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcTankTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcTank FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTank>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctanktype.htm"/>
	/// </summary>
	public  partial class IfcTankType : IfcFlowStorageDeviceType
	{
		public IfcTankTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcTankType with all required attributes.
		/// </summary>
		public IfcTankType(IfcGloballyUniqueId globalId,IfcTankTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcTankType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTankType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcTankTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcTankType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTankType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclamp.htm"/>
	/// </summary>
	public  partial class IfcLamp : IfcFlowTerminal
	{
		public IfcLampTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcLamp with all required attributes.
		/// </summary>
		public IfcLamp(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcLamp with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLamp(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcLampTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcLamp FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLamp>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightfixture.htm"/>
	/// </summary>
	public  partial class IfcLightFixture : IfcFlowTerminal
	{
		public IfcLightFixtureTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcLightFixture with all required attributes.
		/// </summary>
		public IfcLightFixture(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcLightFixture with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLightFixture(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcLightFixtureTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcLightFixture FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightFixture>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmedicaldevice.htm"/>
	/// </summary>
	public  partial class IfcMedicalDevice : IfcFlowTerminal
	{
		public IfcMedicalDeviceTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcMedicalDevice with all required attributes.
		/// </summary>
		public IfcMedicalDevice(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcMedicalDevice with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMedicalDevice(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcMedicalDeviceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcMedicalDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMedicalDevice>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoutlet.htm"/>
	/// </summary>
	public  partial class IfcOutlet : IfcFlowTerminal
	{
		public IfcOutletTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcOutlet with all required attributes.
		/// </summary>
		public IfcOutlet(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcOutlet with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcOutlet(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcOutletTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcOutlet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOutlet>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsanitaryterminal.htm"/>
	/// </summary>
	public  partial class IfcSanitaryTerminal : IfcFlowTerminal
	{
		public IfcSanitaryTerminalTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcSanitaryTerminal with all required attributes.
		/// </summary>
		public IfcSanitaryTerminal(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSanitaryTerminal with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSanitaryTerminal(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcSanitaryTerminalTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSanitaryTerminal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSanitaryTerminal>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspaceheater.htm"/>
	/// </summary>
	public  partial class IfcSpaceHeater : IfcFlowTerminal
	{
		public IfcSpaceHeaterTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcSpaceHeater with all required attributes.
		/// </summary>
		public IfcSpaceHeater(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSpaceHeater with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSpaceHeater(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcSpaceHeaterTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSpaceHeater FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpaceHeater>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstackterminal.htm"/>
	/// </summary>
	public  partial class IfcStackTerminal : IfcFlowTerminal
	{
		public IfcStackTerminalTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcStackTerminal with all required attributes.
		/// </summary>
		public IfcStackTerminal(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcStackTerminal with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStackTerminal(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcStackTerminalTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcStackTerminal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStackTerminal>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwasteterminal.htm"/>
	/// </summary>
	public  partial class IfcWasteTerminal : IfcFlowTerminal
	{
		public IfcWasteTerminalTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcWasteTerminal with all required attributes.
		/// </summary>
		public IfcWasteTerminal(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcWasteTerminal with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWasteTerminal(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcWasteTerminalTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcWasteTerminal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWasteTerminal>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclamptype.htm"/>
	/// </summary>
	public  partial class IfcLampType : IfcFlowTerminalType
	{
		public IfcLampTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcLampType with all required attributes.
		/// </summary>
		public IfcLampType(IfcGloballyUniqueId globalId,IfcLampTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcLampType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLampType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcLampTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcLampType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLampType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightfixturetype.htm"/>
	/// </summary>
	public  partial class IfcLightFixtureType : IfcFlowTerminalType
	{
		public IfcLightFixtureTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcLightFixtureType with all required attributes.
		/// </summary>
		public IfcLightFixtureType(IfcGloballyUniqueId globalId,IfcLightFixtureTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcLightFixtureType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLightFixtureType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcLightFixtureTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcLightFixtureType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightFixtureType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmedicaldevicetype.htm"/>
	/// </summary>
	public  partial class IfcMedicalDeviceType : IfcFlowTerminalType
	{
		public IfcMedicalDeviceTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcMedicalDeviceType with all required attributes.
		/// </summary>
		public IfcMedicalDeviceType(IfcGloballyUniqueId globalId,IfcMedicalDeviceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcMedicalDeviceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMedicalDeviceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcMedicalDeviceTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcMedicalDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMedicalDeviceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoutlettype.htm"/>
	/// </summary>
	public  partial class IfcOutletType : IfcFlowTerminalType
	{
		public IfcOutletTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcOutletType with all required attributes.
		/// </summary>
		public IfcOutletType(IfcGloballyUniqueId globalId,IfcOutletTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcOutletType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcOutletType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcOutletTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcOutletType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOutletType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsanitaryterminaltype.htm"/>
	/// </summary>
	public  partial class IfcSanitaryTerminalType : IfcFlowTerminalType
	{
		public IfcSanitaryTerminalTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcSanitaryTerminalType with all required attributes.
		/// </summary>
		public IfcSanitaryTerminalType(IfcGloballyUniqueId globalId,IfcSanitaryTerminalTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcSanitaryTerminalType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSanitaryTerminalType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcSanitaryTerminalTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSanitaryTerminalType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSanitaryTerminalType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspaceheatertype.htm"/>
	/// </summary>
	public  partial class IfcSpaceHeaterType : IfcFlowTerminalType
	{
		public IfcSpaceHeaterTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcSpaceHeaterType with all required attributes.
		/// </summary>
		public IfcSpaceHeaterType(IfcGloballyUniqueId globalId,IfcSpaceHeaterTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcSpaceHeaterType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSpaceHeaterType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcSpaceHeaterTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSpaceHeaterType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpaceHeaterType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstackterminaltype.htm"/>
	/// </summary>
	public  partial class IfcStackTerminalType : IfcFlowTerminalType
	{
		public IfcStackTerminalTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcStackTerminalType with all required attributes.
		/// </summary>
		public IfcStackTerminalType(IfcGloballyUniqueId globalId,IfcStackTerminalTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcStackTerminalType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStackTerminalType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcStackTerminalTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcStackTerminalType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStackTerminalType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwasteterminaltype.htm"/>
	/// </summary>
	public  partial class IfcWasteTerminalType : IfcFlowTerminalType
	{
		public IfcWasteTerminalTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcWasteTerminalType with all required attributes.
		/// </summary>
		public IfcWasteTerminalType(IfcGloballyUniqueId globalId,IfcWasteTerminalTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcWasteTerminalType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWasteTerminalType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcWasteTerminalTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcWasteTerminalType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWasteTerminalType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinterceptor.htm"/>
	/// </summary>
	public  partial class IfcInterceptor : IfcFlowTreatmentDevice
	{
		public IfcInterceptorTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcInterceptor with all required attributes.
		/// </summary>
		public IfcInterceptor(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcInterceptor with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcInterceptor(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcInterceptorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcInterceptor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcInterceptor>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinterceptortype.htm"/>
	/// </summary>
	public  partial class IfcInterceptorType : IfcFlowTreatmentDeviceType
	{
		public IfcInterceptorTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcInterceptorType with all required attributes.
		/// </summary>
		public IfcInterceptorType(IfcGloballyUniqueId globalId,IfcInterceptorTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcInterceptorType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcInterceptorType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcInterceptorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcInterceptorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcInterceptorType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfurniture.htm"/>
	/// </summary>
	public  partial class IfcFurniture : IfcFurnishingElement
	{
		public IfcFurnitureTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcFurniture with all required attributes.
		/// </summary>
		public IfcFurniture(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcFurniture with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFurniture(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcFurnitureTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcFurniture FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFurniture>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsystemfurnitureelement.htm"/>
	/// </summary>
	public  partial class IfcSystemFurnitureElement : IfcFurnishingElement
	{
		public IfcSystemFurnitureElementTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcSystemFurnitureElement with all required attributes.
		/// </summary>
		public IfcSystemFurnitureElement(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSystemFurnitureElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSystemFurnitureElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcSystemFurnitureElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSystemFurnitureElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSystemFurnitureElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfurnituretype.htm"/>
	/// </summary>
	public  partial class IfcFurnitureType : IfcFurnishingElementType
	{
		public IfcAssemblyPlaceEnum AssemblyPlace{get;set;} 
		public IfcFurnitureTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcFurnitureType with all required attributes.
		/// </summary>
		public IfcFurnitureType(IfcGloballyUniqueId globalId,IfcAssemblyPlaceEnum assemblyPlace):base(globalId)
		{
			AssemblyPlace = assemblyPlace;

		}
		/// <summary>
		/// Construct a IfcFurnitureType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcFurnitureType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcAssemblyPlaceEnum assemblyPlace,IfcFurnitureTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			AssemblyPlace = assemblyPlace;
			PredefinedType = predefinedType;

		}
		public static new IfcFurnitureType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFurnitureType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsystemfurnitureelementtype.htm"/>
	/// </summary>
	public  partial class IfcSystemFurnitureElementType : IfcFurnishingElementType
	{
		public IfcSystemFurnitureElementTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcSystemFurnitureElementType with all required attributes.
		/// </summary>
		public IfcSystemFurnitureElementType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSystemFurnitureElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSystemFurnitureElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcSystemFurnitureElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSystemFurnitureElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSystemFurnitureElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometriccurveset.htm"/>
	/// </summary>
	public  partial class IfcGeometricCurveSet : IfcGeometricSet
	{
		/// <summary>
		/// Construct a IfcGeometricCurveSet with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcGeometricCurveSet(List<IfcGeometricSetSelect> elements):base(elements)
		{

		}
		public static new IfcGeometricCurveSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeometricCurveSet>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometricset.htm"/>
	/// </summary>
	public  partial class IfcGeometricSet : IfcGeometricRepresentationItem
	{
		public List<IfcGeometricSetSelect> Elements{get;set;} 

		/// <summary>
		/// Construct a IfcGeometricSet with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcGeometricSet(List<IfcGeometricSetSelect> elements):base()
		{
			Elements = elements;

		}
		public static new IfcGeometricSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeometricSet>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometricrepresentationcontext.htm"/>
	/// </summary>
	public  partial class IfcGeometricRepresentationContext : IfcRepresentationContext
	{
		public IfcDimensionCount CoordinateSpaceDimension{get;set;} 
		public double Precision{get;set;} // optional
		public IfcAxis2Placement WorldCoordinateSystem{get;set;} 
		public IfcDirection TrueNorth{get;set;} // optional

		/// <summary>
		/// Construct a IfcGeometricRepresentationContext with all required attributes.
		/// </summary>
		public IfcGeometricRepresentationContext(IfcDimensionCount coordinateSpaceDimension,IfcAxis2Placement worldCoordinateSystem):base()
		{
			CoordinateSpaceDimension = coordinateSpaceDimension;
			WorldCoordinateSystem = worldCoordinateSystem;

		}
		/// <summary>
		/// Construct a IfcGeometricRepresentationContext with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcGeometricRepresentationContext(IfcLabel contextIdentifier,IfcLabel contextType,IfcDimensionCount coordinateSpaceDimension,double precision,IfcAxis2Placement worldCoordinateSystem,IfcDirection trueNorth):base(contextIdentifier,contextType)
		{
			CoordinateSpaceDimension = coordinateSpaceDimension;
			Precision = precision;
			WorldCoordinateSystem = worldCoordinateSystem;
			TrueNorth = trueNorth;

		}
		public static new IfcGeometricRepresentationContext FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeometricRepresentationContext>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometricrepresentationsubcontext.htm"/>
	/// </summary>
	public  partial class IfcGeometricRepresentationSubContext : IfcGeometricRepresentationContext
	{
		public IfcGeometricRepresentationContext ParentContext{get;set;} 
		public IfcPositiveRatioMeasure TargetScale{get;set;} // optional
		public IfcGeometricProjectionEnum TargetView{get;set;} 
		public IfcLabel UserDefinedTargetView{get;set;} // optional

		/// <summary>
		/// Construct a IfcGeometricRepresentationSubContext with all required attributes.
		/// </summary>
		public IfcGeometricRepresentationSubContext(IfcDimensionCount coordinateSpaceDimension,IfcAxis2Placement worldCoordinateSystem,IfcGeometricRepresentationContext parentContext,IfcGeometricProjectionEnum targetView):base(coordinateSpaceDimension,worldCoordinateSystem)
		{
			ParentContext = parentContext;
			TargetView = targetView;

		}
		/// <summary>
		/// Construct a IfcGeometricRepresentationSubContext with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcGeometricRepresentationSubContext(IfcLabel contextIdentifier,IfcLabel contextType,IfcDimensionCount coordinateSpaceDimension,double precision,IfcAxis2Placement worldCoordinateSystem,IfcDirection trueNorth,IfcGeometricRepresentationContext parentContext,IfcPositiveRatioMeasure targetScale,IfcGeometricProjectionEnum targetView,IfcLabel userDefinedTargetView):base(contextIdentifier,contextType,coordinateSpaceDimension,precision,worldCoordinateSystem,trueNorth)
		{
			ParentContext = parentContext;
			TargetScale = targetScale;
			TargetView = targetView;
			UserDefinedTargetView = userDefinedTargetView;

		}
		public static new IfcGeometricRepresentationSubContext FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeometricRepresentationSubContext>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrepresentationcontext.htm"/>
	/// </summary>
	public abstract partial class IfcRepresentationContext : BaseIfc
	{
		public IfcLabel ContextIdentifier{get;set;} // optional
		public IfcLabel ContextType{get;set;} // optional

		/// <summary>
		/// Construct a IfcRepresentationContext with all required attributes.
		/// </summary>
		public IfcRepresentationContext():base()
		{

		}
		/// <summary>
		/// Construct a IfcRepresentationContext with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRepresentationContext(IfcLabel contextIdentifier,IfcLabel contextType):base()
		{
			ContextIdentifier = contextIdentifier;
			ContextType = contextType;

		}
		public static  IfcRepresentationContext FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRepresentationContext>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightsource.htm"/>
	/// </summary>
	public abstract partial class IfcLightSource : IfcGeometricRepresentationItem
	{
		public IfcLabel Name{get;set;} // optional
		public IfcColourRgb LightColour{get;set;} 
		public IfcNormalisedRatioMeasure AmbientIntensity{get;set;} // optional
		public IfcNormalisedRatioMeasure Intensity{get;set;} // optional

		/// <summary>
		/// Construct a IfcLightSource with all required attributes.
		/// </summary>
		public IfcLightSource(IfcColourRgb lightColour):base()
		{
			LightColour = lightColour;

		}
		/// <summary>
		/// Construct a IfcLightSource with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLightSource(IfcLabel name,IfcColourRgb lightColour,IfcNormalisedRatioMeasure ambientIntensity,IfcNormalisedRatioMeasure intensity):base()
		{
			Name = name;
			LightColour = lightColour;
			AmbientIntensity = ambientIntensity;
			Intensity = intensity;

		}
		public static new IfcLightSource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightSource>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplanarextent.htm"/>
	/// </summary>
	public  partial class IfcPlanarExtent : IfcGeometricRepresentationItem
	{
		public IfcLengthMeasure SizeInX{get;set;} 
		public IfcLengthMeasure SizeInY{get;set;} 

		/// <summary>
		/// Construct a IfcPlanarExtent with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPlanarExtent(IfcLengthMeasure sizeInX,IfcLengthMeasure sizeInY):base()
		{
			SizeInX = sizeInX;
			SizeInY = sizeInY;

		}
		public static new IfcPlanarExtent FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlanarExtent>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsectionedspine.htm"/>
	/// </summary>
	public  partial class IfcSectionedSpine : IfcGeometricRepresentationItem
	{
		public IfcCompositeCurve SpineCurve{get;set;} 
		public List<IfcProfileDef> CrossSections{get;set;} 
		public List<IfcAxis2Placement3D> CrossSectionPositions{get;set;} 

		/// <summary>
		/// Construct a IfcSectionedSpine with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSectionedSpine(IfcCompositeCurve spineCurve,List<IfcProfileDef> crossSections,List<IfcAxis2Placement3D> crossSectionPositions):base()
		{
			SpineCurve = spineCurve;
			CrossSections = crossSections;
			CrossSectionPositions = crossSectionPositions;

		}
		public static new IfcSectionedSpine FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSectionedSpine>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshellbasedsurfacemodel.htm"/>
	/// </summary>
	public  partial class IfcShellBasedSurfaceModel : IfcGeometricRepresentationItem
	{
		public List<IfcShell> SbsmBoundary{get;set;} 

		/// <summary>
		/// Construct a IfcShellBasedSurfaceModel with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcShellBasedSurfaceModel(List<IfcShell> sbsmBoundary):base()
		{
			SbsmBoundary = sbsmBoundary;

		}
		public static new IfcShellBasedSurfaceModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShellBasedSurfaceModel>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctessellateditem.htm"/>
	/// </summary>
	public abstract partial class IfcTessellatedItem : IfcGeometricRepresentationItem
	{
		/// <summary>
		/// Construct a IfcTessellatedItem with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTessellatedItem():base()
		{

		}
		public static new IfcTessellatedItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTessellatedItem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextliteral.htm"/>
	/// </summary>
	public  partial class IfcTextLiteral : IfcGeometricRepresentationItem
	{
		public IfcPresentableText Literal{get;set;} 
		public IfcAxis2Placement Placement{get;set;} 
		public IfcTextPath Path{get;set;} 

		/// <summary>
		/// Construct a IfcTextLiteral with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTextLiteral(IfcPresentableText literal,IfcAxis2Placement placement,IfcTextPath path):base()
		{
			Literal = literal;
			Placement = placement;
			Path = path;

		}
		public static new IfcTextLiteral FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextLiteral>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvector.htm"/>
	/// </summary>
	public  partial class IfcVector : IfcGeometricRepresentationItem
	{
		public IfcDirection Orientation{get;set;} 
		public IfcLengthMeasure Magnitude{get;set;} 

		/// <summary>
		/// Construct a IfcVector with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcVector(IfcDirection orientation,IfcLengthMeasure magnitude):base()
		{
			Orientation = orientation;
			Magnitude = magnitude;

		}
		public static new IfcVector FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVector>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrepresentationitem.htm"/>
	/// </summary>
	public abstract partial class IfcRepresentationItem : BaseIfc
	{
		/// <summary>
		/// Construct a IfcRepresentationItem with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRepresentationItem():base()
		{

		}
		public static  IfcRepresentationItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRepresentationItem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgrid.htm"/>
	/// </summary>
	public  partial class IfcGrid : IfcProduct
	{
		public List<IfcGridAxis> UAxes{get;set;} 
		public List<IfcGridAxis> VAxes{get;set;} 
		public List<IfcGridAxis> WAxes{get;set;} // optional
		public IfcGridTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcGrid with all required attributes.
		/// </summary>
		public IfcGrid(IfcGloballyUniqueId globalId,List<IfcGridAxis> uAxes,List<IfcGridAxis> vAxes):base(globalId)
		{
			UAxes = uAxes;
			VAxes = vAxes;

		}
		/// <summary>
		/// Construct a IfcGrid with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcGrid(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,List<IfcGridAxis> uAxes,List<IfcGridAxis> vAxes,List<IfcGridAxis> wAxes,IfcGridTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation)
		{
			UAxes = uAxes;
			VAxes = vAxes;
			WAxes = new List<IfcGridAxis>();
			PredefinedType = predefinedType;

		}
		public static new IfcGrid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGrid>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgridaxis.htm"/>
	/// </summary>
	public  partial class IfcGridAxis : BaseIfc
	{
		public IfcLabel AxisTag{get;set;} // optional
		public IfcCurve AxisCurve{get;set;} 
		public IfcBoolean SameSense{get;set;} 

		/// <summary>
		/// Construct a IfcGridAxis with all required attributes.
		/// </summary>
		public IfcGridAxis(IfcCurve axisCurve,IfcBoolean sameSense):base()
		{
			AxisCurve = axisCurve;
			SameSense = sameSense;

		}
		/// <summary>
		/// Construct a IfcGridAxis with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcGridAxis(IfcLabel axisTag,IfcCurve axisCurve,IfcBoolean sameSense):base()
		{
			AxisTag = axisTag;
			AxisCurve = axisCurve;
			SameSense = sameSense;

		}
		public static  IfcGridAxis FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGridAxis>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgridplacement.htm"/>
	/// </summary>
	public  partial class IfcGridPlacement : IfcObjectPlacement
	{
		public IfcVirtualGridIntersection PlacementLocation{get;set;} 
		public IfcGridPlacementDirectionSelect PlacementRefDirection{get;set;} // optional

		/// <summary>
		/// Construct a IfcGridPlacement with all required attributes.
		/// </summary>
		public IfcGridPlacement(IfcVirtualGridIntersection placementLocation):base()
		{
			PlacementLocation = placementLocation;

		}
		/// <summary>
		/// Construct a IfcGridPlacement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcGridPlacement(IfcVirtualGridIntersection placementLocation,IfcGridPlacementDirectionSelect placementRefDirection):base()
		{
			PlacementLocation = placementLocation;
			PlacementRefDirection = placementRefDirection;

		}
		public static new IfcGridPlacement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGridPlacement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobjectplacement.htm"/>
	/// </summary>
	public abstract partial class IfcObjectPlacement : BaseIfc
	{
		/// <summary>
		/// Construct a IfcObjectPlacement with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcObjectPlacement():base()
		{

		}
		public static  IfcObjectPlacement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcObjectPlacement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinventory.htm"/>
	/// </summary>
	public  partial class IfcInventory : IfcGroup
	{
		public IfcInventoryTypeEnum PredefinedType{get;set;} // optional
		public IfcActorSelect Jurisdiction{get;set;} // optional
		public List<IfcPerson> ResponsiblePersons{get;set;} // optional
		public IfcDate LastUpdateDate{get;set;} // optional
		public IfcCostValue CurrentValue{get;set;} // optional
		public IfcCostValue OriginalValue{get;set;} // optional

		/// <summary>
		/// Construct a IfcInventory with all required attributes.
		/// </summary>
		public IfcInventory(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcInventory with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcInventory(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcInventoryTypeEnum predefinedType,IfcActorSelect jurisdiction,List<IfcPerson> responsiblePersons,IfcDate lastUpdateDate,IfcCostValue currentValue,IfcCostValue originalValue):base(globalId,ownerHistory,name,description,objectType)
		{
			PredefinedType = predefinedType;
			Jurisdiction = jurisdiction;
			ResponsiblePersons = new List<IfcPerson>();
			LastUpdateDate = lastUpdateDate;
			CurrentValue = currentValue;
			OriginalValue = originalValue;

		}
		public static new IfcInventory FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcInventory>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadgroup.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadGroup : IfcGroup
	{
		public IfcLoadGroupTypeEnum PredefinedType{get;set;} 
		public IfcActionTypeEnum ActionType{get;set;} 
		public IfcActionSourceTypeEnum ActionSource{get;set;} 
		public IfcRatioMeasure Coefficient{get;set;} // optional
		public IfcLabel Purpose{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralLoadGroup with all required attributes.
		/// </summary>
		public IfcStructuralLoadGroup(IfcGloballyUniqueId globalId,IfcLoadGroupTypeEnum predefinedType,IfcActionTypeEnum actionType,IfcActionSourceTypeEnum actionSource):base(globalId)
		{
			PredefinedType = predefinedType;
			ActionType = actionType;
			ActionSource = actionSource;

		}
		/// <summary>
		/// Construct a IfcStructuralLoadGroup with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLoadGroup(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcLoadGroupTypeEnum predefinedType,IfcActionTypeEnum actionType,IfcActionSourceTypeEnum actionSource,IfcRatioMeasure coefficient,IfcLabel purpose):base(globalId,ownerHistory,name,description,objectType)
		{
			PredefinedType = predefinedType;
			ActionType = actionType;
			ActionSource = actionSource;
			Coefficient = coefficient;
			Purpose = purpose;

		}
		public static new IfcStructuralLoadGroup FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadGroup>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralresultgroup.htm"/>
	/// </summary>
	public  partial class IfcStructuralResultGroup : IfcGroup
	{
		public IfcAnalysisTheoryTypeEnum TheoryType{get;set;} 
		public IfcStructuralLoadGroup ResultForLoadGroup{get;set;} // optional
		public bool IsLinear{get;set;} 

		/// <summary>
		/// Construct a IfcStructuralResultGroup with all required attributes.
		/// </summary>
		public IfcStructuralResultGroup(IfcGloballyUniqueId globalId,IfcAnalysisTheoryTypeEnum theoryType,bool isLinear):base(globalId)
		{
			TheoryType = theoryType;
			IsLinear = isLinear;

		}
		/// <summary>
		/// Construct a IfcStructuralResultGroup with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralResultGroup(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcAnalysisTheoryTypeEnum theoryType,IfcStructuralLoadGroup resultForLoadGroup,bool isLinear):base(globalId,ownerHistory,name,description,objectType)
		{
			TheoryType = theoryType;
			ResultForLoadGroup = resultForLoadGroup;
			IsLinear = isLinear;

		}
		public static new IfcStructuralResultGroup FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralResultGroup>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpolygonalboundedhalfspace.htm"/>
	/// </summary>
	public  partial class IfcPolygonalBoundedHalfSpace : IfcHalfSpaceSolid
	{
		public IfcAxis2Placement3D Position{get;set;} 
		public IfcBoundedCurve PolygonalBoundary{get;set;} 

		/// <summary>
		/// Construct a IfcPolygonalBoundedHalfSpace with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPolygonalBoundedHalfSpace(IfcSurface baseSurface,bool agreementFlag,IfcAxis2Placement3D position,IfcBoundedCurve polygonalBoundary):base(baseSurface,agreementFlag)
		{
			Position = position;
			PolygonalBoundary = polygonalBoundary;

		}
		public static new IfcPolygonalBoundedHalfSpace FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPolygonalBoundedHalfSpace>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcishapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcIShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure OverallWidth{get;set;} 
		public IfcPositiveLengthMeasure OverallDepth{get;set;} 
		public IfcPositiveLengthMeasure WebThickness{get;set;} 
		public IfcPositiveLengthMeasure FlangeThickness{get;set;} 
		public IfcNonNegativeLengthMeasure FilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure FlangeEdgeRadius{get;set;} // optional
		public IfcPlaneAngleMeasure FlangeSlope{get;set;} // optional

		/// <summary>
		/// Construct a IfcIShapeProfileDef with all required attributes.
		/// </summary>
		public IfcIShapeProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure overallWidth,IfcPositiveLengthMeasure overallDepth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure flangeThickness):base(profileType)
		{
			OverallWidth = overallWidth;
			OverallDepth = overallDepth;
			WebThickness = webThickness;
			FlangeThickness = flangeThickness;

		}
		/// <summary>
		/// Construct a IfcIShapeProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcIShapeProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure overallWidth,IfcPositiveLengthMeasure overallDepth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure flangeThickness,IfcNonNegativeLengthMeasure filletRadius,IfcNonNegativeLengthMeasure flangeEdgeRadius,IfcPlaneAngleMeasure flangeSlope):base(profileType,profileName,position)
		{
			OverallWidth = overallWidth;
			OverallDepth = overallDepth;
			WebThickness = webThickness;
			FlangeThickness = flangeThickness;
			FilletRadius = filletRadius;
			FlangeEdgeRadius = flangeEdgeRadius;
			FlangeSlope = flangeSlope;

		}
		public static new IfcIShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIShapeProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcimagetexture.htm"/>
	/// </summary>
	public  partial class IfcImageTexture : IfcSurfaceTexture
	{
		public IfcURIReference URLReference{get;set;} 

		/// <summary>
		/// Construct a IfcImageTexture with all required attributes.
		/// </summary>
		public IfcImageTexture(bool repeatS,bool repeatT,IfcURIReference uRLReference):base(repeatS,repeatT)
		{
			URLReference = uRLReference;

		}
		/// <summary>
		/// Construct a IfcImageTexture with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcImageTexture(bool repeatS,bool repeatT,IfcIdentifier mode,IfcCartesianTransformationOperator2D textureTransform,List<IfcIdentifier> parameter,IfcURIReference uRLReference):base(repeatS,repeatT,mode,textureTransform,parameter)
		{
			URLReference = uRLReference;

		}
		public static new IfcImageTexture FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcImageTexture>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcindexedcolourmap.htm"/>
	/// </summary>
	public  partial class IfcIndexedColourMap : IfcPresentationItem
	{
		public IfcTessellatedFaceSet MappedTo{get;set;} 
		public IfcSurfaceStyleShading Overrides{get;set;} // optional
		public IfcColourRgbList Colours{get;set;} 
		public List<int> ColourIndex{get;set;} 

		/// <summary>
		/// Construct a IfcIndexedColourMap with all required attributes.
		/// </summary>
		public IfcIndexedColourMap(IfcTessellatedFaceSet mappedTo,IfcColourRgbList colours,List<int> colourIndex):base()
		{
			MappedTo = mappedTo;
			Colours = colours;
			ColourIndex = colourIndex;

		}
		/// <summary>
		/// Construct a IfcIndexedColourMap with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcIndexedColourMap(IfcTessellatedFaceSet mappedTo,IfcSurfaceStyleShading overrides,IfcColourRgbList colours,List<int> colourIndex):base()
		{
			MappedTo = mappedTo;
			Overrides = overrides;
			Colours = colours;
			ColourIndex = colourIndex;

		}
		public static new IfcIndexedColourMap FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIndexedColourMap>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcindexedtexturemap.htm"/>
	/// </summary>
	public abstract partial class IfcIndexedTextureMap : IfcTextureCoordinate
	{
		public IfcTessellatedFaceSet MappedTo{get;set;} 
		public IfcTextureVertexList TexCoords{get;set;} 

		/// <summary>
		/// Construct a IfcIndexedTextureMap with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcIndexedTextureMap(List<IfcSurfaceTexture> maps,IfcTessellatedFaceSet mappedTo,IfcTextureVertexList texCoords):base(maps)
		{
			MappedTo = mappedTo;
			TexCoords = texCoords;

		}
		public static new IfcIndexedTextureMap FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIndexedTextureMap>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcindexedtriangletexturemap.htm"/>
	/// </summary>
	public  partial class IfcIndexedTriangleTextureMap : IfcIndexedTextureMap
	{
		public List<List<int>> TexCoordIndex{get;set;} // optional

		/// <summary>
		/// Construct a IfcIndexedTriangleTextureMap with all required attributes.
		/// </summary>
		public IfcIndexedTriangleTextureMap(List<IfcSurfaceTexture> maps,IfcTessellatedFaceSet mappedTo,IfcTextureVertexList texCoords):base(maps,mappedTo,texCoords)
		{

		}
		/// <summary>
		/// Construct a IfcIndexedTriangleTextureMap with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcIndexedTriangleTextureMap(List<IfcSurfaceTexture> maps,IfcTessellatedFaceSet mappedTo,IfcTextureVertexList texCoords,List<List<int>> texCoordIndex):base(maps,mappedTo,texCoords)
		{
			TexCoordIndex = new List<List<int>>();

		}
		public static new IfcIndexedTriangleTextureMap FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIndexedTriangleTextureMap>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctexturecoordinate.htm"/>
	/// </summary>
	public abstract partial class IfcTextureCoordinate : IfcPresentationItem
	{
		public List<IfcSurfaceTexture> Maps{get;set;} 

		/// <summary>
		/// Construct a IfcTextureCoordinate with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTextureCoordinate(List<IfcSurfaceTexture> maps):base()
		{
			Maps = maps;

		}
		public static new IfcTextureCoordinate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextureCoordinate>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcirregulartimeseries.htm"/>
	/// </summary>
	public  partial class IfcIrregularTimeSeries : IfcTimeSeries
	{
		public List<IfcIrregularTimeSeriesValue> Values{get;set;} 

		/// <summary>
		/// Construct a IfcIrregularTimeSeries with all required attributes.
		/// </summary>
		public IfcIrregularTimeSeries(IfcLabel name,IfcDateTime startTime,IfcDateTime endTime,IfcTimeSeriesDataTypeEnum timeSeriesDataType,IfcDataOriginEnum dataOrigin,List<IfcIrregularTimeSeriesValue> values):base(name,startTime,endTime,timeSeriesDataType,dataOrigin)
		{
			Values = values;

		}
		/// <summary>
		/// Construct a IfcIrregularTimeSeries with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcIrregularTimeSeries(IfcLabel name,IfcText description,IfcDateTime startTime,IfcDateTime endTime,IfcTimeSeriesDataTypeEnum timeSeriesDataType,IfcDataOriginEnum dataOrigin,IfcLabel userDefinedDataOrigin,IfcUnit unit,List<IfcIrregularTimeSeriesValue> values):base(name,description,startTime,endTime,timeSeriesDataType,dataOrigin,userDefinedDataOrigin,unit)
		{
			Values = values;

		}
		public static new IfcIrregularTimeSeries FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIrregularTimeSeries>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimeseries.htm"/>
	/// </summary>
	public abstract partial class IfcTimeSeries : BaseIfc
	{
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public IfcDateTime StartTime{get;set;} 
		public IfcDateTime EndTime{get;set;} 
		public IfcTimeSeriesDataTypeEnum TimeSeriesDataType{get;set;} 
		public IfcDataOriginEnum DataOrigin{get;set;} 
		public IfcLabel UserDefinedDataOrigin{get;set;} // optional
		public IfcUnit Unit{get;set;} // optional

		/// <summary>
		/// Construct a IfcTimeSeries with all required attributes.
		/// </summary>
		public IfcTimeSeries(IfcLabel name,IfcDateTime startTime,IfcDateTime endTime,IfcTimeSeriesDataTypeEnum timeSeriesDataType,IfcDataOriginEnum dataOrigin):base()
		{
			Name = name;
			StartTime = startTime;
			EndTime = endTime;
			TimeSeriesDataType = timeSeriesDataType;
			DataOrigin = dataOrigin;

		}
		/// <summary>
		/// Construct a IfcTimeSeries with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTimeSeries(IfcLabel name,IfcText description,IfcDateTime startTime,IfcDateTime endTime,IfcTimeSeriesDataTypeEnum timeSeriesDataType,IfcDataOriginEnum dataOrigin,IfcLabel userDefinedDataOrigin,IfcUnit unit):base()
		{
			Name = name;
			Description = description;
			StartTime = startTime;
			EndTime = endTime;
			TimeSeriesDataType = timeSeriesDataType;
			DataOrigin = dataOrigin;
			UserDefinedDataOrigin = userDefinedDataOrigin;
			Unit = unit;

		}
		public static  IfcTimeSeries FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTimeSeries>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcirregulartimeseriesvalue.htm"/>
	/// </summary>
	public  partial class IfcIrregularTimeSeriesValue : BaseIfc
	{
		public IfcDateTime TimeStamp{get;set;} 
		public List<IfcValue> ListValues{get;set;} 

		/// <summary>
		/// Construct a IfcIrregularTimeSeriesValue with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcIrregularTimeSeriesValue(IfcDateTime timeStamp,List<IfcValue> listValues):base()
		{
			TimeStamp = timeStamp;
			ListValues = listValues;

		}
		public static  IfcIrregularTimeSeriesValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIrregularTimeSeriesValue>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclshapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcLShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure Depth{get;set;} 
		public IfcPositiveLengthMeasure Width{get;set;} // optional
		public IfcPositiveLengthMeasure Thickness{get;set;} 
		public IfcNonNegativeLengthMeasure FilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure EdgeRadius{get;set;} // optional
		public IfcPlaneAngleMeasure LegSlope{get;set;} // optional

		/// <summary>
		/// Construct a IfcLShapeProfileDef with all required attributes.
		/// </summary>
		public IfcLShapeProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure thickness):base(profileType)
		{
			Depth = depth;
			Thickness = thickness;

		}
		/// <summary>
		/// Construct a IfcLShapeProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLShapeProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure width,IfcPositiveLengthMeasure thickness,IfcNonNegativeLengthMeasure filletRadius,IfcNonNegativeLengthMeasure edgeRadius,IfcPlaneAngleMeasure legSlope):base(profileType,profileName,position)
		{
			Depth = depth;
			Width = width;
			Thickness = thickness;
			FilletRadius = filletRadius;
			EdgeRadius = edgeRadius;
			LegSlope = legSlope;

		}
		public static new IfcLShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLShapeProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclagtime.htm"/>
	/// </summary>
	public  partial class IfcLagTime : IfcSchedulingTime
	{
		public IfcTimeOrRatioSelect LagValue{get;set;} 
		public IfcTaskDurationEnum DurationType{get;set;} 

		/// <summary>
		/// Construct a IfcLagTime with all required attributes.
		/// </summary>
		public IfcLagTime(IfcTimeOrRatioSelect lagValue,IfcTaskDurationEnum durationType):base()
		{
			LagValue = lagValue;
			DurationType = durationType;

		}
		/// <summary>
		/// Construct a IfcLagTime with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLagTime(IfcLabel name,IfcDataOriginEnum dataOrigin,IfcLabel userDefinedDataOrigin,IfcTimeOrRatioSelect lagValue,IfcTaskDurationEnum durationType):base(name,dataOrigin,userDefinedDataOrigin)
		{
			LagValue = lagValue;
			DurationType = durationType;

		}
		public static new IfcLagTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLagTime>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightdistributiondata.htm"/>
	/// </summary>
	public  partial class IfcLightDistributionData : BaseIfc
	{
		public IfcPlaneAngleMeasure MainPlaneAngle{get;set;} 
		public List<IfcPlaneAngleMeasure> SecondaryPlaneAngle{get;set;} 
		public List<IfcLuminousIntensityDistributionMeasure> LuminousIntensity{get;set;} 

		/// <summary>
		/// Construct a IfcLightDistributionData with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLightDistributionData(IfcPlaneAngleMeasure mainPlaneAngle,List<IfcPlaneAngleMeasure> secondaryPlaneAngle,List<IfcLuminousIntensityDistributionMeasure> luminousIntensity):base()
		{
			MainPlaneAngle = mainPlaneAngle;
			SecondaryPlaneAngle = secondaryPlaneAngle;
			LuminousIntensity = luminousIntensity;

		}
		public static  IfcLightDistributionData FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightDistributionData>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightintensitydistribution.htm"/>
	/// </summary>
	public  partial class IfcLightIntensityDistribution : BaseIfc
	{
		public IfcLightDistributionCurveEnum LightDistributionCurve{get;set;} 
		public List<IfcLightDistributionData> DistributionData{get;set;} 

		/// <summary>
		/// Construct a IfcLightIntensityDistribution with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLightIntensityDistribution(IfcLightDistributionCurveEnum lightDistributionCurve,List<IfcLightDistributionData> distributionData):base()
		{
			LightDistributionCurve = lightDistributionCurve;
			DistributionData = distributionData;

		}
		public static  IfcLightIntensityDistribution FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightIntensityDistribution>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightsourceambient.htm"/>
	/// </summary>
	public  partial class IfcLightSourceAmbient : IfcLightSource
	{
		/// <summary>
		/// Construct a IfcLightSourceAmbient with all required attributes.
		/// </summary>
		public IfcLightSourceAmbient(IfcColourRgb lightColour):base(lightColour)
		{

		}
		/// <summary>
		/// Construct a IfcLightSourceAmbient with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLightSourceAmbient(IfcLabel name,IfcColourRgb lightColour,IfcNormalisedRatioMeasure ambientIntensity,IfcNormalisedRatioMeasure intensity):base(name,lightColour,ambientIntensity,intensity)
		{

		}
		public static new IfcLightSourceAmbient FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightSourceAmbient>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightsourcedirectional.htm"/>
	/// </summary>
	public  partial class IfcLightSourceDirectional : IfcLightSource
	{
		public IfcDirection Orientation{get;set;} 

		/// <summary>
		/// Construct a IfcLightSourceDirectional with all required attributes.
		/// </summary>
		public IfcLightSourceDirectional(IfcColourRgb lightColour,IfcDirection orientation):base(lightColour)
		{
			Orientation = orientation;

		}
		/// <summary>
		/// Construct a IfcLightSourceDirectional with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLightSourceDirectional(IfcLabel name,IfcColourRgb lightColour,IfcNormalisedRatioMeasure ambientIntensity,IfcNormalisedRatioMeasure intensity,IfcDirection orientation):base(name,lightColour,ambientIntensity,intensity)
		{
			Orientation = orientation;

		}
		public static new IfcLightSourceDirectional FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightSourceDirectional>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightsourcegoniometric.htm"/>
	/// </summary>
	public  partial class IfcLightSourceGoniometric : IfcLightSource
	{
		public IfcAxis2Placement3D Position{get;set;} 
		public IfcColourRgb ColourAppearance{get;set;} // optional
		public IfcThermodynamicTemperatureMeasure ColourTemperature{get;set;} 
		public IfcLuminousFluxMeasure LuminousFlux{get;set;} 
		public IfcLightEmissionSourceEnum LightEmissionSource{get;set;} 
		public IfcLightDistributionDataSourceSelect LightDistributionDataSource{get;set;} 

		/// <summary>
		/// Construct a IfcLightSourceGoniometric with all required attributes.
		/// </summary>
		public IfcLightSourceGoniometric(IfcColourRgb lightColour,IfcAxis2Placement3D position,IfcThermodynamicTemperatureMeasure colourTemperature,IfcLuminousFluxMeasure luminousFlux,IfcLightEmissionSourceEnum lightEmissionSource,IfcLightDistributionDataSourceSelect lightDistributionDataSource):base(lightColour)
		{
			Position = position;
			ColourTemperature = colourTemperature;
			LuminousFlux = luminousFlux;
			LightEmissionSource = lightEmissionSource;
			LightDistributionDataSource = lightDistributionDataSource;

		}
		/// <summary>
		/// Construct a IfcLightSourceGoniometric with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLightSourceGoniometric(IfcLabel name,IfcColourRgb lightColour,IfcNormalisedRatioMeasure ambientIntensity,IfcNormalisedRatioMeasure intensity,IfcAxis2Placement3D position,IfcColourRgb colourAppearance,IfcThermodynamicTemperatureMeasure colourTemperature,IfcLuminousFluxMeasure luminousFlux,IfcLightEmissionSourceEnum lightEmissionSource,IfcLightDistributionDataSourceSelect lightDistributionDataSource):base(name,lightColour,ambientIntensity,intensity)
		{
			Position = position;
			ColourAppearance = colourAppearance;
			ColourTemperature = colourTemperature;
			LuminousFlux = luminousFlux;
			LightEmissionSource = lightEmissionSource;
			LightDistributionDataSource = lightDistributionDataSource;

		}
		public static new IfcLightSourceGoniometric FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightSourceGoniometric>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightsourcepositional.htm"/>
	/// </summary>
	public  partial class IfcLightSourcePositional : IfcLightSource
	{
		public IfcCartesianPoint Position{get;set;} 
		public IfcPositiveLengthMeasure Radius{get;set;} 
		public IfcReal ConstantAttenuation{get;set;} 
		public IfcReal DistanceAttenuation{get;set;} 
		public IfcReal QuadricAttenuation{get;set;} 

		/// <summary>
		/// Construct a IfcLightSourcePositional with all required attributes.
		/// </summary>
		public IfcLightSourcePositional(IfcColourRgb lightColour,IfcCartesianPoint position,IfcPositiveLengthMeasure radius,IfcReal constantAttenuation,IfcReal distanceAttenuation,IfcReal quadricAttenuation):base(lightColour)
		{
			Position = position;
			Radius = radius;
			ConstantAttenuation = constantAttenuation;
			DistanceAttenuation = distanceAttenuation;
			QuadricAttenuation = quadricAttenuation;

		}
		/// <summary>
		/// Construct a IfcLightSourcePositional with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLightSourcePositional(IfcLabel name,IfcColourRgb lightColour,IfcNormalisedRatioMeasure ambientIntensity,IfcNormalisedRatioMeasure intensity,IfcCartesianPoint position,IfcPositiveLengthMeasure radius,IfcReal constantAttenuation,IfcReal distanceAttenuation,IfcReal quadricAttenuation):base(name,lightColour,ambientIntensity,intensity)
		{
			Position = position;
			Radius = radius;
			ConstantAttenuation = constantAttenuation;
			DistanceAttenuation = distanceAttenuation;
			QuadricAttenuation = quadricAttenuation;

		}
		public static new IfcLightSourcePositional FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightSourcePositional>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightsourcespot.htm"/>
	/// </summary>
	public  partial class IfcLightSourceSpot : IfcLightSourcePositional
	{
		public IfcDirection Orientation{get;set;} 
		public IfcReal ConcentrationExponent{get;set;} // optional
		public IfcPositivePlaneAngleMeasure SpreadAngle{get;set;} 
		public IfcPositivePlaneAngleMeasure BeamWidthAngle{get;set;} 

		/// <summary>
		/// Construct a IfcLightSourceSpot with all required attributes.
		/// </summary>
		public IfcLightSourceSpot(IfcColourRgb lightColour,IfcCartesianPoint position,IfcPositiveLengthMeasure radius,IfcReal constantAttenuation,IfcReal distanceAttenuation,IfcReal quadricAttenuation,IfcDirection orientation,IfcPositivePlaneAngleMeasure spreadAngle,IfcPositivePlaneAngleMeasure beamWidthAngle):base(lightColour,position,radius,constantAttenuation,distanceAttenuation,quadricAttenuation)
		{
			Orientation = orientation;
			SpreadAngle = spreadAngle;
			BeamWidthAngle = beamWidthAngle;

		}
		/// <summary>
		/// Construct a IfcLightSourceSpot with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLightSourceSpot(IfcLabel name,IfcColourRgb lightColour,IfcNormalisedRatioMeasure ambientIntensity,IfcNormalisedRatioMeasure intensity,IfcCartesianPoint position,IfcPositiveLengthMeasure radius,IfcReal constantAttenuation,IfcReal distanceAttenuation,IfcReal quadricAttenuation,IfcDirection orientation,IfcReal concentrationExponent,IfcPositivePlaneAngleMeasure spreadAngle,IfcPositivePlaneAngleMeasure beamWidthAngle):base(name,lightColour,ambientIntensity,intensity,position,radius,constantAttenuation,distanceAttenuation,quadricAttenuation)
		{
			Orientation = orientation;
			ConcentrationExponent = concentrationExponent;
			SpreadAngle = spreadAngle;
			BeamWidthAngle = beamWidthAngle;

		}
		public static new IfcLightSourceSpot FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightSourceSpot>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclocalplacement.htm"/>
	/// </summary>
	public  partial class IfcLocalPlacement : IfcObjectPlacement
	{
		public IfcObjectPlacement PlacementRelTo{get;set;} // optional
		public IfcAxis2Placement RelativePlacement{get;set;} 

		/// <summary>
		/// Construct a IfcLocalPlacement with all required attributes.
		/// </summary>
		public IfcLocalPlacement(IfcAxis2Placement relativePlacement):base()
		{
			RelativePlacement = relativePlacement;

		}
		/// <summary>
		/// Construct a IfcLocalPlacement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcLocalPlacement(IfcObjectPlacement placementRelTo,IfcAxis2Placement relativePlacement):base()
		{
			PlacementRelTo = placementRelTo;
			RelativePlacement = relativePlacement;

		}
		public static new IfcLocalPlacement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLocalPlacement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpolyloop.htm"/>
	/// </summary>
	public  partial class IfcPolyLoop : IfcLoop
	{
		public List<IfcCartesianPoint> Polygon{get;set;} 

		/// <summary>
		/// Construct a IfcPolyLoop with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPolyLoop(List<IfcCartesianPoint> polygon):base()
		{
			Polygon = polygon;

		}
		public static new IfcPolyLoop FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPolyLoop>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvertexloop.htm"/>
	/// </summary>
	public  partial class IfcVertexLoop : IfcLoop
	{
		public IfcVertex LoopVertex{get;set;} 

		/// <summary>
		/// Construct a IfcVertexLoop with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcVertexLoop(IfcVertex loopVertex):base()
		{
			LoopVertex = loopVertex;

		}
		public static new IfcVertexLoop FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVertexLoop>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmappeditem.htm"/>
	/// </summary>
	public  partial class IfcMappedItem : IfcRepresentationItem
	{
		public IfcRepresentationMap MappingSource{get;set;} 
		public IfcCartesianTransformationOperator MappingTarget{get;set;} 

		/// <summary>
		/// Construct a IfcMappedItem with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMappedItem(IfcRepresentationMap mappingSource,IfcCartesianTransformationOperator mappingTarget):base()
		{
			MappingSource = mappingSource;
			MappingTarget = mappingTarget;

		}
		public static new IfcMappedItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMappedItem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterial.htm"/>
	/// </summary>
	public  partial class IfcMaterial : IfcMaterialDefinition
	{
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public IfcLabel Category{get;set;} // optional

		/// <summary>
		/// Construct a IfcMaterial with all required attributes.
		/// </summary>
		public IfcMaterial(IfcLabel name):base()
		{
			Name = name;

		}
		/// <summary>
		/// Construct a IfcMaterial with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterial(IfcLabel name,IfcText description,IfcLabel category):base()
		{
			Name = name;
			Description = description;
			Category = category;

		}
		public static new IfcMaterial FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterial>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialdefinition.htm"/>
	/// </summary>
	public abstract partial class IfcMaterialDefinition : BaseIfc
	{
		/// <summary>
		/// Construct a IfcMaterialDefinition with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialDefinition():base()
		{

		}
		public static  IfcMaterialDefinition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialDefinition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialclassificationrelationship.htm"/>
	/// </summary>
	public  partial class IfcMaterialClassificationRelationship : BaseIfc
	{
		public List<IfcClassificationSelect> MaterialClassifications{get;set;} 
		public IfcMaterial ClassifiedMaterial{get;set;} 

		/// <summary>
		/// Construct a IfcMaterialClassificationRelationship with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialClassificationRelationship(List<IfcClassificationSelect> materialClassifications,IfcMaterial classifiedMaterial):base()
		{
			MaterialClassifications = materialClassifications;
			ClassifiedMaterial = classifiedMaterial;

		}
		public static  IfcMaterialClassificationRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialClassificationRelationship>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialconstituent.htm"/>
	/// </summary>
	public  partial class IfcMaterialConstituent : IfcMaterialDefinition
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcMaterial Material{get;set;} 
		public IfcNormalisedRatioMeasure Fraction{get;set;} // optional
		public IfcLabel Category{get;set;} // optional

		/// <summary>
		/// Construct a IfcMaterialConstituent with all required attributes.
		/// </summary>
		public IfcMaterialConstituent(IfcMaterial material):base()
		{
			Material = material;

		}
		/// <summary>
		/// Construct a IfcMaterialConstituent with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialConstituent(IfcLabel name,IfcText description,IfcMaterial material,IfcNormalisedRatioMeasure fraction,IfcLabel category):base()
		{
			Name = name;
			Description = description;
			Material = material;
			Fraction = fraction;
			Category = category;

		}
		public static new IfcMaterialConstituent FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialConstituent>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialconstituentset.htm"/>
	/// </summary>
	public  partial class IfcMaterialConstituentSet : IfcMaterialDefinition
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public List<IfcMaterialConstituent> MaterialConstituents{get;set;} // optional

		/// <summary>
		/// Construct a IfcMaterialConstituentSet with all required attributes.
		/// </summary>
		public IfcMaterialConstituentSet():base()
		{

		}
		/// <summary>
		/// Construct a IfcMaterialConstituentSet with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialConstituentSet(IfcLabel name,IfcText description,List<IfcMaterialConstituent> materialConstituents):base()
		{
			Name = name;
			Description = description;
			MaterialConstituents = new List<IfcMaterialConstituent>();

		}
		public static new IfcMaterialConstituentSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialConstituentSet>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmateriallayer.htm"/>
	/// </summary>
	public  partial class IfcMaterialLayer : IfcMaterialDefinition
	{
		public IfcMaterial Material{get;set;} // optional
		public IfcNonNegativeLengthMeasure LayerThickness{get;set;} 
		public IfcLogical IsVentilated{get;set;} // optional
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcLabel Category{get;set;} // optional
		public IfcNormalisedRatioMeasure Priority{get;set;} // optional

		/// <summary>
		/// Construct a IfcMaterialLayer with all required attributes.
		/// </summary>
		public IfcMaterialLayer(IfcNonNegativeLengthMeasure layerThickness):base()
		{
			LayerThickness = layerThickness;

		}
		/// <summary>
		/// Construct a IfcMaterialLayer with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialLayer(IfcMaterial material,IfcNonNegativeLengthMeasure layerThickness,IfcLogical isVentilated,IfcLabel name,IfcText description,IfcLabel category,IfcNormalisedRatioMeasure priority):base()
		{
			Material = material;
			LayerThickness = layerThickness;
			IsVentilated = isVentilated;
			Name = name;
			Description = description;
			Category = category;
			Priority = priority;

		}
		public static new IfcMaterialLayer FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialLayer>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmateriallayerset.htm"/>
	/// </summary>
	public  partial class IfcMaterialLayerSet : IfcMaterialDefinition
	{
		public List<IfcMaterialLayer> MaterialLayers{get;set;} 
		public IfcLabel LayerSetName{get;set;} // optional
		public IfcText Description{get;set;} // optional

		/// <summary>
		/// Construct a IfcMaterialLayerSet with all required attributes.
		/// </summary>
		public IfcMaterialLayerSet(List<IfcMaterialLayer> materialLayers):base()
		{
			MaterialLayers = materialLayers;

		}
		/// <summary>
		/// Construct a IfcMaterialLayerSet with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialLayerSet(List<IfcMaterialLayer> materialLayers,IfcLabel layerSetName,IfcText description):base()
		{
			MaterialLayers = materialLayers;
			LayerSetName = layerSetName;
			Description = description;

		}
		public static new IfcMaterialLayerSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialLayerSet>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialprofile.htm"/>
	/// </summary>
	public  partial class IfcMaterialProfile : IfcMaterialDefinition
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcMaterial Material{get;set;} // optional
		public IfcProfileDef Profile{get;set;} 
		public IfcNormalisedRatioMeasure Priority{get;set;} // optional
		public IfcLabel Category{get;set;} // optional

		/// <summary>
		/// Construct a IfcMaterialProfile with all required attributes.
		/// </summary>
		public IfcMaterialProfile(IfcProfileDef profile):base()
		{
			Profile = profile;

		}
		/// <summary>
		/// Construct a IfcMaterialProfile with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialProfile(IfcLabel name,IfcText description,IfcMaterial material,IfcProfileDef profile,IfcNormalisedRatioMeasure priority,IfcLabel category):base()
		{
			Name = name;
			Description = description;
			Material = material;
			Profile = profile;
			Priority = priority;
			Category = category;

		}
		public static new IfcMaterialProfile FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialProfile>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialprofileset.htm"/>
	/// </summary>
	public  partial class IfcMaterialProfileSet : IfcMaterialDefinition
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public List<IfcMaterialProfile> MaterialProfiles{get;set;} 
		public IfcCompositeProfileDef CompositeProfile{get;set;} // optional

		/// <summary>
		/// Construct a IfcMaterialProfileSet with all required attributes.
		/// </summary>
		public IfcMaterialProfileSet(List<IfcMaterialProfile> materialProfiles):base()
		{
			MaterialProfiles = materialProfiles;

		}
		/// <summary>
		/// Construct a IfcMaterialProfileSet with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialProfileSet(IfcLabel name,IfcText description,List<IfcMaterialProfile> materialProfiles,IfcCompositeProfileDef compositeProfile):base()
		{
			Name = name;
			Description = description;
			MaterialProfiles = materialProfiles;
			CompositeProfile = compositeProfile;

		}
		public static new IfcMaterialProfileSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialProfileSet>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialdefinitionrepresentation.htm"/>
	/// </summary>
	public  partial class IfcMaterialDefinitionRepresentation : IfcProductRepresentation
	{
		public IfcMaterial RepresentedMaterial{get;set;} 

		/// <summary>
		/// Construct a IfcMaterialDefinitionRepresentation with all required attributes.
		/// </summary>
		public IfcMaterialDefinitionRepresentation(List<IfcRepresentation> representations,IfcMaterial representedMaterial):base(representations)
		{
			RepresentedMaterial = representedMaterial;

		}
		/// <summary>
		/// Construct a IfcMaterialDefinitionRepresentation with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialDefinitionRepresentation(IfcLabel name,IfcText description,List<IfcRepresentation> representations,IfcMaterial representedMaterial):base(name,description,representations)
		{
			RepresentedMaterial = representedMaterial;

		}
		public static new IfcMaterialDefinitionRepresentation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialDefinitionRepresentation>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproductrepresentation.htm"/>
	/// </summary>
	public abstract partial class IfcProductRepresentation : BaseIfc
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public List<IfcRepresentation> Representations{get;set;} 

		/// <summary>
		/// Construct a IfcProductRepresentation with all required attributes.
		/// </summary>
		public IfcProductRepresentation(List<IfcRepresentation> representations):base()
		{
			Representations = representations;

		}
		/// <summary>
		/// Construct a IfcProductRepresentation with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProductRepresentation(IfcLabel name,IfcText description,List<IfcRepresentation> representations):base()
		{
			Name = name;
			Description = description;
			Representations = representations;

		}
		public static  IfcProductRepresentation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProductRepresentation>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmateriallayerwithoffsets.htm"/>
	/// </summary>
	public  partial class IfcMaterialLayerWithOffsets : IfcMaterialLayer
	{
		public IfcLayerSetDirectionEnum OffsetDirection{get;set;} 
		public List<IfcLengthMeasure> OffsetValues{get;set;} 

		/// <summary>
		/// Construct a IfcMaterialLayerWithOffsets with all required attributes.
		/// </summary>
		public IfcMaterialLayerWithOffsets(IfcNonNegativeLengthMeasure layerThickness,IfcLayerSetDirectionEnum offsetDirection,List<IfcLengthMeasure> offsetValues):base(layerThickness)
		{
			OffsetDirection = offsetDirection;
			OffsetValues = offsetValues;

		}
		/// <summary>
		/// Construct a IfcMaterialLayerWithOffsets with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialLayerWithOffsets(IfcMaterial material,IfcNonNegativeLengthMeasure layerThickness,IfcLogical isVentilated,IfcLabel name,IfcText description,IfcLabel category,IfcNormalisedRatioMeasure priority,IfcLayerSetDirectionEnum offsetDirection,List<IfcLengthMeasure> offsetValues):base(material,layerThickness,isVentilated,name,description,category,priority)
		{
			OffsetDirection = offsetDirection;
			OffsetValues = offsetValues;

		}
		public static new IfcMaterialLayerWithOffsets FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialLayerWithOffsets>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmateriallayersetusage.htm"/>
	/// </summary>
	public  partial class IfcMaterialLayerSetUsage : IfcMaterialUsageDefinition
	{
		public IfcMaterialLayerSet ForLayerSet{get;set;} 
		public IfcLayerSetDirectionEnum LayerSetDirection{get;set;} 
		public IfcDirectionSenseEnum DirectionSense{get;set;} 
		public IfcLengthMeasure OffsetFromReferenceLine{get;set;} 
		public IfcPositiveLengthMeasure ReferenceExtent{get;set;} // optional

		/// <summary>
		/// Construct a IfcMaterialLayerSetUsage with all required attributes.
		/// </summary>
		public IfcMaterialLayerSetUsage(IfcMaterialLayerSet forLayerSet,IfcLayerSetDirectionEnum layerSetDirection,IfcDirectionSenseEnum directionSense,IfcLengthMeasure offsetFromReferenceLine):base()
		{
			ForLayerSet = forLayerSet;
			LayerSetDirection = layerSetDirection;
			DirectionSense = directionSense;
			OffsetFromReferenceLine = offsetFromReferenceLine;

		}
		/// <summary>
		/// Construct a IfcMaterialLayerSetUsage with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialLayerSetUsage(IfcMaterialLayerSet forLayerSet,IfcLayerSetDirectionEnum layerSetDirection,IfcDirectionSenseEnum directionSense,IfcLengthMeasure offsetFromReferenceLine,IfcPositiveLengthMeasure referenceExtent):base()
		{
			ForLayerSet = forLayerSet;
			LayerSetDirection = layerSetDirection;
			DirectionSense = directionSense;
			OffsetFromReferenceLine = offsetFromReferenceLine;
			ReferenceExtent = referenceExtent;

		}
		public static new IfcMaterialLayerSetUsage FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialLayerSetUsage>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialusagedefinition.htm"/>
	/// </summary>
	public abstract partial class IfcMaterialUsageDefinition : BaseIfc
	{
		/// <summary>
		/// Construct a IfcMaterialUsageDefinition with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialUsageDefinition():base()
		{

		}
		public static  IfcMaterialUsageDefinition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialUsageDefinition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmateriallist.htm"/>
	/// </summary>
	public  partial class IfcMaterialList : BaseIfc
	{
		public List<IfcMaterial> Materials{get;set;} 

		/// <summary>
		/// Construct a IfcMaterialList with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialList(List<IfcMaterial> materials):base()
		{
			Materials = materials;

		}
		public static  IfcMaterialList FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialList>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialprofilewithoffsets.htm"/>
	/// </summary>
	public  partial class IfcMaterialProfileWithOffsets : IfcMaterialProfile
	{
		public List<IfcLengthMeasure> OffsetValues{get;set;} 

		/// <summary>
		/// Construct a IfcMaterialProfileWithOffsets with all required attributes.
		/// </summary>
		public IfcMaterialProfileWithOffsets(IfcProfileDef profile,List<IfcLengthMeasure> offsetValues):base(profile)
		{
			OffsetValues = offsetValues;

		}
		/// <summary>
		/// Construct a IfcMaterialProfileWithOffsets with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialProfileWithOffsets(IfcLabel name,IfcText description,IfcMaterial material,IfcProfileDef profile,IfcNormalisedRatioMeasure priority,IfcLabel category,List<IfcLengthMeasure> offsetValues):base(name,description,material,profile,priority,category)
		{
			OffsetValues = offsetValues;

		}
		public static new IfcMaterialProfileWithOffsets FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialProfileWithOffsets>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialprofilesetusage.htm"/>
	/// </summary>
	public  partial class IfcMaterialProfileSetUsage : IfcMaterialUsageDefinition
	{
		public IfcMaterialProfileSet ForProfileSet{get;set;} 
		public IfcCardinalPointReference CardinalPoint{get;set;} // optional
		public IfcPositiveLengthMeasure ReferenceExtent{get;set;} // optional

		/// <summary>
		/// Construct a IfcMaterialProfileSetUsage with all required attributes.
		/// </summary>
		public IfcMaterialProfileSetUsage(IfcMaterialProfileSet forProfileSet):base()
		{
			ForProfileSet = forProfileSet;

		}
		/// <summary>
		/// Construct a IfcMaterialProfileSetUsage with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialProfileSetUsage(IfcMaterialProfileSet forProfileSet,IfcCardinalPointReference cardinalPoint,IfcPositiveLengthMeasure referenceExtent):base()
		{
			ForProfileSet = forProfileSet;
			CardinalPoint = cardinalPoint;
			ReferenceExtent = referenceExtent;

		}
		public static new IfcMaterialProfileSetUsage FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialProfileSetUsage>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialprofilesetusagetapering.htm"/>
	/// </summary>
	public  partial class IfcMaterialProfileSetUsageTapering : IfcMaterialProfileSetUsage
	{
		public IfcMaterialProfileSet ForProfileEndSet{get;set;} 
		public IfcCardinalPointReference CardinalEndPoint{get;set;} // optional

		/// <summary>
		/// Construct a IfcMaterialProfileSetUsageTapering with all required attributes.
		/// </summary>
		public IfcMaterialProfileSetUsageTapering(IfcMaterialProfileSet forProfileSet,IfcMaterialProfileSet forProfileEndSet):base(forProfileSet)
		{
			ForProfileEndSet = forProfileEndSet;

		}
		/// <summary>
		/// Construct a IfcMaterialProfileSetUsageTapering with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialProfileSetUsageTapering(IfcMaterialProfileSet forProfileSet,IfcCardinalPointReference cardinalPoint,IfcPositiveLengthMeasure referenceExtent,IfcMaterialProfileSet forProfileEndSet,IfcCardinalPointReference cardinalEndPoint):base(forProfileSet,cardinalPoint,referenceExtent)
		{
			ForProfileEndSet = forProfileEndSet;
			CardinalEndPoint = cardinalEndPoint;

		}
		public static new IfcMaterialProfileSetUsageTapering FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialProfileSetUsageTapering>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialrelationship.htm"/>
	/// </summary>
	public  partial class IfcMaterialRelationship : IfcResourceLevelRelationship
	{
		public IfcMaterial RelatingMaterial{get;set;} 
		public List<IfcMaterial> RelatedMaterials{get;set;} 
		public IfcLabel Expression{get;set;} // optional

		/// <summary>
		/// Construct a IfcMaterialRelationship with all required attributes.
		/// </summary>
		public IfcMaterialRelationship(IfcMaterial relatingMaterial,List<IfcMaterial> relatedMaterials):base()
		{
			RelatingMaterial = relatingMaterial;
			RelatedMaterials = relatedMaterials;

		}
		/// <summary>
		/// Construct a IfcMaterialRelationship with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMaterialRelationship(IfcLabel name,IfcText description,IfcMaterial relatingMaterial,List<IfcMaterial> relatedMaterials,IfcLabel expression):base(name,description)
		{
			RelatingMaterial = relatingMaterial;
			RelatedMaterials = relatedMaterials;
			Expression = expression;

		}
		public static new IfcMaterialRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialRelationship>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmeasurewithunit.htm"/>
	/// </summary>
	public  partial class IfcMeasureWithUnit : BaseIfc
	{
		public IfcValue ValueComponent{get;set;} 
		public IfcUnit UnitComponent{get;set;} 

		/// <summary>
		/// Construct a IfcMeasureWithUnit with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMeasureWithUnit(IfcValue valueComponent,IfcUnit unitComponent):base()
		{
			ValueComponent = valueComponent;
			UnitComponent = unitComponent;

		}
		public static  IfcMeasureWithUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMeasureWithUnit>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmemberstandardcase.htm"/>
	/// </summary>
	public  partial class IfcMemberStandardCase : IfcMember
	{
		/// <summary>
		/// Construct a IfcMemberStandardCase with all required attributes.
		/// </summary>
		public IfcMemberStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcMemberStandardCase with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMemberStandardCase(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcMemberTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,predefinedType)
		{

		}
		public static new IfcMemberStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMemberStandardCase>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmonetaryunit.htm"/>
	/// </summary>
	public  partial class IfcMonetaryUnit : BaseIfc
	{
		public IfcLabel Currency{get;set;} 

		/// <summary>
		/// Construct a IfcMonetaryUnit with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcMonetaryUnit(IfcLabel currency):base()
		{
			Currency = currency;

		}
		public static  IfcMonetaryUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMonetaryUnit>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsiunit.htm"/>
	/// </summary>
	public  partial class IfcSIUnit : IfcNamedUnit
	{
		public IfcSIPrefix Prefix{get;set;} // optional
		public IfcSIUnitName Name{get;set;} 

		/// <summary>
		/// Construct a IfcSIUnit with all required attributes.
		/// </summary>
		public IfcSIUnit(IfcDimensionalExponents dimensions,IfcUnitEnum unitType,IfcSIUnitName name):base(dimensions,unitType)
		{
			Name = name;

		}
		/// <summary>
		/// Construct a IfcSIUnit with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSIUnit(IfcDimensionalExponents dimensions,IfcUnitEnum unitType,IfcSIPrefix prefix,IfcSIUnitName name):base(dimensions,unitType)
		{
			Prefix = prefix;
			Name = name;

		}
		public static new IfcSIUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSIUnit>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctypeobject.htm"/>
	/// </summary>
	public  partial class IfcTypeObject : IfcObjectDefinition
	{
		public IfcIdentifier ApplicableOccurrence{get;set;} // optional
		public List<IfcPropertySetDefinition> HasPropertySets{get;set;} // optional

		/// <summary>
		/// Construct a IfcTypeObject with all required attributes.
		/// </summary>
		public IfcTypeObject(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcTypeObject with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTypeObject(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets):base(globalId,ownerHistory,name,description)
		{
			ApplicableOccurrence = applicableOccurrence;
			HasPropertySets = new List<IfcPropertySetDefinition>();

		}
		public static new IfcTypeObject FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTypeObject>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcroot.htm"/>
	/// </summary>
	public abstract partial class IfcRoot : BaseIfc
	{
		public IfcGloballyUniqueId GlobalId{get;set;} 
		public IfcOwnerHistory OwnerHistory{get;set;} // optional
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional

		/// <summary>
		/// Construct a IfcRoot with all required attributes.
		/// </summary>
		public IfcRoot(IfcGloballyUniqueId globalId):base()
		{
			GlobalId = globalId;

		}
		/// <summary>
		/// Construct a IfcRoot with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRoot(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description):base()
		{
			GlobalId = globalId;
			OwnerHistory = ownerHistory;
			Name = name;
			Description = description;

		}
		public static  IfcRoot FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRoot>(json);
		}

        public override string STEPParameters(ref Dictionary<Guid, int> indexDictionnary)
        {
            List<string> parameters = new List<string>();
            string baseSTEPParameters = base.STEPParameters(ref indexDictionnary);
            if (!string.IsNullOrEmpty(baseSTEPParameters)) { parameters.Add(baseSTEPParameters);} 
            parameters.Add(GlobalId != null ? GlobalId.STEPValue(ref indexDictionnary) : "$");
            parameters.Add(OwnerHistory != null ? OwnerHistory.STEPValue(ref indexDictionnary) : "$");
            parameters.Add(Name != null ? Name.STEPValue(ref indexDictionnary) : "$");
            parameters.Add(Description != null ? Description.STEPValue(ref indexDictionnary) : "$");

            return string.Join(",", parameters.ToArray());
        }
    }

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcopeningstandardcase.htm"/>
	/// </summary>
	public  partial class IfcOpeningStandardCase : IfcOpeningElement
	{
		/// <summary>
		/// Construct a IfcOpeningStandardCase with all required attributes.
		/// </summary>
		public IfcOpeningStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcOpeningStandardCase with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcOpeningStandardCase(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcOpeningElementTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,predefinedType)
		{

		}
		public static new IfcOpeningStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOpeningStandardCase>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcorganization.htm"/>
	/// </summary>
	public  partial class IfcOrganization : BaseIfc
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public List<IfcActorRole> Roles{get;set;} // optional
		public List<IfcAddress> Addresses{get;set;} // optional

		/// <summary>
		/// Construct a IfcOrganization with all required attributes.
		/// </summary>
		public IfcOrganization(IfcLabel name):base()
		{
			Name = name;

		}
		/// <summary>
		/// Construct a IfcOrganization with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcOrganization(IfcIdentifier identification,IfcLabel name,IfcText description,List<IfcActorRole> roles,List<IfcAddress> addresses):base()
		{
			Identification = identification;
			Name = name;
			Description = description;
			Roles = new List<IfcActorRole>();
			Addresses = new List<IfcAddress>();

		}
		public static  IfcOrganization FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOrganization>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcorganizationrelationship.htm"/>
	/// </summary>
	public  partial class IfcOrganizationRelationship : IfcResourceLevelRelationship
	{
		public IfcOrganization RelatingOrganization{get;set;} 
		public List<IfcOrganization> RelatedOrganizations{get;set;} 

		/// <summary>
		/// Construct a IfcOrganizationRelationship with all required attributes.
		/// </summary>
		public IfcOrganizationRelationship(IfcOrganization relatingOrganization,List<IfcOrganization> relatedOrganizations):base()
		{
			RelatingOrganization = relatingOrganization;
			RelatedOrganizations = relatedOrganizations;

		}
		/// <summary>
		/// Construct a IfcOrganizationRelationship with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcOrganizationRelationship(IfcLabel name,IfcText description,IfcOrganization relatingOrganization,List<IfcOrganization> relatedOrganizations):base(name,description)
		{
			RelatingOrganization = relatingOrganization;
			RelatedOrganizations = relatedOrganizations;

		}
		public static new IfcOrganizationRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOrganizationRelationship>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcownerhistory.htm"/>
	/// </summary>
	public  partial class IfcOwnerHistory : BaseIfc
	{
		public IfcPersonAndOrganization OwningUser{get;set;} 
		public IfcApplication OwningApplication{get;set;} 
		public IfcStateEnum State{get;set;} // optional
		public IfcChangeActionEnum ChangeAction{get;set;} // optional
		public IfcTimeStamp LastModifiedDate{get;set;} // optional
		public IfcPersonAndOrganization LastModifyingUser{get;set;} // optional
		public IfcApplication LastModifyingApplication{get;set;} // optional
		public IfcTimeStamp CreationDate{get;set;} 

		/// <summary>
		/// Construct a IfcOwnerHistory with all required attributes.
		/// </summary>
		public IfcOwnerHistory(IfcPersonAndOrganization owningUser,IfcApplication owningApplication,IfcTimeStamp creationDate):base()
		{
			OwningUser = owningUser;
			OwningApplication = owningApplication;
			CreationDate = creationDate;

		}
		/// <summary>
		/// Construct a IfcOwnerHistory with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcOwnerHistory(IfcPersonAndOrganization owningUser,IfcApplication owningApplication,IfcStateEnum state,IfcChangeActionEnum changeAction,IfcTimeStamp lastModifiedDate,IfcPersonAndOrganization lastModifyingUser,IfcApplication lastModifyingApplication,IfcTimeStamp creationDate):base()
		{
			OwningUser = owningUser;
			OwningApplication = owningApplication;
			State = state;
			ChangeAction = changeAction;
			LastModifiedDate = lastModifiedDate;
			LastModifyingUser = lastModifyingUser;
			LastModifyingApplication = lastModifyingApplication;
			CreationDate = creationDate;

		}
		public static  IfcOwnerHistory FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOwnerHistory>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrectangleprofiledef.htm"/>
	/// </summary>
	public  partial class IfcRectangleProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure XDim{get;set;} 
		public IfcPositiveLengthMeasure YDim{get;set;} 

		/// <summary>
		/// Construct a IfcRectangleProfileDef with all required attributes.
		/// </summary>
		public IfcRectangleProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure xDim,IfcPositiveLengthMeasure yDim):base(profileType)
		{
			XDim = xDim;
			YDim = yDim;

		}
		/// <summary>
		/// Construct a IfcRectangleProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRectangleProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure xDim,IfcPositiveLengthMeasure yDim):base(profileType,profileName,position)
		{
			XDim = xDim;
			YDim = yDim;

		}
		public static new IfcRectangleProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRectangleProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctshapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcTShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure Depth{get;set;} 
		public IfcPositiveLengthMeasure FlangeWidth{get;set;} 
		public IfcPositiveLengthMeasure WebThickness{get;set;} 
		public IfcPositiveLengthMeasure FlangeThickness{get;set;} 
		public IfcNonNegativeLengthMeasure FilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure FlangeEdgeRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure WebEdgeRadius{get;set;} // optional
		public IfcPlaneAngleMeasure WebSlope{get;set;} // optional
		public IfcPlaneAngleMeasure FlangeSlope{get;set;} // optional

		/// <summary>
		/// Construct a IfcTShapeProfileDef with all required attributes.
		/// </summary>
		public IfcTShapeProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure flangeWidth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure flangeThickness):base(profileType)
		{
			Depth = depth;
			FlangeWidth = flangeWidth;
			WebThickness = webThickness;
			FlangeThickness = flangeThickness;

		}
		/// <summary>
		/// Construct a IfcTShapeProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTShapeProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure flangeWidth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure flangeThickness,IfcNonNegativeLengthMeasure filletRadius,IfcNonNegativeLengthMeasure flangeEdgeRadius,IfcNonNegativeLengthMeasure webEdgeRadius,IfcPlaneAngleMeasure webSlope,IfcPlaneAngleMeasure flangeSlope):base(profileType,profileName,position)
		{
			Depth = depth;
			FlangeWidth = flangeWidth;
			WebThickness = webThickness;
			FlangeThickness = flangeThickness;
			FilletRadius = filletRadius;
			FlangeEdgeRadius = flangeEdgeRadius;
			WebEdgeRadius = webEdgeRadius;
			WebSlope = webSlope;
			FlangeSlope = flangeSlope;

		}
		public static new IfcTShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTShapeProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctrapeziumprofiledef.htm"/>
	/// </summary>
	public  partial class IfcTrapeziumProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure BottomXDim{get;set;} 
		public IfcPositiveLengthMeasure TopXDim{get;set;} 
		public IfcPositiveLengthMeasure YDim{get;set;} 
		public IfcLengthMeasure TopXOffset{get;set;} 

		/// <summary>
		/// Construct a IfcTrapeziumProfileDef with all required attributes.
		/// </summary>
		public IfcTrapeziumProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure bottomXDim,IfcPositiveLengthMeasure topXDim,IfcPositiveLengthMeasure yDim,IfcLengthMeasure topXOffset):base(profileType)
		{
			BottomXDim = bottomXDim;
			TopXDim = topXDim;
			YDim = yDim;
			TopXOffset = topXOffset;

		}
		/// <summary>
		/// Construct a IfcTrapeziumProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTrapeziumProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure bottomXDim,IfcPositiveLengthMeasure topXDim,IfcPositiveLengthMeasure yDim,IfcLengthMeasure topXOffset):base(profileType,profileName,position)
		{
			BottomXDim = bottomXDim;
			TopXDim = topXDim;
			YDim = yDim;
			TopXOffset = topXOffset;

		}
		public static new IfcTrapeziumProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTrapeziumProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcushapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcUShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure Depth{get;set;} 
		public IfcPositiveLengthMeasure FlangeWidth{get;set;} 
		public IfcPositiveLengthMeasure WebThickness{get;set;} 
		public IfcPositiveLengthMeasure FlangeThickness{get;set;} 
		public IfcNonNegativeLengthMeasure FilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure EdgeRadius{get;set;} // optional
		public IfcPlaneAngleMeasure FlangeSlope{get;set;} // optional

		/// <summary>
		/// Construct a IfcUShapeProfileDef with all required attributes.
		/// </summary>
		public IfcUShapeProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure flangeWidth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure flangeThickness):base(profileType)
		{
			Depth = depth;
			FlangeWidth = flangeWidth;
			WebThickness = webThickness;
			FlangeThickness = flangeThickness;

		}
		/// <summary>
		/// Construct a IfcUShapeProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcUShapeProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure flangeWidth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure flangeThickness,IfcNonNegativeLengthMeasure filletRadius,IfcNonNegativeLengthMeasure edgeRadius,IfcPlaneAngleMeasure flangeSlope):base(profileType,profileName,position)
		{
			Depth = depth;
			FlangeWidth = flangeWidth;
			WebThickness = webThickness;
			FlangeThickness = flangeThickness;
			FilletRadius = filletRadius;
			EdgeRadius = edgeRadius;
			FlangeSlope = flangeSlope;

		}
		public static new IfcUShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUShapeProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifczshapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcZShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure Depth{get;set;} 
		public IfcPositiveLengthMeasure FlangeWidth{get;set;} 
		public IfcPositiveLengthMeasure WebThickness{get;set;} 
		public IfcPositiveLengthMeasure FlangeThickness{get;set;} 
		public IfcNonNegativeLengthMeasure FilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure EdgeRadius{get;set;} // optional

		/// <summary>
		/// Construct a IfcZShapeProfileDef with all required attributes.
		/// </summary>
		public IfcZShapeProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure flangeWidth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure flangeThickness):base(profileType)
		{
			Depth = depth;
			FlangeWidth = flangeWidth;
			WebThickness = webThickness;
			FlangeThickness = flangeThickness;

		}
		/// <summary>
		/// Construct a IfcZShapeProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcZShapeProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure flangeWidth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure flangeThickness,IfcNonNegativeLengthMeasure filletRadius,IfcNonNegativeLengthMeasure edgeRadius):base(profileType,profileName,position)
		{
			Depth = depth;
			FlangeWidth = flangeWidth;
			WebThickness = webThickness;
			FlangeThickness = flangeThickness;
			FilletRadius = filletRadius;
			EdgeRadius = edgeRadius;

		}
		public static new IfcZShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcZShapeProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpath.htm"/>
	/// </summary>
	public  partial class IfcPath : IfcTopologicalRepresentationItem
	{
		public List<IfcOrientedEdge> EdgeList{get;set;} 

		/// <summary>
		/// Construct a IfcPath with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPath(List<IfcOrientedEdge> edgeList):base()
		{
			EdgeList = edgeList;

		}
		public static new IfcPath FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPath>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpermeablecoveringproperties.htm"/>
	/// </summary>
	public  partial class IfcPermeableCoveringProperties : IfcPreDefinedPropertySet
	{
		public IfcPermeableCoveringOperationEnum OperationType{get;set;} 
		public IfcWindowPanelPositionEnum PanelPosition{get;set;} 
		public IfcPositiveLengthMeasure FrameDepth{get;set;} // optional
		public IfcPositiveLengthMeasure FrameThickness{get;set;} // optional
		public IfcShapeAspect ShapeAspectStyle{get;set;} // optional

		/// <summary>
		/// Construct a IfcPermeableCoveringProperties with all required attributes.
		/// </summary>
		public IfcPermeableCoveringProperties(IfcGloballyUniqueId globalId,IfcPermeableCoveringOperationEnum operationType,IfcWindowPanelPositionEnum panelPosition):base(globalId)
		{
			OperationType = operationType;
			PanelPosition = panelPosition;

		}
		/// <summary>
		/// Construct a IfcPermeableCoveringProperties with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPermeableCoveringProperties(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcPermeableCoveringOperationEnum operationType,IfcWindowPanelPositionEnum panelPosition,IfcPositiveLengthMeasure frameDepth,IfcPositiveLengthMeasure frameThickness,IfcShapeAspect shapeAspectStyle):base(globalId,ownerHistory,name,description)
		{
			OperationType = operationType;
			PanelPosition = panelPosition;
			FrameDepth = frameDepth;
			FrameThickness = frameThickness;
			ShapeAspectStyle = shapeAspectStyle;

		}
		public static new IfcPermeableCoveringProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPermeableCoveringProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcperson.htm"/>
	/// </summary>
	public  partial class IfcPerson : BaseIfc
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcLabel FamilyName{get;set;} // optional
		public IfcLabel GivenName{get;set;} // optional
		public List<IfcLabel> MiddleNames{get;set;} // optional
		public List<IfcLabel> PrefixTitles{get;set;} // optional
		public List<IfcLabel> SuffixTitles{get;set;} // optional
		public List<IfcActorRole> Roles{get;set;} // optional
		public List<IfcAddress> Addresses{get;set;} // optional

		/// <summary>
		/// Construct a IfcPerson with all required attributes.
		/// </summary>
		public IfcPerson():base()
		{

		}
		/// <summary>
		/// Construct a IfcPerson with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPerson(IfcIdentifier identification,IfcLabel familyName,IfcLabel givenName,List<IfcLabel> middleNames,List<IfcLabel> prefixTitles,List<IfcLabel> suffixTitles,List<IfcActorRole> roles,List<IfcAddress> addresses):base()
		{
			Identification = identification;
			FamilyName = familyName;
			GivenName = givenName;
			MiddleNames = new List<IfcLabel>();
			PrefixTitles = new List<IfcLabel>();
			SuffixTitles = new List<IfcLabel>();
			Roles = new List<IfcActorRole>();
			Addresses = new List<IfcAddress>();

		}
		public static  IfcPerson FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPerson>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpersonandorganization.htm"/>
	/// </summary>
	public  partial class IfcPersonAndOrganization : BaseIfc
	{
		public IfcPerson ThePerson{get;set;} 
		public IfcOrganization TheOrganization{get;set;} 
		public List<IfcActorRole> Roles{get;set;} // optional

		/// <summary>
		/// Construct a IfcPersonAndOrganization with all required attributes.
		/// </summary>
		public IfcPersonAndOrganization(IfcPerson thePerson,IfcOrganization theOrganization):base()
		{
			ThePerson = thePerson;
			TheOrganization = theOrganization;

		}
		/// <summary>
		/// Construct a IfcPersonAndOrganization with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPersonAndOrganization(IfcPerson thePerson,IfcOrganization theOrganization,List<IfcActorRole> roles):base()
		{
			ThePerson = thePerson;
			TheOrganization = theOrganization;
			Roles = new List<IfcActorRole>();

		}
		public static  IfcPersonAndOrganization FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPersonAndOrganization>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcphysicalcomplexquantity.htm"/>
	/// </summary>
	public  partial class IfcPhysicalComplexQuantity : IfcPhysicalQuantity
	{
		public List<IfcPhysicalQuantity> HasQuantities{get;set;} 
		public IfcLabel Discrimination{get;set;} 
		public IfcLabel Quality{get;set;} // optional
		public IfcLabel Usage{get;set;} // optional

		/// <summary>
		/// Construct a IfcPhysicalComplexQuantity with all required attributes.
		/// </summary>
		public IfcPhysicalComplexQuantity(IfcLabel name,List<IfcPhysicalQuantity> hasQuantities,IfcLabel discrimination):base(name)
		{
			HasQuantities = hasQuantities;
			Discrimination = discrimination;

		}
		/// <summary>
		/// Construct a IfcPhysicalComplexQuantity with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPhysicalComplexQuantity(IfcLabel name,IfcText description,List<IfcPhysicalQuantity> hasQuantities,IfcLabel discrimination,IfcLabel quality,IfcLabel usage):base(name,description)
		{
			HasQuantities = hasQuantities;
			Discrimination = discrimination;
			Quality = quality;
			Usage = usage;

		}
		public static new IfcPhysicalComplexQuantity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPhysicalComplexQuantity>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcphysicalquantity.htm"/>
	/// </summary>
	public abstract partial class IfcPhysicalQuantity : BaseIfc
	{
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional

		/// <summary>
		/// Construct a IfcPhysicalQuantity with all required attributes.
		/// </summary>
		public IfcPhysicalQuantity(IfcLabel name):base()
		{
			Name = name;

		}
		/// <summary>
		/// Construct a IfcPhysicalQuantity with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPhysicalQuantity(IfcLabel name,IfcText description):base()
		{
			Name = name;
			Description = description;

		}
		public static  IfcPhysicalQuantity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPhysicalQuantity>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcphysicalsimplequantity.htm"/>
	/// </summary>
	public abstract partial class IfcPhysicalSimpleQuantity : IfcPhysicalQuantity
	{
		public IfcNamedUnit Unit{get;set;} // optional

		/// <summary>
		/// Construct a IfcPhysicalSimpleQuantity with all required attributes.
		/// </summary>
		public IfcPhysicalSimpleQuantity(IfcLabel name):base(name)
		{

		}
		/// <summary>
		/// Construct a IfcPhysicalSimpleQuantity with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPhysicalSimpleQuantity(IfcLabel name,IfcText description,IfcNamedUnit unit):base(name,description)
		{
			Unit = unit;

		}
		public static new IfcPhysicalSimpleQuantity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPhysicalSimpleQuantity>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantityarea.htm"/>
	/// </summary>
	public  partial class IfcQuantityArea : IfcPhysicalSimpleQuantity
	{
		public IfcAreaMeasure AreaValue{get;set;} 
		public IfcLabel Formula{get;set;} // optional

		/// <summary>
		/// Construct a IfcQuantityArea with all required attributes.
		/// </summary>
		public IfcQuantityArea(IfcLabel name,IfcAreaMeasure areaValue):base(name)
		{
			AreaValue = areaValue;

		}
		/// <summary>
		/// Construct a IfcQuantityArea with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcQuantityArea(IfcLabel name,IfcText description,IfcNamedUnit unit,IfcAreaMeasure areaValue,IfcLabel formula):base(name,description,unit)
		{
			AreaValue = areaValue;
			Formula = formula;

		}
		public static new IfcQuantityArea FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantityArea>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantitycount.htm"/>
	/// </summary>
	public  partial class IfcQuantityCount : IfcPhysicalSimpleQuantity
	{
		public IfcCountMeasure CountValue{get;set;} 
		public IfcLabel Formula{get;set;} // optional

		/// <summary>
		/// Construct a IfcQuantityCount with all required attributes.
		/// </summary>
		public IfcQuantityCount(IfcLabel name,IfcCountMeasure countValue):base(name)
		{
			CountValue = countValue;

		}
		/// <summary>
		/// Construct a IfcQuantityCount with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcQuantityCount(IfcLabel name,IfcText description,IfcNamedUnit unit,IfcCountMeasure countValue,IfcLabel formula):base(name,description,unit)
		{
			CountValue = countValue;
			Formula = formula;

		}
		public static new IfcQuantityCount FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantityCount>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantitylength.htm"/>
	/// </summary>
	public  partial class IfcQuantityLength : IfcPhysicalSimpleQuantity
	{
		public IfcLengthMeasure LengthValue{get;set;} 
		public IfcLabel Formula{get;set;} // optional

		/// <summary>
		/// Construct a IfcQuantityLength with all required attributes.
		/// </summary>
		public IfcQuantityLength(IfcLabel name,IfcLengthMeasure lengthValue):base(name)
		{
			LengthValue = lengthValue;

		}
		/// <summary>
		/// Construct a IfcQuantityLength with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcQuantityLength(IfcLabel name,IfcText description,IfcNamedUnit unit,IfcLengthMeasure lengthValue,IfcLabel formula):base(name,description,unit)
		{
			LengthValue = lengthValue;
			Formula = formula;

		}
		public static new IfcQuantityLength FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantityLength>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantitytime.htm"/>
	/// </summary>
	public  partial class IfcQuantityTime : IfcPhysicalSimpleQuantity
	{
		public IfcTimeMeasure TimeValue{get;set;} 
		public IfcLabel Formula{get;set;} // optional

		/// <summary>
		/// Construct a IfcQuantityTime with all required attributes.
		/// </summary>
		public IfcQuantityTime(IfcLabel name,IfcTimeMeasure timeValue):base(name)
		{
			TimeValue = timeValue;

		}
		/// <summary>
		/// Construct a IfcQuantityTime with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcQuantityTime(IfcLabel name,IfcText description,IfcNamedUnit unit,IfcTimeMeasure timeValue,IfcLabel formula):base(name,description,unit)
		{
			TimeValue = timeValue;
			Formula = formula;

		}
		public static new IfcQuantityTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantityTime>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantityvolume.htm"/>
	/// </summary>
	public  partial class IfcQuantityVolume : IfcPhysicalSimpleQuantity
	{
		public IfcVolumeMeasure VolumeValue{get;set;} 
		public IfcLabel Formula{get;set;} // optional

		/// <summary>
		/// Construct a IfcQuantityVolume with all required attributes.
		/// </summary>
		public IfcQuantityVolume(IfcLabel name,IfcVolumeMeasure volumeValue):base(name)
		{
			VolumeValue = volumeValue;

		}
		/// <summary>
		/// Construct a IfcQuantityVolume with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcQuantityVolume(IfcLabel name,IfcText description,IfcNamedUnit unit,IfcVolumeMeasure volumeValue,IfcLabel formula):base(name,description,unit)
		{
			VolumeValue = volumeValue;
			Formula = formula;

		}
		public static new IfcQuantityVolume FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantityVolume>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantityweight.htm"/>
	/// </summary>
	public  partial class IfcQuantityWeight : IfcPhysicalSimpleQuantity
	{
		public IfcMassMeasure WeightValue{get;set;} 
		public IfcLabel Formula{get;set;} // optional

		/// <summary>
		/// Construct a IfcQuantityWeight with all required attributes.
		/// </summary>
		public IfcQuantityWeight(IfcLabel name,IfcMassMeasure weightValue):base(name)
		{
			WeightValue = weightValue;

		}
		/// <summary>
		/// Construct a IfcQuantityWeight with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcQuantityWeight(IfcLabel name,IfcText description,IfcNamedUnit unit,IfcMassMeasure weightValue,IfcLabel formula):base(name,description,unit)
		{
			WeightValue = weightValue;
			Formula = formula;

		}
		public static new IfcQuantityWeight FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantityWeight>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpixeltexture.htm"/>
	/// </summary>
	public  partial class IfcPixelTexture : IfcSurfaceTexture
	{
		public IfcInteger Width{get;set;} 
		public IfcInteger Height{get;set;} 
		public IfcInteger ColourComponents{get;set;} 
		public List<byte[]> Pixel{get;set;} 

		/// <summary>
		/// Construct a IfcPixelTexture with all required attributes.
		/// </summary>
		public IfcPixelTexture(bool repeatS,bool repeatT,IfcInteger width,IfcInteger height,IfcInteger colourComponents,List<byte[]> pixel):base(repeatS,repeatT)
		{
			Width = width;
			Height = height;
			ColourComponents = colourComponents;
			Pixel = pixel;

		}
		/// <summary>
		/// Construct a IfcPixelTexture with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPixelTexture(bool repeatS,bool repeatT,IfcIdentifier mode,IfcCartesianTransformationOperator2D textureTransform,List<IfcIdentifier> parameter,IfcInteger width,IfcInteger height,IfcInteger colourComponents,List<byte[]> pixel):base(repeatS,repeatT,mode,textureTransform,parameter)
		{
			Width = width;
			Height = height;
			ColourComponents = colourComponents;
			Pixel = pixel;

		}
		public static new IfcPixelTexture FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPixelTexture>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplanarbox.htm"/>
	/// </summary>
	public  partial class IfcPlanarBox : IfcPlanarExtent
	{
		public IfcAxis2Placement Placement{get;set;} 

		/// <summary>
		/// Construct a IfcPlanarBox with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPlanarBox(IfcLengthMeasure sizeInX,IfcLengthMeasure sizeInY,IfcAxis2Placement placement):base(sizeInX,sizeInY)
		{
			Placement = placement;

		}
		public static new IfcPlanarBox FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlanarBox>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplatestandardcase.htm"/>
	/// </summary>
	public  partial class IfcPlateStandardCase : IfcPlate
	{
		/// <summary>
		/// Construct a IfcPlateStandardCase with all required attributes.
		/// </summary>
		public IfcPlateStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcPlateStandardCase with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPlateStandardCase(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcPlateTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,predefinedType)
		{

		}
		public static new IfcPlateStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlateStandardCase>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpointoncurve.htm"/>
	/// </summary>
	public  partial class IfcPointOnCurve : IfcPoint
	{
		public IfcCurve BasisCurve{get;set;} 
		public IfcParameterValue PointParameter{get;set;} 

		/// <summary>
		/// Construct a IfcPointOnCurve with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPointOnCurve(IfcCurve basisCurve,IfcParameterValue pointParameter):base()
		{
			BasisCurve = basisCurve;
			PointParameter = pointParameter;

		}
		public static new IfcPointOnCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPointOnCurve>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpointonsurface.htm"/>
	/// </summary>
	public  partial class IfcPointOnSurface : IfcPoint
	{
		public IfcSurface BasisSurface{get;set;} 
		public IfcParameterValue PointParameterU{get;set;} 
		public IfcParameterValue PointParameterV{get;set;} 

		/// <summary>
		/// Construct a IfcPointOnSurface with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPointOnSurface(IfcSurface basisSurface,IfcParameterValue pointParameterU,IfcParameterValue pointParameterV):base()
		{
			BasisSurface = basisSurface;
			PointParameterU = pointParameterU;
			PointParameterV = pointParameterV;

		}
		public static new IfcPointOnSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPointOnSurface>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpredefineditem.htm"/>
	/// </summary>
	public abstract partial class IfcPreDefinedItem : IfcPresentationItem
	{
		public IfcLabel Name{get;set;} 

		/// <summary>
		/// Construct a IfcPreDefinedItem with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPreDefinedItem(IfcLabel name):base()
		{
			Name = name;

		}
		public static new IfcPreDefinedItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPreDefinedItem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpredefinedtextfont.htm"/>
	/// </summary>
	public abstract partial class IfcPreDefinedTextFont : IfcPreDefinedItem
	{
		/// <summary>
		/// Construct a IfcPreDefinedTextFont with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPreDefinedTextFont(IfcLabel name):base(name)
		{

		}
		public static new IfcPreDefinedTextFont FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPreDefinedTextFont>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpredefinedproperties.htm"/>
	/// </summary>
	public abstract partial class IfcPreDefinedProperties : IfcPropertyAbstraction
	{
		/// <summary>
		/// Construct a IfcPreDefinedProperties with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPreDefinedProperties():base()
		{

		}
		public static new IfcPreDefinedProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPreDefinedProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcementbarproperties.htm"/>
	/// </summary>
	public  partial class IfcReinforcementBarProperties : IfcPreDefinedProperties
	{
		public IfcAreaMeasure TotalCrossSectionArea{get;set;} 
		public IfcLabel SteelGrade{get;set;} 
		public IfcReinforcingBarSurfaceEnum BarSurface{get;set;} // optional
		public IfcLengthMeasure EffectiveDepth{get;set;} // optional
		public IfcPositiveLengthMeasure NominalBarDiameter{get;set;} // optional
		public IfcCountMeasure BarCount{get;set;} // optional

		/// <summary>
		/// Construct a IfcReinforcementBarProperties with all required attributes.
		/// </summary>
		public IfcReinforcementBarProperties(IfcAreaMeasure totalCrossSectionArea,IfcLabel steelGrade):base()
		{
			TotalCrossSectionArea = totalCrossSectionArea;
			SteelGrade = steelGrade;

		}
		/// <summary>
		/// Construct a IfcReinforcementBarProperties with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcReinforcementBarProperties(IfcAreaMeasure totalCrossSectionArea,IfcLabel steelGrade,IfcReinforcingBarSurfaceEnum barSurface,IfcLengthMeasure effectiveDepth,IfcPositiveLengthMeasure nominalBarDiameter,IfcCountMeasure barCount):base()
		{
			TotalCrossSectionArea = totalCrossSectionArea;
			SteelGrade = steelGrade;
			BarSurface = barSurface;
			EffectiveDepth = effectiveDepth;
			NominalBarDiameter = nominalBarDiameter;
			BarCount = barCount;

		}
		public static new IfcReinforcementBarProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcementBarProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsectionproperties.htm"/>
	/// </summary>
	public  partial class IfcSectionProperties : IfcPreDefinedProperties
	{
		public IfcSectionTypeEnum SectionType{get;set;} 
		public IfcProfileDef StartProfile{get;set;} 
		public IfcProfileDef EndProfile{get;set;} // optional

		/// <summary>
		/// Construct a IfcSectionProperties with all required attributes.
		/// </summary>
		public IfcSectionProperties(IfcSectionTypeEnum sectionType,IfcProfileDef startProfile):base()
		{
			SectionType = sectionType;
			StartProfile = startProfile;

		}
		/// <summary>
		/// Construct a IfcSectionProperties with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSectionProperties(IfcSectionTypeEnum sectionType,IfcProfileDef startProfile,IfcProfileDef endProfile):base()
		{
			SectionType = sectionType;
			StartProfile = startProfile;
			EndProfile = endProfile;

		}
		public static new IfcSectionProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSectionProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsectionreinforcementproperties.htm"/>
	/// </summary>
	public  partial class IfcSectionReinforcementProperties : IfcPreDefinedProperties
	{
		public IfcLengthMeasure LongitudinalStartPosition{get;set;} 
		public IfcLengthMeasure LongitudinalEndPosition{get;set;} 
		public IfcLengthMeasure TransversePosition{get;set;} // optional
		public IfcReinforcingBarRoleEnum ReinforcementRole{get;set;} 
		public IfcSectionProperties SectionDefinition{get;set;} 
		public List<IfcReinforcementBarProperties> CrossSectionReinforcementDefinitions{get;set;} 

		/// <summary>
		/// Construct a IfcSectionReinforcementProperties with all required attributes.
		/// </summary>
		public IfcSectionReinforcementProperties(IfcLengthMeasure longitudinalStartPosition,IfcLengthMeasure longitudinalEndPosition,IfcReinforcingBarRoleEnum reinforcementRole,IfcSectionProperties sectionDefinition,List<IfcReinforcementBarProperties> crossSectionReinforcementDefinitions):base()
		{
			LongitudinalStartPosition = longitudinalStartPosition;
			LongitudinalEndPosition = longitudinalEndPosition;
			ReinforcementRole = reinforcementRole;
			SectionDefinition = sectionDefinition;
			CrossSectionReinforcementDefinitions = crossSectionReinforcementDefinitions;

		}
		/// <summary>
		/// Construct a IfcSectionReinforcementProperties with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSectionReinforcementProperties(IfcLengthMeasure longitudinalStartPosition,IfcLengthMeasure longitudinalEndPosition,IfcLengthMeasure transversePosition,IfcReinforcingBarRoleEnum reinforcementRole,IfcSectionProperties sectionDefinition,List<IfcReinforcementBarProperties> crossSectionReinforcementDefinitions):base()
		{
			LongitudinalStartPosition = longitudinalStartPosition;
			LongitudinalEndPosition = longitudinalEndPosition;
			TransversePosition = transversePosition;
			ReinforcementRole = reinforcementRole;
			SectionDefinition = sectionDefinition;
			CrossSectionReinforcementDefinitions = crossSectionReinforcementDefinitions;

		}
		public static new IfcSectionReinforcementProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSectionReinforcementProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcementdefinitionproperties.htm"/>
	/// </summary>
	public  partial class IfcReinforcementDefinitionProperties : IfcPreDefinedPropertySet
	{
		public IfcLabel DefinitionType{get;set;} // optional
		public List<IfcSectionReinforcementProperties> ReinforcementSectionDefinitions{get;set;} 

		/// <summary>
		/// Construct a IfcReinforcementDefinitionProperties with all required attributes.
		/// </summary>
		public IfcReinforcementDefinitionProperties(IfcGloballyUniqueId globalId,List<IfcSectionReinforcementProperties> reinforcementSectionDefinitions):base(globalId)
		{
			ReinforcementSectionDefinitions = reinforcementSectionDefinitions;

		}
		/// <summary>
		/// Construct a IfcReinforcementDefinitionProperties with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcReinforcementDefinitionProperties(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel definitionType,List<IfcSectionReinforcementProperties> reinforcementSectionDefinitions):base(globalId,ownerHistory,name,description)
		{
			DefinitionType = definitionType;
			ReinforcementSectionDefinitions = reinforcementSectionDefinitions;

		}
		public static new IfcReinforcementDefinitionProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcementDefinitionProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowliningproperties.htm"/>
	/// </summary>
	public  partial class IfcWindowLiningProperties : IfcPreDefinedPropertySet
	{
		public IfcPositiveLengthMeasure LiningDepth{get;set;} // optional
		public IfcNonNegativeLengthMeasure LiningThickness{get;set;} // optional
		public IfcNonNegativeLengthMeasure TransomThickness{get;set;} // optional
		public IfcNonNegativeLengthMeasure MullionThickness{get;set;} // optional
		public IfcNormalisedRatioMeasure FirstTransomOffset{get;set;} // optional
		public IfcNormalisedRatioMeasure SecondTransomOffset{get;set;} // optional
		public IfcNormalisedRatioMeasure FirstMullionOffset{get;set;} // optional
		public IfcNormalisedRatioMeasure SecondMullionOffset{get;set;} // optional
		public IfcShapeAspect ShapeAspectStyle{get;set;} // optional
		public IfcLengthMeasure LiningOffset{get;set;} // optional
		public IfcLengthMeasure LiningToPanelOffsetX{get;set;} // optional
		public IfcLengthMeasure LiningToPanelOffsetY{get;set;} // optional

		/// <summary>
		/// Construct a IfcWindowLiningProperties with all required attributes.
		/// </summary>
		public IfcWindowLiningProperties(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcWindowLiningProperties with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWindowLiningProperties(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcPositiveLengthMeasure liningDepth,IfcNonNegativeLengthMeasure liningThickness,IfcNonNegativeLengthMeasure transomThickness,IfcNonNegativeLengthMeasure mullionThickness,IfcNormalisedRatioMeasure firstTransomOffset,IfcNormalisedRatioMeasure secondTransomOffset,IfcNormalisedRatioMeasure firstMullionOffset,IfcNormalisedRatioMeasure secondMullionOffset,IfcShapeAspect shapeAspectStyle,IfcLengthMeasure liningOffset,IfcLengthMeasure liningToPanelOffsetX,IfcLengthMeasure liningToPanelOffsetY):base(globalId,ownerHistory,name,description)
		{
			LiningDepth = liningDepth;
			LiningThickness = liningThickness;
			TransomThickness = transomThickness;
			MullionThickness = mullionThickness;
			FirstTransomOffset = firstTransomOffset;
			SecondTransomOffset = secondTransomOffset;
			FirstMullionOffset = firstMullionOffset;
			SecondMullionOffset = secondMullionOffset;
			ShapeAspectStyle = shapeAspectStyle;
			LiningOffset = liningOffset;
			LiningToPanelOffsetX = liningToPanelOffsetX;
			LiningToPanelOffsetY = liningToPanelOffsetY;

		}
		public static new IfcWindowLiningProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWindowLiningProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowpanelproperties.htm"/>
	/// </summary>
	public  partial class IfcWindowPanelProperties : IfcPreDefinedPropertySet
	{
		public IfcWindowPanelOperationEnum OperationType{get;set;} 
		public IfcWindowPanelPositionEnum PanelPosition{get;set;} 
		public IfcPositiveLengthMeasure FrameDepth{get;set;} // optional
		public IfcPositiveLengthMeasure FrameThickness{get;set;} // optional
		public IfcShapeAspect ShapeAspectStyle{get;set;} // optional

		/// <summary>
		/// Construct a IfcWindowPanelProperties with all required attributes.
		/// </summary>
		public IfcWindowPanelProperties(IfcGloballyUniqueId globalId,IfcWindowPanelOperationEnum operationType,IfcWindowPanelPositionEnum panelPosition):base(globalId)
		{
			OperationType = operationType;
			PanelPosition = panelPosition;

		}
		/// <summary>
		/// Construct a IfcWindowPanelProperties with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWindowPanelProperties(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcWindowPanelOperationEnum operationType,IfcWindowPanelPositionEnum panelPosition,IfcPositiveLengthMeasure frameDepth,IfcPositiveLengthMeasure frameThickness,IfcShapeAspect shapeAspectStyle):base(globalId,ownerHistory,name,description)
		{
			OperationType = operationType;
			PanelPosition = panelPosition;
			FrameDepth = frameDepth;
			FrameThickness = frameThickness;
			ShapeAspectStyle = shapeAspectStyle;

		}
		public static new IfcWindowPanelProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWindowPanelProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertysetdefinition.htm"/>
	/// </summary>
	public abstract partial class IfcPropertySetDefinition : IfcPropertyDefinition
	{
		/// <summary>
		/// Construct a IfcPropertySetDefinition with all required attributes.
		/// </summary>
		public IfcPropertySetDefinition(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcPropertySetDefinition with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertySetDefinition(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description):base(globalId,ownerHistory,name,description)
		{

		}
		public static new IfcPropertySetDefinition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertySetDefinition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextstylefontmodel.htm"/>
	/// </summary>
	public  partial class IfcTextStyleFontModel : IfcPreDefinedTextFont
	{
		public List<IfcTextFontName> FontFamily{get;set;} 
		public IfcFontStyle FontStyle{get;set;} // optional
		public IfcFontVariant FontVariant{get;set;} // optional
		public IfcFontWeight FontWeight{get;set;} // optional
		public IfcSizeSelect FontSize{get;set;} 

		/// <summary>
		/// Construct a IfcTextStyleFontModel with all required attributes.
		/// </summary>
		public IfcTextStyleFontModel(IfcLabel name,List<IfcTextFontName> fontFamily,IfcSizeSelect fontSize):base(name)
		{
			FontFamily = fontFamily;
			FontSize = fontSize;

		}
		/// <summary>
		/// Construct a IfcTextStyleFontModel with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTextStyleFontModel(IfcLabel name,List<IfcTextFontName> fontFamily,IfcFontStyle fontStyle,IfcFontVariant fontVariant,IfcFontWeight fontWeight,IfcSizeSelect fontSize):base(name)
		{
			FontFamily = fontFamily;
			FontStyle = fontStyle;
			FontVariant = fontVariant;
			FontWeight = fontWeight;
			FontSize = fontSize;

		}
		public static new IfcTextStyleFontModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextStyleFontModel>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestylelighting.htm"/>
	/// </summary>
	public  partial class IfcSurfaceStyleLighting : IfcPresentationItem
	{
		public IfcColourRgb DiffuseTransmissionColour{get;set;} 
		public IfcColourRgb DiffuseReflectionColour{get;set;} 
		public IfcColourRgb TransmissionColour{get;set;} 
		public IfcColourRgb ReflectanceColour{get;set;} 

		/// <summary>
		/// Construct a IfcSurfaceStyleLighting with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSurfaceStyleLighting(IfcColourRgb diffuseTransmissionColour,IfcColourRgb diffuseReflectionColour,IfcColourRgb transmissionColour,IfcColourRgb reflectanceColour):base()
		{
			DiffuseTransmissionColour = diffuseTransmissionColour;
			DiffuseReflectionColour = diffuseReflectionColour;
			TransmissionColour = transmissionColour;
			ReflectanceColour = reflectanceColour;

		}
		public static new IfcSurfaceStyleLighting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyleLighting>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestylerefraction.htm"/>
	/// </summary>
	public  partial class IfcSurfaceStyleRefraction : IfcPresentationItem
	{
		public IfcReal RefractionIndex{get;set;} // optional
		public IfcReal DispersionFactor{get;set;} // optional

		/// <summary>
		/// Construct a IfcSurfaceStyleRefraction with all required attributes.
		/// </summary>
		public IfcSurfaceStyleRefraction():base()
		{

		}
		/// <summary>
		/// Construct a IfcSurfaceStyleRefraction with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSurfaceStyleRefraction(IfcReal refractionIndex,IfcReal dispersionFactor):base()
		{
			RefractionIndex = refractionIndex;
			DispersionFactor = dispersionFactor;

		}
		public static new IfcSurfaceStyleRefraction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyleRefraction>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestyleshading.htm"/>
	/// </summary>
	public  partial class IfcSurfaceStyleShading : IfcPresentationItem
	{
		public IfcColourRgb SurfaceColour{get;set;} 

		/// <summary>
		/// Construct a IfcSurfaceStyleShading with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSurfaceStyleShading(IfcColourRgb surfaceColour):base()
		{
			SurfaceColour = surfaceColour;

		}
		public static new IfcSurfaceStyleShading FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyleShading>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestylewithtextures.htm"/>
	/// </summary>
	public  partial class IfcSurfaceStyleWithTextures : IfcPresentationItem
	{
		public List<IfcSurfaceTexture> Textures{get;set;} 

		/// <summary>
		/// Construct a IfcSurfaceStyleWithTextures with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSurfaceStyleWithTextures(List<IfcSurfaceTexture> textures):base()
		{
			Textures = textures;

		}
		public static new IfcSurfaceStyleWithTextures FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyleWithTextures>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextstylefordefinedfont.htm"/>
	/// </summary>
	public  partial class IfcTextStyleForDefinedFont : IfcPresentationItem
	{
		public IfcColour Colour{get;set;} 
		public IfcColour BackgroundColour{get;set;} // optional

		/// <summary>
		/// Construct a IfcTextStyleForDefinedFont with all required attributes.
		/// </summary>
		public IfcTextStyleForDefinedFont(IfcColour colour):base()
		{
			Colour = colour;

		}
		/// <summary>
		/// Construct a IfcTextStyleForDefinedFont with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTextStyleForDefinedFont(IfcColour colour,IfcColour backgroundColour):base()
		{
			Colour = colour;
			BackgroundColour = backgroundColour;

		}
		public static new IfcTextStyleForDefinedFont FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextStyleForDefinedFont>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextstyletextmodel.htm"/>
	/// </summary>
	public  partial class IfcTextStyleTextModel : IfcPresentationItem
	{
		public IfcSizeSelect TextIndent{get;set;} // optional
		public IfcTextAlignment TextAlign{get;set;} // optional
		public IfcTextDecoration TextDecoration{get;set;} // optional
		public IfcSizeSelect LetterSpacing{get;set;} // optional
		public IfcSizeSelect WordSpacing{get;set;} // optional
		public IfcTextTransformation TextTransform{get;set;} // optional
		public IfcSizeSelect LineHeight{get;set;} // optional

		/// <summary>
		/// Construct a IfcTextStyleTextModel with all required attributes.
		/// </summary>
		public IfcTextStyleTextModel():base()
		{

		}
		/// <summary>
		/// Construct a IfcTextStyleTextModel with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTextStyleTextModel(IfcSizeSelect textIndent,IfcTextAlignment textAlign,IfcTextDecoration textDecoration,IfcSizeSelect letterSpacing,IfcSizeSelect wordSpacing,IfcTextTransformation textTransform,IfcSizeSelect lineHeight):base()
		{
			TextIndent = textIndent;
			TextAlign = textAlign;
			TextDecoration = textDecoration;
			LetterSpacing = letterSpacing;
			WordSpacing = wordSpacing;
			TextTransform = textTransform;
			LineHeight = lineHeight;

		}
		public static new IfcTextStyleTextModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextStyleTextModel>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctexturevertex.htm"/>
	/// </summary>
	public  partial class IfcTextureVertex : IfcPresentationItem
	{
		public List<IfcParameterValue> Coordinates{get;set;} 

		/// <summary>
		/// Construct a IfcTextureVertex with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTextureVertex(List<IfcParameterValue> coordinates):base()
		{
			Coordinates = coordinates;

		}
		public static new IfcTextureVertex FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextureVertex>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctexturevertexlist.htm"/>
	/// </summary>
	public  partial class IfcTextureVertexList : IfcPresentationItem
	{
		public List<List<IfcParameterValue>> TexCoordsList{get;set;} 

		/// <summary>
		/// Construct a IfcTextureVertexList with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTextureVertexList(List<List<IfcParameterValue>> texCoordsList):base()
		{
			TexCoordsList = texCoordsList;

		}
		public static new IfcTextureVertexList FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextureVertexList>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentationlayerassignment.htm"/>
	/// </summary>
	public  partial class IfcPresentationLayerAssignment : BaseIfc
	{
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public List<IfcLayeredItem> AssignedItems{get;set;} 
		public IfcIdentifier Identifier{get;set;} // optional

		/// <summary>
		/// Construct a IfcPresentationLayerAssignment with all required attributes.
		/// </summary>
		public IfcPresentationLayerAssignment(IfcLabel name,List<IfcLayeredItem> assignedItems):base()
		{
			Name = name;
			AssignedItems = assignedItems;

		}
		/// <summary>
		/// Construct a IfcPresentationLayerAssignment with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPresentationLayerAssignment(IfcLabel name,IfcText description,List<IfcLayeredItem> assignedItems,IfcIdentifier identifier):base()
		{
			Name = name;
			Description = description;
			AssignedItems = assignedItems;
			Identifier = identifier;

		}
		public static  IfcPresentationLayerAssignment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentationLayerAssignment>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentationlayerwithstyle.htm"/>
	/// </summary>
	public  partial class IfcPresentationLayerWithStyle : IfcPresentationLayerAssignment
	{
		public bool? LayerOn{get;set;} 
		public bool? LayerFrozen{get;set;} 
		public bool? LayerBlocked{get;set;} 
		public List<IfcPresentationStyle> LayerStyles{get;set;} 

		/// <summary>
		/// Construct a IfcPresentationLayerWithStyle with all required attributes.
		/// </summary>
		public IfcPresentationLayerWithStyle(IfcLabel name,List<IfcLayeredItem> assignedItems,bool? layerOn,bool? layerFrozen,bool? layerBlocked,List<IfcPresentationStyle> layerStyles):base(name,assignedItems)
		{
			LayerOn = layerOn;
			LayerFrozen = layerFrozen;
			LayerBlocked = layerBlocked;
			LayerStyles = layerStyles;

		}
		/// <summary>
		/// Construct a IfcPresentationLayerWithStyle with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPresentationLayerWithStyle(IfcLabel name,IfcText description,List<IfcLayeredItem> assignedItems,IfcIdentifier identifier,bool? layerOn,bool? layerFrozen,bool? layerBlocked,List<IfcPresentationStyle> layerStyles):base(name,description,assignedItems,identifier)
		{
			LayerOn = layerOn;
			LayerFrozen = layerFrozen;
			LayerBlocked = layerBlocked;
			LayerStyles = layerStyles;

		}
		public static new IfcPresentationLayerWithStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentationLayerWithStyle>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestyle.htm"/>
	/// </summary>
	public  partial class IfcSurfaceStyle : IfcPresentationStyle
	{
		public IfcSurfaceSide Side{get;set;} 
		public List<IfcSurfaceStyleElementSelect> Styles{get;set;} 

		/// <summary>
		/// Construct a IfcSurfaceStyle with all required attributes.
		/// </summary>
		public IfcSurfaceStyle(IfcSurfaceSide side,List<IfcSurfaceStyleElementSelect> styles):base()
		{
			Side = side;
			Styles = styles;

		}
		/// <summary>
		/// Construct a IfcSurfaceStyle with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSurfaceStyle(IfcLabel name,IfcSurfaceSide side,List<IfcSurfaceStyleElementSelect> styles):base(name)
		{
			Side = side;
			Styles = styles;

		}
		public static new IfcSurfaceStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyle>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextstyle.htm"/>
	/// </summary>
	public  partial class IfcTextStyle : IfcPresentationStyle
	{
		public IfcTextStyleForDefinedFont TextCharacterAppearance{get;set;} // optional
		public IfcTextStyleTextModel TextStyle{get;set;} // optional
		public IfcTextFontSelect TextFontStyle{get;set;} 
		public bool ModelOrDraughting{get;set;} // optional

		/// <summary>
		/// Construct a IfcTextStyle with all required attributes.
		/// </summary>
		public IfcTextStyle(IfcTextFontSelect textFontStyle):base()
		{
			TextFontStyle = textFontStyle;

		}
		/// <summary>
		/// Construct a IfcTextStyle with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTextStyle(IfcLabel name,IfcTextStyleForDefinedFont textCharacterAppearance,IfcTextStyleTextModel textStyle,IfcTextFontSelect textFontStyle,bool modelOrDraughting):base(name)
		{
			TextCharacterAppearance = textCharacterAppearance;
			TextStyle = textStyle;
			TextFontStyle = textFontStyle;
			ModelOrDraughting = modelOrDraughting;

		}
		public static new IfcTextStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextStyle>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentationstyleassignment.htm"/>
	/// </summary>
	public  partial class IfcPresentationStyleAssignment : BaseIfc
	{
		public List<IfcPresentationStyleSelect> Styles{get;set;} 

		/// <summary>
		/// Construct a IfcPresentationStyleAssignment with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPresentationStyleAssignment(List<IfcPresentationStyleSelect> styles):base()
		{
			Styles = styles;

		}
		public static  IfcPresentationStyleAssignment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentationStyleAssignment>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprocedure.htm"/>
	/// </summary>
	public  partial class IfcProcedure : IfcProcess
	{
		public IfcProcedureTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcProcedure with all required attributes.
		/// </summary>
		public IfcProcedure(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcProcedure with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProcedure(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcText longDescription,IfcProcedureTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,identification,longDescription)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcProcedure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProcedure>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproceduretype.htm"/>
	/// </summary>
	public  partial class IfcProcedureType : IfcTypeProcess
	{
		public IfcProcedureTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcProcedureType with all required attributes.
		/// </summary>
		public IfcProcedureType(IfcGloballyUniqueId globalId,IfcProcedureTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcProcedureType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProcedureType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,IfcIdentifier identification,IfcText longDescription,IfcLabel processType,IfcProcedureTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,identification,longDescription,processType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcProcedureType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProcedureType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctask.htm"/>
	/// </summary>
	public  partial class IfcTask : IfcProcess
	{
		public IfcLabel Status{get;set;} // optional
		public IfcLabel WorkMethod{get;set;} // optional
		public bool IsMilestone{get;set;} 
		public int Priority{get;set;} // optional
		public IfcTaskTime TaskTime{get;set;} // optional
		public IfcTaskTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcTask with all required attributes.
		/// </summary>
		public IfcTask(IfcGloballyUniqueId globalId,bool isMilestone):base(globalId)
		{
			IsMilestone = isMilestone;

		}
		/// <summary>
		/// Construct a IfcTask with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTask(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcText longDescription,IfcLabel status,IfcLabel workMethod,bool isMilestone,int priority,IfcTaskTime taskTime,IfcTaskTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,identification,longDescription)
		{
			Status = status;
			WorkMethod = workMethod;
			IsMilestone = isMilestone;
			Priority = priority;
			TaskTime = taskTime;
			PredefinedType = predefinedType;

		}
		public static new IfcTask FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTask>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproxy.htm"/>
	/// </summary>
	public  partial class IfcProxy : IfcProduct
	{
		public IfcObjectTypeEnum ProxyType{get;set;} 
		public IfcLabel Tag{get;set;} // optional

		/// <summary>
		/// Construct a IfcProxy with all required attributes.
		/// </summary>
		public IfcProxy(IfcGloballyUniqueId globalId,IfcObjectTypeEnum proxyType):base(globalId)
		{
			ProxyType = proxyType;

		}
		/// <summary>
		/// Construct a IfcProxy with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProxy(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcObjectTypeEnum proxyType,IfcLabel tag):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation)
		{
			ProxyType = proxyType;
			Tag = tag;

		}
		public static new IfcProxy FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProxy>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralactivity.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralActivity : IfcProduct
	{
		public IfcStructuralLoad AppliedLoad{get;set;} 
		public IfcGlobalOrLocalEnum GlobalOrLocal{get;set;} 

		/// <summary>
		/// Construct a IfcStructuralActivity with all required attributes.
		/// </summary>
		public IfcStructuralActivity(IfcGloballyUniqueId globalId,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal):base(globalId)
		{
			AppliedLoad = appliedLoad;
			GlobalOrLocal = globalOrLocal;

		}
		/// <summary>
		/// Construct a IfcStructuralActivity with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralActivity(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation)
		{
			AppliedLoad = appliedLoad;
			GlobalOrLocal = globalOrLocal;

		}
		public static new IfcStructuralActivity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralActivity>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralitem.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralItem : IfcProduct
	{
		/// <summary>
		/// Construct a IfcStructuralItem with all required attributes.
		/// </summary>
		public IfcStructuralItem(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralItem with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralItem(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation)
		{

		}
		public static new IfcStructuralItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralItem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproductdefinitionshape.htm"/>
	/// </summary>
	public  partial class IfcProductDefinitionShape : IfcProductRepresentation
	{
		/// <summary>
		/// Construct a IfcProductDefinitionShape with all required attributes.
		/// </summary>
		public IfcProductDefinitionShape(List<IfcRepresentation> representations):base(representations)
		{

		}
		/// <summary>
		/// Construct a IfcProductDefinitionShape with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcProductDefinitionShape(IfcLabel name,IfcText description,List<IfcRepresentation> representations):base(name,description,representations)
		{

		}
		public static new IfcProductDefinitionShape FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProductDefinitionShape>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsimpleproperty.htm"/>
	/// </summary>
	public abstract partial class IfcSimpleProperty : IfcProperty
	{
		/// <summary>
		/// Construct a IfcSimpleProperty with all required attributes.
		/// </summary>
		public IfcSimpleProperty(IfcIdentifier name):base(name)
		{

		}
		/// <summary>
		/// Construct a IfcSimpleProperty with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSimpleProperty(IfcIdentifier name,IfcText description):base(name,description)
		{

		}
		public static new IfcSimpleProperty FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSimpleProperty>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertyenumeration.htm"/>
	/// </summary>
	public  partial class IfcPropertyEnumeration : IfcPropertyAbstraction
	{
		public IfcLabel Name{get;set;} 
		public List<IfcValue> EnumerationValues{get;set;} 
		public IfcUnit Unit{get;set;} // optional

		/// <summary>
		/// Construct a IfcPropertyEnumeration with all required attributes.
		/// </summary>
		public IfcPropertyEnumeration(IfcLabel name,List<IfcValue> enumerationValues):base()
		{
			Name = name;
			EnumerationValues = enumerationValues;

		}
		/// <summary>
		/// Construct a IfcPropertyEnumeration with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertyEnumeration(IfcLabel name,List<IfcValue> enumerationValues,IfcUnit unit):base()
		{
			Name = name;
			EnumerationValues = enumerationValues;
			Unit = unit;

		}
		public static new IfcPropertyEnumeration FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyEnumeration>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertyboundedvalue.htm"/>
	/// </summary>
	public  partial class IfcPropertyBoundedValue : IfcSimpleProperty
	{
		public IfcValue UpperBoundValue{get;set;} // optional
		public IfcValue LowerBoundValue{get;set;} // optional
		public IfcUnit Unit{get;set;} // optional
		public IfcValue SetPointValue{get;set;} // optional

		/// <summary>
		/// Construct a IfcPropertyBoundedValue with all required attributes.
		/// </summary>
		public IfcPropertyBoundedValue(IfcIdentifier name):base(name)
		{

		}
		/// <summary>
		/// Construct a IfcPropertyBoundedValue with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertyBoundedValue(IfcIdentifier name,IfcText description,IfcValue upperBoundValue,IfcValue lowerBoundValue,IfcUnit unit,IfcValue setPointValue):base(name,description)
		{
			UpperBoundValue = upperBoundValue;
			LowerBoundValue = lowerBoundValue;
			Unit = unit;
			SetPointValue = setPointValue;

		}
		public static new IfcPropertyBoundedValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyBoundedValue>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertydefinition.htm"/>
	/// </summary>
	public abstract partial class IfcPropertyDefinition : IfcRoot
	{
		/// <summary>
		/// Construct a IfcPropertyDefinition with all required attributes.
		/// </summary>
		public IfcPropertyDefinition(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcPropertyDefinition with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertyDefinition(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description):base(globalId,ownerHistory,name,description)
		{

		}
		public static new IfcPropertyDefinition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyDefinition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertytemplatedefinition.htm"/>
	/// </summary>
	public abstract partial class IfcPropertyTemplateDefinition : IfcPropertyDefinition
	{
		/// <summary>
		/// Construct a IfcPropertyTemplateDefinition with all required attributes.
		/// </summary>
		public IfcPropertyTemplateDefinition(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcPropertyTemplateDefinition with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertyTemplateDefinition(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description):base(globalId,ownerHistory,name,description)
		{

		}
		public static new IfcPropertyTemplateDefinition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyTemplateDefinition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertydependencyrelationship.htm"/>
	/// </summary>
	public  partial class IfcPropertyDependencyRelationship : IfcResourceLevelRelationship
	{
		public IfcProperty DependingProperty{get;set;} 
		public IfcProperty DependantProperty{get;set;} 
		public IfcText Expression{get;set;} // optional

		/// <summary>
		/// Construct a IfcPropertyDependencyRelationship with all required attributes.
		/// </summary>
		public IfcPropertyDependencyRelationship(IfcProperty dependingProperty,IfcProperty dependantProperty):base()
		{
			DependingProperty = dependingProperty;
			DependantProperty = dependantProperty;

		}
		/// <summary>
		/// Construct a IfcPropertyDependencyRelationship with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertyDependencyRelationship(IfcLabel name,IfcText description,IfcProperty dependingProperty,IfcProperty dependantProperty,IfcText expression):base(name,description)
		{
			DependingProperty = dependingProperty;
			DependantProperty = dependantProperty;
			Expression = expression;

		}
		public static new IfcPropertyDependencyRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyDependencyRelationship>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertyenumeratedvalue.htm"/>
	/// </summary>
	public  partial class IfcPropertyEnumeratedValue : IfcSimpleProperty
	{
		public List<IfcValue> EnumerationValues{get;set;} // optional
		public IfcPropertyEnumeration EnumerationReference{get;set;} // optional

		/// <summary>
		/// Construct a IfcPropertyEnumeratedValue with all required attributes.
		/// </summary>
		public IfcPropertyEnumeratedValue(IfcIdentifier name):base(name)
		{

		}
		/// <summary>
		/// Construct a IfcPropertyEnumeratedValue with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertyEnumeratedValue(IfcIdentifier name,IfcText description,List<IfcValue> enumerationValues,IfcPropertyEnumeration enumerationReference):base(name,description)
		{
			EnumerationValues = new List<IfcValue>();
			EnumerationReference = enumerationReference;

		}
		public static new IfcPropertyEnumeratedValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyEnumeratedValue>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertylistvalue.htm"/>
	/// </summary>
	public  partial class IfcPropertyListValue : IfcSimpleProperty
	{
		public List<IfcValue> ListValues{get;set;} // optional
		public IfcUnit Unit{get;set;} // optional

		/// <summary>
		/// Construct a IfcPropertyListValue with all required attributes.
		/// </summary>
		public IfcPropertyListValue(IfcIdentifier name):base(name)
		{

		}
		/// <summary>
		/// Construct a IfcPropertyListValue with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertyListValue(IfcIdentifier name,IfcText description,List<IfcValue> listValues,IfcUnit unit):base(name,description)
		{
			ListValues = new List<IfcValue>();
			Unit = unit;

		}
		public static new IfcPropertyListValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyListValue>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertyreferencevalue.htm"/>
	/// </summary>
	public  partial class IfcPropertyReferenceValue : IfcSimpleProperty
	{
		public IfcText UsageName{get;set;} // optional
		public IfcObjectReferenceSelect PropertyReference{get;set;} // optional

		/// <summary>
		/// Construct a IfcPropertyReferenceValue with all required attributes.
		/// </summary>
		public IfcPropertyReferenceValue(IfcIdentifier name):base(name)
		{

		}
		/// <summary>
		/// Construct a IfcPropertyReferenceValue with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertyReferenceValue(IfcIdentifier name,IfcText description,IfcText usageName,IfcObjectReferenceSelect propertyReference):base(name,description)
		{
			UsageName = usageName;
			PropertyReference = propertyReference;

		}
		public static new IfcPropertyReferenceValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyReferenceValue>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertyset.htm"/>
	/// </summary>
	public  partial class IfcPropertySet : IfcPropertySetDefinition
	{
		public List<IfcProperty> HasProperties{get;set;} 

		/// <summary>
		/// Construct a IfcPropertySet with all required attributes.
		/// </summary>
		public IfcPropertySet(IfcGloballyUniqueId globalId,List<IfcProperty> hasProperties):base(globalId)
		{
			HasProperties = hasProperties;

		}
		/// <summary>
		/// Construct a IfcPropertySet with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertySet(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcProperty> hasProperties):base(globalId,ownerHistory,name,description)
		{
			HasProperties = hasProperties;

		}
		public static new IfcPropertySet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertySet>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertysettemplate.htm"/>
	/// </summary>
	public  partial class IfcPropertySetTemplate : IfcPropertyTemplateDefinition
	{
		public IfcPropertySetTemplateTypeEnum TemplateType{get;set;} // optional
		public IfcIdentifier ApplicableEntity{get;set;} // optional
		public List<IfcPropertyTemplate> HasPropertyTemplates{get;set;} 

		/// <summary>
		/// Construct a IfcPropertySetTemplate with all required attributes.
		/// </summary>
		public IfcPropertySetTemplate(IfcGloballyUniqueId globalId,List<IfcPropertyTemplate> hasPropertyTemplates):base(globalId)
		{
			HasPropertyTemplates = hasPropertyTemplates;

		}
		/// <summary>
		/// Construct a IfcPropertySetTemplate with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertySetTemplate(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcPropertySetTemplateTypeEnum templateType,IfcIdentifier applicableEntity,List<IfcPropertyTemplate> hasPropertyTemplates):base(globalId,ownerHistory,name,description)
		{
			TemplateType = templateType;
			ApplicableEntity = applicableEntity;
			HasPropertyTemplates = hasPropertyTemplates;

		}
		public static new IfcPropertySetTemplate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertySetTemplate>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertysinglevalue.htm"/>
	/// </summary>
	public  partial class IfcPropertySingleValue : IfcSimpleProperty
	{
		public IfcValue NominalValue{get;set;} // optional
		public IfcUnit Unit{get;set;} // optional

		/// <summary>
		/// Construct a IfcPropertySingleValue with all required attributes.
		/// </summary>
		public IfcPropertySingleValue(IfcIdentifier name):base(name)
		{

		}
		/// <summary>
		/// Construct a IfcPropertySingleValue with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertySingleValue(IfcIdentifier name,IfcText description,IfcValue nominalValue,IfcUnit unit):base(name,description)
		{
			NominalValue = nominalValue;
			Unit = unit;

		}
		public static new IfcPropertySingleValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertySingleValue>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertytablevalue.htm"/>
	/// </summary>
	public  partial class IfcPropertyTableValue : IfcSimpleProperty
	{
		public List<IfcValue> DefiningValues{get;set;} // optional
		public List<IfcValue> DefinedValues{get;set;} // optional
		public IfcText Expression{get;set;} // optional
		public IfcUnit DefiningUnit{get;set;} // optional
		public IfcUnit DefinedUnit{get;set;} // optional
		public IfcCurveInterpolationEnum CurveInterpolation{get;set;} // optional

		/// <summary>
		/// Construct a IfcPropertyTableValue with all required attributes.
		/// </summary>
		public IfcPropertyTableValue(IfcIdentifier name):base(name)
		{

		}
		/// <summary>
		/// Construct a IfcPropertyTableValue with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcPropertyTableValue(IfcIdentifier name,IfcText description,List<IfcValue> definingValues,List<IfcValue> definedValues,IfcText expression,IfcUnit definingUnit,IfcUnit definedUnit,IfcCurveInterpolationEnum curveInterpolation):base(name,description)
		{
			DefiningValues = new List<IfcValue>();
			DefinedValues = new List<IfcValue>();
			Expression = expression;
			DefiningUnit = definingUnit;
			DefinedUnit = definedUnit;
			CurveInterpolation = curveInterpolation;

		}
		public static new IfcPropertyTableValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyTableValue>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsimplepropertytemplate.htm"/>
	/// </summary>
	public  partial class IfcSimplePropertyTemplate : IfcPropertyTemplate
	{
		public IfcSimplePropertyTemplateTypeEnum TemplateType{get;set;} // optional
		public IfcLabel PrimaryMeasureType{get;set;} // optional
		public IfcLabel SecondaryMeasureType{get;set;} // optional
		public IfcPropertyEnumeration Enumerators{get;set;} // optional
		public IfcUnit PrimaryUnit{get;set;} // optional
		public IfcUnit SecondaryUnit{get;set;} // optional
		public IfcLabel Expression{get;set;} // optional
		public IfcStateEnum AccessState{get;set;} // optional

		/// <summary>
		/// Construct a IfcSimplePropertyTemplate with all required attributes.
		/// </summary>
		public IfcSimplePropertyTemplate(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSimplePropertyTemplate with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSimplePropertyTemplate(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcSimplePropertyTemplateTypeEnum templateType,IfcLabel primaryMeasureType,IfcLabel secondaryMeasureType,IfcPropertyEnumeration enumerators,IfcUnit primaryUnit,IfcUnit secondaryUnit,IfcLabel expression,IfcStateEnum accessState):base(globalId,ownerHistory,name,description)
		{
			TemplateType = templateType;
			PrimaryMeasureType = primaryMeasureType;
			SecondaryMeasureType = secondaryMeasureType;
			Enumerators = enumerators;
			PrimaryUnit = primaryUnit;
			SecondaryUnit = secondaryUnit;
			Expression = expression;
			AccessState = accessState;

		}
		public static new IfcSimplePropertyTemplate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSimplePropertyTemplate>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrectanglehollowprofiledef.htm"/>
	/// </summary>
	public  partial class IfcRectangleHollowProfileDef : IfcRectangleProfileDef
	{
		public IfcPositiveLengthMeasure WallThickness{get;set;} 
		public IfcNonNegativeLengthMeasure InnerFilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure OuterFilletRadius{get;set;} // optional

		/// <summary>
		/// Construct a IfcRectangleHollowProfileDef with all required attributes.
		/// </summary>
		public IfcRectangleHollowProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure xDim,IfcPositiveLengthMeasure yDim,IfcPositiveLengthMeasure wallThickness):base(profileType,xDim,yDim)
		{
			WallThickness = wallThickness;

		}
		/// <summary>
		/// Construct a IfcRectangleHollowProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRectangleHollowProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure xDim,IfcPositiveLengthMeasure yDim,IfcPositiveLengthMeasure wallThickness,IfcNonNegativeLengthMeasure innerFilletRadius,IfcNonNegativeLengthMeasure outerFilletRadius):base(profileType,profileName,position,xDim,yDim)
		{
			WallThickness = wallThickness;
			InnerFilletRadius = innerFilletRadius;
			OuterFilletRadius = outerFilletRadius;

		}
		public static new IfcRectangleHollowProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRectangleHollowProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcroundedrectangleprofiledef.htm"/>
	/// </summary>
	public  partial class IfcRoundedRectangleProfileDef : IfcRectangleProfileDef
	{
		public IfcPositiveLengthMeasure RoundingRadius{get;set;} 

		/// <summary>
		/// Construct a IfcRoundedRectangleProfileDef with all required attributes.
		/// </summary>
		public IfcRoundedRectangleProfileDef(IfcProfileTypeEnum profileType,IfcPositiveLengthMeasure xDim,IfcPositiveLengthMeasure yDim,IfcPositiveLengthMeasure roundingRadius):base(profileType,xDim,yDim)
		{
			RoundingRadius = roundingRadius;

		}
		/// <summary>
		/// Construct a IfcRoundedRectangleProfileDef with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRoundedRectangleProfileDef(IfcProfileTypeEnum profileType,IfcLabel profileName,IfcAxis2Placement2D position,IfcPositiveLengthMeasure xDim,IfcPositiveLengthMeasure yDim,IfcPositiveLengthMeasure roundingRadius):base(profileType,profileName,position,xDim,yDim)
		{
			RoundingRadius = roundingRadius;

		}
		public static new IfcRoundedRectangleProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRoundedRectangleProfileDef>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrecurrencepattern.htm"/>
	/// </summary>
	public  partial class IfcRecurrencePattern : BaseIfc
	{
		public IfcRecurrenceTypeEnum RecurrenceType{get;set;} 
		public List<IfcDayInMonthNumber> DayComponent{get;set;} // optional
		public List<IfcDayInWeekNumber> WeekdayComponent{get;set;} // optional
		public List<IfcMonthInYearNumber> MonthComponent{get;set;} // optional
		public IfcInteger Position{get;set;} // optional
		public IfcInteger Interval{get;set;} // optional
		public IfcInteger Occurrences{get;set;} // optional
		public List<IfcTimePeriod> TimePeriods{get;set;} // optional

		/// <summary>
		/// Construct a IfcRecurrencePattern with all required attributes.
		/// </summary>
		public IfcRecurrencePattern(IfcRecurrenceTypeEnum recurrenceType):base()
		{
			RecurrenceType = recurrenceType;

		}
		/// <summary>
		/// Construct a IfcRecurrencePattern with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRecurrencePattern(IfcRecurrenceTypeEnum recurrenceType,List<IfcDayInMonthNumber> dayComponent,List<IfcDayInWeekNumber> weekdayComponent,List<IfcMonthInYearNumber> monthComponent,IfcInteger position,IfcInteger interval,IfcInteger occurrences,List<IfcTimePeriod> timePeriods):base()
		{
			RecurrenceType = recurrenceType;
			DayComponent = new List<IfcDayInMonthNumber>();
			WeekdayComponent = new List<IfcDayInWeekNumber>();
			MonthComponent = new List<IfcMonthInYearNumber>();
			Position = position;
			Interval = interval;
			Occurrences = occurrences;
			TimePeriods = new List<IfcTimePeriod>();

		}
		public static  IfcRecurrencePattern FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRecurrencePattern>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreference.htm"/>
	/// </summary>
	public  partial class IfcReference : BaseIfc
	{
		public IfcIdentifier TypeIdentifier{get;set;} // optional
		public IfcIdentifier AttributeIdentifier{get;set;} // optional
		public IfcLabel InstanceName{get;set;} // optional
		public List<int> ListPositions{get;set;} // optional
		public IfcReference InnerReference{get;set;} // optional

		/// <summary>
		/// Construct a IfcReference with all required attributes.
		/// </summary>
		public IfcReference():base()
		{

		}
		/// <summary>
		/// Construct a IfcReference with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcReference(IfcIdentifier typeIdentifier,IfcIdentifier attributeIdentifier,IfcLabel instanceName,List<int> listPositions,IfcReference innerReference):base()
		{
			TypeIdentifier = typeIdentifier;
			AttributeIdentifier = attributeIdentifier;
			InstanceName = instanceName;
			ListPositions = new List<int>();
			InnerReference = innerReference;

		}
		public static  IfcReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReference>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcregulartimeseries.htm"/>
	/// </summary>
	public  partial class IfcRegularTimeSeries : IfcTimeSeries
	{
		public IfcTimeMeasure TimeStep{get;set;} 
		public List<IfcTimeSeriesValue> Values{get;set;} 

		/// <summary>
		/// Construct a IfcRegularTimeSeries with all required attributes.
		/// </summary>
		public IfcRegularTimeSeries(IfcLabel name,IfcDateTime startTime,IfcDateTime endTime,IfcTimeSeriesDataTypeEnum timeSeriesDataType,IfcDataOriginEnum dataOrigin,IfcTimeMeasure timeStep,List<IfcTimeSeriesValue> values):base(name,startTime,endTime,timeSeriesDataType,dataOrigin)
		{
			TimeStep = timeStep;
			Values = values;

		}
		/// <summary>
		/// Construct a IfcRegularTimeSeries with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRegularTimeSeries(IfcLabel name,IfcText description,IfcDateTime startTime,IfcDateTime endTime,IfcTimeSeriesDataTypeEnum timeSeriesDataType,IfcDataOriginEnum dataOrigin,IfcLabel userDefinedDataOrigin,IfcUnit unit,IfcTimeMeasure timeStep,List<IfcTimeSeriesValue> values):base(name,description,startTime,endTime,timeSeriesDataType,dataOrigin,userDefinedDataOrigin,unit)
		{
			TimeStep = timeStep;
			Values = values;

		}
		public static new IfcRegularTimeSeries FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRegularTimeSeries>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingbar.htm"/>
	/// </summary>
	public  partial class IfcReinforcingBar : IfcReinforcingElement
	{
		public IfcPositiveLengthMeasure NominalDiameter{get;set;} // optional
		public IfcAreaMeasure CrossSectionArea{get;set;} // optional
		public IfcPositiveLengthMeasure BarLength{get;set;} // optional
		public IfcReinforcingBarTypeEnum PredefinedType{get;set;} // optional
		public IfcReinforcingBarSurfaceEnum BarSurface{get;set;} // optional

		/// <summary>
		/// Construct a IfcReinforcingBar with all required attributes.
		/// </summary>
		public IfcReinforcingBar(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcReinforcingBar with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcReinforcingBar(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcLabel steelGrade,IfcPositiveLengthMeasure nominalDiameter,IfcAreaMeasure crossSectionArea,IfcPositiveLengthMeasure barLength,IfcReinforcingBarTypeEnum predefinedType,IfcReinforcingBarSurfaceEnum barSurface):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,steelGrade)
		{
			NominalDiameter = nominalDiameter;
			CrossSectionArea = crossSectionArea;
			BarLength = barLength;
			PredefinedType = predefinedType;
			BarSurface = barSurface;

		}
		public static new IfcReinforcingBar FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcingBar>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingbartype.htm"/>
	/// </summary>
	public  partial class IfcReinforcingBarType : IfcReinforcingElementType
	{
		public IfcReinforcingBarTypeEnum PredefinedType{get;set;} 
		public IfcPositiveLengthMeasure NominalDiameter{get;set;} // optional
		public IfcAreaMeasure CrossSectionArea{get;set;} // optional
		public IfcPositiveLengthMeasure BarLength{get;set;} // optional
		public IfcReinforcingBarSurfaceEnum BarSurface{get;set;} // optional
		public IfcLabel BendingShapeCode{get;set;} // optional
		public List<IfcBendingParameterSelect> BendingParameters{get;set;} // optional

		/// <summary>
		/// Construct a IfcReinforcingBarType with all required attributes.
		/// </summary>
		public IfcReinforcingBarType(IfcGloballyUniqueId globalId,IfcReinforcingBarTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcReinforcingBarType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcReinforcingBarType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcReinforcingBarTypeEnum predefinedType,IfcPositiveLengthMeasure nominalDiameter,IfcAreaMeasure crossSectionArea,IfcPositiveLengthMeasure barLength,IfcReinforcingBarSurfaceEnum barSurface,IfcLabel bendingShapeCode,List<IfcBendingParameterSelect> bendingParameters):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;
			NominalDiameter = nominalDiameter;
			CrossSectionArea = crossSectionArea;
			BarLength = barLength;
			BarSurface = barSurface;
			BendingShapeCode = bendingShapeCode;
			BendingParameters = new List<IfcBendingParameterSelect>();

		}
		public static new IfcReinforcingBarType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcingBarType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingmesh.htm"/>
	/// </summary>
	public  partial class IfcReinforcingMesh : IfcReinforcingElement
	{
		public IfcPositiveLengthMeasure MeshLength{get;set;} // optional
		public IfcPositiveLengthMeasure MeshWidth{get;set;} // optional
		public IfcPositiveLengthMeasure LongitudinalBarNominalDiameter{get;set;} // optional
		public IfcPositiveLengthMeasure TransverseBarNominalDiameter{get;set;} // optional
		public IfcAreaMeasure LongitudinalBarCrossSectionArea{get;set;} // optional
		public IfcAreaMeasure TransverseBarCrossSectionArea{get;set;} // optional
		public IfcPositiveLengthMeasure LongitudinalBarSpacing{get;set;} // optional
		public IfcPositiveLengthMeasure TransverseBarSpacing{get;set;} // optional
		public IfcReinforcingMeshTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcReinforcingMesh with all required attributes.
		/// </summary>
		public IfcReinforcingMesh(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcReinforcingMesh with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcReinforcingMesh(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcLabel steelGrade,IfcPositiveLengthMeasure meshLength,IfcPositiveLengthMeasure meshWidth,IfcPositiveLengthMeasure longitudinalBarNominalDiameter,IfcPositiveLengthMeasure transverseBarNominalDiameter,IfcAreaMeasure longitudinalBarCrossSectionArea,IfcAreaMeasure transverseBarCrossSectionArea,IfcPositiveLengthMeasure longitudinalBarSpacing,IfcPositiveLengthMeasure transverseBarSpacing,IfcReinforcingMeshTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,steelGrade)
		{
			MeshLength = meshLength;
			MeshWidth = meshWidth;
			LongitudinalBarNominalDiameter = longitudinalBarNominalDiameter;
			TransverseBarNominalDiameter = transverseBarNominalDiameter;
			LongitudinalBarCrossSectionArea = longitudinalBarCrossSectionArea;
			TransverseBarCrossSectionArea = transverseBarCrossSectionArea;
			LongitudinalBarSpacing = longitudinalBarSpacing;
			TransverseBarSpacing = transverseBarSpacing;
			PredefinedType = predefinedType;

		}
		public static new IfcReinforcingMesh FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcingMesh>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctendon.htm"/>
	/// </summary>
	public  partial class IfcTendon : IfcReinforcingElement
	{
		public IfcTendonTypeEnum PredefinedType{get;set;} // optional
		public IfcPositiveLengthMeasure NominalDiameter{get;set;} // optional
		public IfcAreaMeasure CrossSectionArea{get;set;} // optional
		public IfcForceMeasure TensionForce{get;set;} // optional
		public IfcPressureMeasure PreStress{get;set;} // optional
		public IfcNormalisedRatioMeasure FrictionCoefficient{get;set;} // optional
		public IfcPositiveLengthMeasure AnchorageSlip{get;set;} // optional
		public IfcPositiveLengthMeasure MinCurvatureRadius{get;set;} // optional

		/// <summary>
		/// Construct a IfcTendon with all required attributes.
		/// </summary>
		public IfcTendon(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcTendon with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTendon(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcLabel steelGrade,IfcTendonTypeEnum predefinedType,IfcPositiveLengthMeasure nominalDiameter,IfcAreaMeasure crossSectionArea,IfcForceMeasure tensionForce,IfcPressureMeasure preStress,IfcNormalisedRatioMeasure frictionCoefficient,IfcPositiveLengthMeasure anchorageSlip,IfcPositiveLengthMeasure minCurvatureRadius):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,steelGrade)
		{
			PredefinedType = predefinedType;
			NominalDiameter = nominalDiameter;
			CrossSectionArea = crossSectionArea;
			TensionForce = tensionForce;
			PreStress = preStress;
			FrictionCoefficient = frictionCoefficient;
			AnchorageSlip = anchorageSlip;
			MinCurvatureRadius = minCurvatureRadius;

		}
		public static new IfcTendon FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTendon>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctendonanchor.htm"/>
	/// </summary>
	public  partial class IfcTendonAnchor : IfcReinforcingElement
	{
		public IfcTendonAnchorTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcTendonAnchor with all required attributes.
		/// </summary>
		public IfcTendonAnchor(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcTendonAnchor with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTendonAnchor(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcLabel steelGrade,IfcTendonAnchorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,steelGrade)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcTendonAnchor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTendonAnchor>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingmeshtype.htm"/>
	/// </summary>
	public  partial class IfcReinforcingMeshType : IfcReinforcingElementType
	{
		public IfcReinforcingMeshTypeEnum PredefinedType{get;set;} 
		public IfcPositiveLengthMeasure MeshLength{get;set;} // optional
		public IfcPositiveLengthMeasure MeshWidth{get;set;} // optional
		public IfcPositiveLengthMeasure LongitudinalBarNominalDiameter{get;set;} // optional
		public IfcPositiveLengthMeasure TransverseBarNominalDiameter{get;set;} // optional
		public IfcAreaMeasure LongitudinalBarCrossSectionArea{get;set;} // optional
		public IfcAreaMeasure TransverseBarCrossSectionArea{get;set;} // optional
		public IfcPositiveLengthMeasure LongitudinalBarSpacing{get;set;} // optional
		public IfcPositiveLengthMeasure TransverseBarSpacing{get;set;} // optional
		public IfcLabel BendingShapeCode{get;set;} // optional
		public List<IfcBendingParameterSelect> BendingParameters{get;set;} // optional

		/// <summary>
		/// Construct a IfcReinforcingMeshType with all required attributes.
		/// </summary>
		public IfcReinforcingMeshType(IfcGloballyUniqueId globalId,IfcReinforcingMeshTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcReinforcingMeshType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcReinforcingMeshType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcReinforcingMeshTypeEnum predefinedType,IfcPositiveLengthMeasure meshLength,IfcPositiveLengthMeasure meshWidth,IfcPositiveLengthMeasure longitudinalBarNominalDiameter,IfcPositiveLengthMeasure transverseBarNominalDiameter,IfcAreaMeasure longitudinalBarCrossSectionArea,IfcAreaMeasure transverseBarCrossSectionArea,IfcPositiveLengthMeasure longitudinalBarSpacing,IfcPositiveLengthMeasure transverseBarSpacing,IfcLabel bendingShapeCode,List<IfcBendingParameterSelect> bendingParameters):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;
			MeshLength = meshLength;
			MeshWidth = meshWidth;
			LongitudinalBarNominalDiameter = longitudinalBarNominalDiameter;
			TransverseBarNominalDiameter = transverseBarNominalDiameter;
			LongitudinalBarCrossSectionArea = longitudinalBarCrossSectionArea;
			TransverseBarCrossSectionArea = transverseBarCrossSectionArea;
			LongitudinalBarSpacing = longitudinalBarSpacing;
			TransverseBarSpacing = transverseBarSpacing;
			BendingShapeCode = bendingShapeCode;
			BendingParameters = new List<IfcBendingParameterSelect>();

		}
		public static new IfcReinforcingMeshType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcingMeshType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctendonanchortype.htm"/>
	/// </summary>
	public  partial class IfcTendonAnchorType : IfcReinforcingElementType
	{
		public IfcTendonAnchorTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcTendonAnchorType with all required attributes.
		/// </summary>
		public IfcTendonAnchorType(IfcGloballyUniqueId globalId,IfcTendonAnchorTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcTendonAnchorType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTendonAnchorType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcTendonAnchorTypeEnum predefinedType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcTendonAnchorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTendonAnchorType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctendontype.htm"/>
	/// </summary>
	public  partial class IfcTendonType : IfcReinforcingElementType
	{
		public IfcTendonTypeEnum PredefinedType{get;set;} 
		public IfcPositiveLengthMeasure NominalDiameter{get;set;} // optional
		public IfcAreaMeasure CrossSectionArea{get;set;} // optional
		public IfcPositiveLengthMeasure SheethDiameter{get;set;} // optional

		/// <summary>
		/// Construct a IfcTendonType with all required attributes.
		/// </summary>
		public IfcTendonType(IfcGloballyUniqueId globalId,IfcTendonTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcTendonType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTendonType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcTendonTypeEnum predefinedType,IfcPositiveLengthMeasure nominalDiameter,IfcAreaMeasure crossSectionArea,IfcPositiveLengthMeasure sheethDiameter):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;
			NominalDiameter = nominalDiameter;
			CrossSectionArea = crossSectionArea;
			SheethDiameter = sheethDiameter;

		}
		public static new IfcTendonType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTendonType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelaggregates.htm"/>
	/// </summary>
	public  partial class IfcRelAggregates : IfcRelDecomposes
	{
		public IfcObjectDefinition RelatingObject{get;set;} 
		public List<IfcObjectDefinition> RelatedObjects{get;set;} 

		/// <summary>
		/// Construct a IfcRelAggregates with all required attributes.
		/// </summary>
		public IfcRelAggregates(IfcGloballyUniqueId globalId,IfcObjectDefinition relatingObject,List<IfcObjectDefinition> relatedObjects):base(globalId)
		{
			RelatingObject = relatingObject;
			RelatedObjects = relatedObjects;

		}
		/// <summary>
		/// Construct a IfcRelAggregates with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAggregates(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcObjectDefinition relatingObject,List<IfcObjectDefinition> relatedObjects):base(globalId,ownerHistory,name,description)
		{
			RelatingObject = relatingObject;
			RelatedObjects = relatedObjects;

		}
		public static new IfcRelAggregates FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAggregates>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldecomposes.htm"/>
	/// </summary>
	public abstract partial class IfcRelDecomposes : IfcRelationship
	{
		/// <summary>
		/// Construct a IfcRelDecomposes with all required attributes.
		/// </summary>
		public IfcRelDecomposes(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcRelDecomposes with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelDecomposes(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description):base(globalId,ownerHistory,name,description)
		{

		}
		public static new IfcRelDecomposes FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDecomposes>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassigns.htm"/>
	/// </summary>
	public abstract partial class IfcRelAssigns : IfcRelationship
	{
		public List<IfcObjectDefinition> RelatedObjects{get;set;} 
		public IfcObjectTypeEnum RelatedObjectsType{get;set;} // optional

		/// <summary>
		/// Construct a IfcRelAssigns with all required attributes.
		/// </summary>
		public IfcRelAssigns(IfcGloballyUniqueId globalId,List<IfcObjectDefinition> relatedObjects):base(globalId)
		{
			RelatedObjects = relatedObjects;

		}
		/// <summary>
		/// Construct a IfcRelAssigns with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssigns(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcObjectDefinition> relatedObjects,IfcObjectTypeEnum relatedObjectsType):base(globalId,ownerHistory,name,description)
		{
			RelatedObjects = relatedObjects;
			RelatedObjectsType = relatedObjectsType;

		}
		public static new IfcRelAssigns FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssigns>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstoactor.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToActor : IfcRelAssigns
	{
		public IfcActor RelatingActor{get;set;} 
		public IfcActorRole ActingRole{get;set;} // optional

		/// <summary>
		/// Construct a IfcRelAssignsToActor with all required attributes.
		/// </summary>
		public IfcRelAssignsToActor(IfcGloballyUniqueId globalId,List<IfcObjectDefinition> relatedObjects,IfcActor relatingActor):base(globalId,relatedObjects)
		{
			RelatingActor = relatingActor;

		}
		/// <summary>
		/// Construct a IfcRelAssignsToActor with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssignsToActor(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcObjectDefinition> relatedObjects,IfcObjectTypeEnum relatedObjectsType,IfcActor relatingActor,IfcActorRole actingRole):base(globalId,ownerHistory,name,description,relatedObjects,relatedObjectsType)
		{
			RelatingActor = relatingActor;
			ActingRole = actingRole;

		}
		public static new IfcRelAssignsToActor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToActor>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstocontrol.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToControl : IfcRelAssigns
	{
		public IfcControl RelatingControl{get;set;} 

		/// <summary>
		/// Construct a IfcRelAssignsToControl with all required attributes.
		/// </summary>
		public IfcRelAssignsToControl(IfcGloballyUniqueId globalId,List<IfcObjectDefinition> relatedObjects,IfcControl relatingControl):base(globalId,relatedObjects)
		{
			RelatingControl = relatingControl;

		}
		/// <summary>
		/// Construct a IfcRelAssignsToControl with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssignsToControl(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcObjectDefinition> relatedObjects,IfcObjectTypeEnum relatedObjectsType,IfcControl relatingControl):base(globalId,ownerHistory,name,description,relatedObjects,relatedObjectsType)
		{
			RelatingControl = relatingControl;

		}
		public static new IfcRelAssignsToControl FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToControl>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstogroup.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToGroup : IfcRelAssigns
	{
		public IfcGroup RelatingGroup{get;set;} 

		/// <summary>
		/// Construct a IfcRelAssignsToGroup with all required attributes.
		/// </summary>
		public IfcRelAssignsToGroup(IfcGloballyUniqueId globalId,List<IfcObjectDefinition> relatedObjects,IfcGroup relatingGroup):base(globalId,relatedObjects)
		{
			RelatingGroup = relatingGroup;

		}
		/// <summary>
		/// Construct a IfcRelAssignsToGroup with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssignsToGroup(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcObjectDefinition> relatedObjects,IfcObjectTypeEnum relatedObjectsType,IfcGroup relatingGroup):base(globalId,ownerHistory,name,description,relatedObjects,relatedObjectsType)
		{
			RelatingGroup = relatingGroup;

		}
		public static new IfcRelAssignsToGroup FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToGroup>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstoprocess.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToProcess : IfcRelAssigns
	{
		public IfcProcessSelect RelatingProcess{get;set;} 
		public IfcMeasureWithUnit QuantityInProcess{get;set;} // optional

		/// <summary>
		/// Construct a IfcRelAssignsToProcess with all required attributes.
		/// </summary>
		public IfcRelAssignsToProcess(IfcGloballyUniqueId globalId,List<IfcObjectDefinition> relatedObjects,IfcProcessSelect relatingProcess):base(globalId,relatedObjects)
		{
			RelatingProcess = relatingProcess;

		}
		/// <summary>
		/// Construct a IfcRelAssignsToProcess with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssignsToProcess(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcObjectDefinition> relatedObjects,IfcObjectTypeEnum relatedObjectsType,IfcProcessSelect relatingProcess,IfcMeasureWithUnit quantityInProcess):base(globalId,ownerHistory,name,description,relatedObjects,relatedObjectsType)
		{
			RelatingProcess = relatingProcess;
			QuantityInProcess = quantityInProcess;

		}
		public static new IfcRelAssignsToProcess FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToProcess>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstoproduct.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToProduct : IfcRelAssigns
	{
		public IfcProductSelect RelatingProduct{get;set;} 

		/// <summary>
		/// Construct a IfcRelAssignsToProduct with all required attributes.
		/// </summary>
		public IfcRelAssignsToProduct(IfcGloballyUniqueId globalId,List<IfcObjectDefinition> relatedObjects,IfcProductSelect relatingProduct):base(globalId,relatedObjects)
		{
			RelatingProduct = relatingProduct;

		}
		/// <summary>
		/// Construct a IfcRelAssignsToProduct with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssignsToProduct(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcObjectDefinition> relatedObjects,IfcObjectTypeEnum relatedObjectsType,IfcProductSelect relatingProduct):base(globalId,ownerHistory,name,description,relatedObjects,relatedObjectsType)
		{
			RelatingProduct = relatingProduct;

		}
		public static new IfcRelAssignsToProduct FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToProduct>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstoresource.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToResource : IfcRelAssigns
	{
		public IfcResourceSelect RelatingResource{get;set;} 

		/// <summary>
		/// Construct a IfcRelAssignsToResource with all required attributes.
		/// </summary>
		public IfcRelAssignsToResource(IfcGloballyUniqueId globalId,List<IfcObjectDefinition> relatedObjects,IfcResourceSelect relatingResource):base(globalId,relatedObjects)
		{
			RelatingResource = relatingResource;

		}
		/// <summary>
		/// Construct a IfcRelAssignsToResource with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssignsToResource(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcObjectDefinition> relatedObjects,IfcObjectTypeEnum relatedObjectsType,IfcResourceSelect relatingResource):base(globalId,ownerHistory,name,description,relatedObjects,relatedObjectsType)
		{
			RelatingResource = relatingResource;

		}
		public static new IfcRelAssignsToResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToResource>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelationship.htm"/>
	/// </summary>
	public abstract partial class IfcRelationship : IfcRoot
	{
		/// <summary>
		/// Construct a IfcRelationship with all required attributes.
		/// </summary>
		public IfcRelationship(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcRelationship with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelationship(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description):base(globalId,ownerHistory,name,description)
		{

		}
		public static new IfcRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelationship>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstogroupbyfactor.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToGroupByFactor : IfcRelAssignsToGroup
	{
		public IfcRatioMeasure Factor{get;set;} 

		/// <summary>
		/// Construct a IfcRelAssignsToGroupByFactor with all required attributes.
		/// </summary>
		public IfcRelAssignsToGroupByFactor(IfcGloballyUniqueId globalId,List<IfcObjectDefinition> relatedObjects,IfcGroup relatingGroup,IfcRatioMeasure factor):base(globalId,relatedObjects,relatingGroup)
		{
			Factor = factor;

		}
		/// <summary>
		/// Construct a IfcRelAssignsToGroupByFactor with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssignsToGroupByFactor(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcObjectDefinition> relatedObjects,IfcObjectTypeEnum relatedObjectsType,IfcGroup relatingGroup,IfcRatioMeasure factor):base(globalId,ownerHistory,name,description,relatedObjects,relatedObjectsType,relatingGroup)
		{
			Factor = factor;

		}
		public static new IfcRelAssignsToGroupByFactor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToGroupByFactor>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociates.htm"/>
	/// </summary>
	public abstract partial class IfcRelAssociates : IfcRelationship
	{
		public List<IfcDefinitionSelect> RelatedObjects{get;set;} 

		/// <summary>
		/// Construct a IfcRelAssociates with all required attributes.
		/// </summary>
		public IfcRelAssociates(IfcGloballyUniqueId globalId,List<IfcDefinitionSelect> relatedObjects):base(globalId)
		{
			RelatedObjects = relatedObjects;

		}
		/// <summary>
		/// Construct a IfcRelAssociates with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssociates(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcDefinitionSelect> relatedObjects):base(globalId,ownerHistory,name,description)
		{
			RelatedObjects = relatedObjects;

		}
		public static new IfcRelAssociates FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociates>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociatesapproval.htm"/>
	/// </summary>
	public  partial class IfcRelAssociatesApproval : IfcRelAssociates
	{
		public IfcApproval RelatingApproval{get;set;} 

		/// <summary>
		/// Construct a IfcRelAssociatesApproval with all required attributes.
		/// </summary>
		public IfcRelAssociatesApproval(IfcGloballyUniqueId globalId,List<IfcDefinitionSelect> relatedObjects,IfcApproval relatingApproval):base(globalId,relatedObjects)
		{
			RelatingApproval = relatingApproval;

		}
		/// <summary>
		/// Construct a IfcRelAssociatesApproval with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssociatesApproval(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcDefinitionSelect> relatedObjects,IfcApproval relatingApproval):base(globalId,ownerHistory,name,description,relatedObjects)
		{
			RelatingApproval = relatingApproval;

		}
		public static new IfcRelAssociatesApproval FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociatesApproval>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociatesclassification.htm"/>
	/// </summary>
	public  partial class IfcRelAssociatesClassification : IfcRelAssociates
	{
		public IfcClassificationSelect RelatingClassification{get;set;} 

		/// <summary>
		/// Construct a IfcRelAssociatesClassification with all required attributes.
		/// </summary>
		public IfcRelAssociatesClassification(IfcGloballyUniqueId globalId,List<IfcDefinitionSelect> relatedObjects,IfcClassificationSelect relatingClassification):base(globalId,relatedObjects)
		{
			RelatingClassification = relatingClassification;

		}
		/// <summary>
		/// Construct a IfcRelAssociatesClassification with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssociatesClassification(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcDefinitionSelect> relatedObjects,IfcClassificationSelect relatingClassification):base(globalId,ownerHistory,name,description,relatedObjects)
		{
			RelatingClassification = relatingClassification;

		}
		public static new IfcRelAssociatesClassification FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociatesClassification>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociatesconstraint.htm"/>
	/// </summary>
	public  partial class IfcRelAssociatesConstraint : IfcRelAssociates
	{
		public IfcLabel Intent{get;set;} // optional
		public IfcConstraint RelatingConstraint{get;set;} 

		/// <summary>
		/// Construct a IfcRelAssociatesConstraint with all required attributes.
		/// </summary>
		public IfcRelAssociatesConstraint(IfcGloballyUniqueId globalId,List<IfcDefinitionSelect> relatedObjects,IfcConstraint relatingConstraint):base(globalId,relatedObjects)
		{
			RelatingConstraint = relatingConstraint;

		}
		/// <summary>
		/// Construct a IfcRelAssociatesConstraint with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssociatesConstraint(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcDefinitionSelect> relatedObjects,IfcLabel intent,IfcConstraint relatingConstraint):base(globalId,ownerHistory,name,description,relatedObjects)
		{
			Intent = intent;
			RelatingConstraint = relatingConstraint;

		}
		public static new IfcRelAssociatesConstraint FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociatesConstraint>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociatesdocument.htm"/>
	/// </summary>
	public  partial class IfcRelAssociatesDocument : IfcRelAssociates
	{
		public IfcDocumentSelect RelatingDocument{get;set;} 

		/// <summary>
		/// Construct a IfcRelAssociatesDocument with all required attributes.
		/// </summary>
		public IfcRelAssociatesDocument(IfcGloballyUniqueId globalId,List<IfcDefinitionSelect> relatedObjects,IfcDocumentSelect relatingDocument):base(globalId,relatedObjects)
		{
			RelatingDocument = relatingDocument;

		}
		/// <summary>
		/// Construct a IfcRelAssociatesDocument with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssociatesDocument(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcDefinitionSelect> relatedObjects,IfcDocumentSelect relatingDocument):base(globalId,ownerHistory,name,description,relatedObjects)
		{
			RelatingDocument = relatingDocument;

		}
		public static new IfcRelAssociatesDocument FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociatesDocument>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociateslibrary.htm"/>
	/// </summary>
	public  partial class IfcRelAssociatesLibrary : IfcRelAssociates
	{
		public IfcLibrarySelect RelatingLibrary{get;set;} 

		/// <summary>
		/// Construct a IfcRelAssociatesLibrary with all required attributes.
		/// </summary>
		public IfcRelAssociatesLibrary(IfcGloballyUniqueId globalId,List<IfcDefinitionSelect> relatedObjects,IfcLibrarySelect relatingLibrary):base(globalId,relatedObjects)
		{
			RelatingLibrary = relatingLibrary;

		}
		/// <summary>
		/// Construct a IfcRelAssociatesLibrary with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssociatesLibrary(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcDefinitionSelect> relatedObjects,IfcLibrarySelect relatingLibrary):base(globalId,ownerHistory,name,description,relatedObjects)
		{
			RelatingLibrary = relatingLibrary;

		}
		public static new IfcRelAssociatesLibrary FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociatesLibrary>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociatesmaterial.htm"/>
	/// </summary>
	public  partial class IfcRelAssociatesMaterial : IfcRelAssociates
	{
		public IfcMaterialSelect RelatingMaterial{get;set;} 

		/// <summary>
		/// Construct a IfcRelAssociatesMaterial with all required attributes.
		/// </summary>
		public IfcRelAssociatesMaterial(IfcGloballyUniqueId globalId,List<IfcDefinitionSelect> relatedObjects,IfcMaterialSelect relatingMaterial):base(globalId,relatedObjects)
		{
			RelatingMaterial = relatingMaterial;

		}
		/// <summary>
		/// Construct a IfcRelAssociatesMaterial with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelAssociatesMaterial(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcDefinitionSelect> relatedObjects,IfcMaterialSelect relatingMaterial):base(globalId,ownerHistory,name,description,relatedObjects)
		{
			RelatingMaterial = relatingMaterial;

		}
		public static new IfcRelAssociatesMaterial FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociatesMaterial>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnects.htm"/>
	/// </summary>
	public abstract partial class IfcRelConnects : IfcRelationship
	{
		/// <summary>
		/// Construct a IfcRelConnects with all required attributes.
		/// </summary>
		public IfcRelConnects(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcRelConnects with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelConnects(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description):base(globalId,ownerHistory,name,description)
		{

		}
		public static new IfcRelConnects FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnects>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectselements.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsElements : IfcRelConnects
	{
		public IfcConnectionGeometry ConnectionGeometry{get;set;} // optional
		public IfcElement RelatingElement{get;set;} 
		public IfcElement RelatedElement{get;set;} 

		/// <summary>
		/// Construct a IfcRelConnectsElements with all required attributes.
		/// </summary>
		public IfcRelConnectsElements(IfcGloballyUniqueId globalId,IfcElement relatingElement,IfcElement relatedElement):base(globalId)
		{
			RelatingElement = relatingElement;
			RelatedElement = relatedElement;

		}
		/// <summary>
		/// Construct a IfcRelConnectsElements with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelConnectsElements(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcConnectionGeometry connectionGeometry,IfcElement relatingElement,IfcElement relatedElement):base(globalId,ownerHistory,name,description)
		{
			ConnectionGeometry = connectionGeometry;
			RelatingElement = relatingElement;
			RelatedElement = relatedElement;

		}
		public static new IfcRelConnectsElements FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsElements>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectsporttoelement.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsPortToElement : IfcRelConnects
	{
		public IfcPort RelatingPort{get;set;} 
		public IfcDistributionElement RelatedElement{get;set;} 

		/// <summary>
		/// Construct a IfcRelConnectsPortToElement with all required attributes.
		/// </summary>
		public IfcRelConnectsPortToElement(IfcGloballyUniqueId globalId,IfcPort relatingPort,IfcDistributionElement relatedElement):base(globalId)
		{
			RelatingPort = relatingPort;
			RelatedElement = relatedElement;

		}
		/// <summary>
		/// Construct a IfcRelConnectsPortToElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelConnectsPortToElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcPort relatingPort,IfcDistributionElement relatedElement):base(globalId,ownerHistory,name,description)
		{
			RelatingPort = relatingPort;
			RelatedElement = relatedElement;

		}
		public static new IfcRelConnectsPortToElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsPortToElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectsports.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsPorts : IfcRelConnects
	{
		public IfcPort RelatingPort{get;set;} 
		public IfcPort RelatedPort{get;set;} 
		public IfcElement RealizingElement{get;set;} // optional

		/// <summary>
		/// Construct a IfcRelConnectsPorts with all required attributes.
		/// </summary>
		public IfcRelConnectsPorts(IfcGloballyUniqueId globalId,IfcPort relatingPort,IfcPort relatedPort):base(globalId)
		{
			RelatingPort = relatingPort;
			RelatedPort = relatedPort;

		}
		/// <summary>
		/// Construct a IfcRelConnectsPorts with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelConnectsPorts(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcPort relatingPort,IfcPort relatedPort,IfcElement realizingElement):base(globalId,ownerHistory,name,description)
		{
			RelatingPort = relatingPort;
			RelatedPort = relatedPort;
			RealizingElement = realizingElement;

		}
		public static new IfcRelConnectsPorts FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsPorts>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectsstructuralactivity.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsStructuralActivity : IfcRelConnects
	{
		public IfcStructuralActivityAssignmentSelect RelatingElement{get;set;} 
		public IfcStructuralActivity RelatedStructuralActivity{get;set;} 

		/// <summary>
		/// Construct a IfcRelConnectsStructuralActivity with all required attributes.
		/// </summary>
		public IfcRelConnectsStructuralActivity(IfcGloballyUniqueId globalId,IfcStructuralActivityAssignmentSelect relatingElement,IfcStructuralActivity relatedStructuralActivity):base(globalId)
		{
			RelatingElement = relatingElement;
			RelatedStructuralActivity = relatedStructuralActivity;

		}
		/// <summary>
		/// Construct a IfcRelConnectsStructuralActivity with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelConnectsStructuralActivity(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcStructuralActivityAssignmentSelect relatingElement,IfcStructuralActivity relatedStructuralActivity):base(globalId,ownerHistory,name,description)
		{
			RelatingElement = relatingElement;
			RelatedStructuralActivity = relatedStructuralActivity;

		}
		public static new IfcRelConnectsStructuralActivity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsStructuralActivity>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectsstructuralmember.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsStructuralMember : IfcRelConnects
	{
		public IfcStructuralMember RelatingStructuralMember{get;set;} 
		public IfcStructuralConnection RelatedStructuralConnection{get;set;} 
		public IfcBoundaryCondition AppliedCondition{get;set;} // optional
		public IfcStructuralConnectionCondition AdditionalConditions{get;set;} // optional
		public IfcLengthMeasure SupportedLength{get;set;} // optional
		public IfcAxis2Placement3D ConditionCoordinateSystem{get;set;} // optional

		/// <summary>
		/// Construct a IfcRelConnectsStructuralMember with all required attributes.
		/// </summary>
		public IfcRelConnectsStructuralMember(IfcGloballyUniqueId globalId,IfcStructuralMember relatingStructuralMember,IfcStructuralConnection relatedStructuralConnection):base(globalId)
		{
			RelatingStructuralMember = relatingStructuralMember;
			RelatedStructuralConnection = relatedStructuralConnection;

		}
		/// <summary>
		/// Construct a IfcRelConnectsStructuralMember with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelConnectsStructuralMember(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcStructuralMember relatingStructuralMember,IfcStructuralConnection relatedStructuralConnection,IfcBoundaryCondition appliedCondition,IfcStructuralConnectionCondition additionalConditions,IfcLengthMeasure supportedLength,IfcAxis2Placement3D conditionCoordinateSystem):base(globalId,ownerHistory,name,description)
		{
			RelatingStructuralMember = relatingStructuralMember;
			RelatedStructuralConnection = relatedStructuralConnection;
			AppliedCondition = appliedCondition;
			AdditionalConditions = additionalConditions;
			SupportedLength = supportedLength;
			ConditionCoordinateSystem = conditionCoordinateSystem;

		}
		public static new IfcRelConnectsStructuralMember FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsStructuralMember>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelcontainedinspatialstructure.htm"/>
	/// </summary>
	public  partial class IfcRelContainedInSpatialStructure : IfcRelConnects
	{
		public List<IfcProduct> RelatedElements{get;set;} 
		public IfcSpatialElement RelatingStructure{get;set;} 

		/// <summary>
		/// Construct a IfcRelContainedInSpatialStructure with all required attributes.
		/// </summary>
		public IfcRelContainedInSpatialStructure(IfcGloballyUniqueId globalId,List<IfcProduct> relatedElements,IfcSpatialElement relatingStructure):base(globalId)
		{
			RelatedElements = relatedElements;
			RelatingStructure = relatingStructure;

		}
		/// <summary>
		/// Construct a IfcRelContainedInSpatialStructure with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelContainedInSpatialStructure(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcProduct> relatedElements,IfcSpatialElement relatingStructure):base(globalId,ownerHistory,name,description)
		{
			RelatedElements = relatedElements;
			RelatingStructure = relatingStructure;

		}
		public static new IfcRelContainedInSpatialStructure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelContainedInSpatialStructure>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelcoversbldgelements.htm"/>
	/// </summary>
	public  partial class IfcRelCoversBldgElements : IfcRelConnects
	{
		public IfcElement RelatingBuildingElement{get;set;} 
		public List<IfcCovering> RelatedCoverings{get;set;} 

		/// <summary>
		/// Construct a IfcRelCoversBldgElements with all required attributes.
		/// </summary>
		public IfcRelCoversBldgElements(IfcGloballyUniqueId globalId,IfcElement relatingBuildingElement,List<IfcCovering> relatedCoverings):base(globalId)
		{
			RelatingBuildingElement = relatingBuildingElement;
			RelatedCoverings = relatedCoverings;

		}
		/// <summary>
		/// Construct a IfcRelCoversBldgElements with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelCoversBldgElements(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcElement relatingBuildingElement,List<IfcCovering> relatedCoverings):base(globalId,ownerHistory,name,description)
		{
			RelatingBuildingElement = relatingBuildingElement;
			RelatedCoverings = relatedCoverings;

		}
		public static new IfcRelCoversBldgElements FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelCoversBldgElements>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelcoversspaces.htm"/>
	/// </summary>
	public  partial class IfcRelCoversSpaces : IfcRelConnects
	{
		public IfcSpace RelatingSpace{get;set;} 
		public List<IfcCovering> RelatedCoverings{get;set;} 

		/// <summary>
		/// Construct a IfcRelCoversSpaces with all required attributes.
		/// </summary>
		public IfcRelCoversSpaces(IfcGloballyUniqueId globalId,IfcSpace relatingSpace,List<IfcCovering> relatedCoverings):base(globalId)
		{
			RelatingSpace = relatingSpace;
			RelatedCoverings = relatedCoverings;

		}
		/// <summary>
		/// Construct a IfcRelCoversSpaces with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelCoversSpaces(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcSpace relatingSpace,List<IfcCovering> relatedCoverings):base(globalId,ownerHistory,name,description)
		{
			RelatingSpace = relatingSpace;
			RelatedCoverings = relatedCoverings;

		}
		public static new IfcRelCoversSpaces FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelCoversSpaces>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelfillselement.htm"/>
	/// </summary>
	public  partial class IfcRelFillsElement : IfcRelConnects
	{
		public IfcOpeningElement RelatingOpeningElement{get;set;} 
		public IfcElement RelatedBuildingElement{get;set;} 

		/// <summary>
		/// Construct a IfcRelFillsElement with all required attributes.
		/// </summary>
		public IfcRelFillsElement(IfcGloballyUniqueId globalId,IfcOpeningElement relatingOpeningElement,IfcElement relatedBuildingElement):base(globalId)
		{
			RelatingOpeningElement = relatingOpeningElement;
			RelatedBuildingElement = relatedBuildingElement;

		}
		/// <summary>
		/// Construct a IfcRelFillsElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelFillsElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcOpeningElement relatingOpeningElement,IfcElement relatedBuildingElement):base(globalId,ownerHistory,name,description)
		{
			RelatingOpeningElement = relatingOpeningElement;
			RelatedBuildingElement = relatedBuildingElement;

		}
		public static new IfcRelFillsElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelFillsElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelflowcontrolelements.htm"/>
	/// </summary>
	public  partial class IfcRelFlowControlElements : IfcRelConnects
	{
		public List<IfcDistributionControlElement> RelatedControlElements{get;set;} 
		public IfcDistributionFlowElement RelatingFlowElement{get;set;} 

		/// <summary>
		/// Construct a IfcRelFlowControlElements with all required attributes.
		/// </summary>
		public IfcRelFlowControlElements(IfcGloballyUniqueId globalId,List<IfcDistributionControlElement> relatedControlElements,IfcDistributionFlowElement relatingFlowElement):base(globalId)
		{
			RelatedControlElements = relatedControlElements;
			RelatingFlowElement = relatingFlowElement;

		}
		/// <summary>
		/// Construct a IfcRelFlowControlElements with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelFlowControlElements(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcDistributionControlElement> relatedControlElements,IfcDistributionFlowElement relatingFlowElement):base(globalId,ownerHistory,name,description)
		{
			RelatedControlElements = relatedControlElements;
			RelatingFlowElement = relatingFlowElement;

		}
		public static new IfcRelFlowControlElements FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelFlowControlElements>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelinterfereselements.htm"/>
	/// </summary>
	public  partial class IfcRelInterferesElements : IfcRelConnects
	{
		public IfcElement RelatingElement{get;set;} 
		public IfcElement RelatedElement{get;set;} 
		public IfcConnectionGeometry InterferenceGeometry{get;set;} // optional
		public IfcIdentifier InterferenceType{get;set;} // optional
		public bool? ImpliedOrder{get;set;} 

		/// <summary>
		/// Construct a IfcRelInterferesElements with all required attributes.
		/// </summary>
		public IfcRelInterferesElements(IfcGloballyUniqueId globalId,IfcElement relatingElement,IfcElement relatedElement,bool? impliedOrder):base(globalId)
		{
			RelatingElement = relatingElement;
			RelatedElement = relatedElement;
			ImpliedOrder = impliedOrder;

		}
		/// <summary>
		/// Construct a IfcRelInterferesElements with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelInterferesElements(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcElement relatingElement,IfcElement relatedElement,IfcConnectionGeometry interferenceGeometry,IfcIdentifier interferenceType,bool? impliedOrder):base(globalId,ownerHistory,name,description)
		{
			RelatingElement = relatingElement;
			RelatedElement = relatedElement;
			InterferenceGeometry = interferenceGeometry;
			InterferenceType = interferenceType;
			ImpliedOrder = impliedOrder;

		}
		public static new IfcRelInterferesElements FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelInterferesElements>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelreferencedinspatialstructure.htm"/>
	/// </summary>
	public  partial class IfcRelReferencedInSpatialStructure : IfcRelConnects
	{
		public List<IfcProduct> RelatedElements{get;set;} 
		public IfcSpatialElement RelatingStructure{get;set;} 

		/// <summary>
		/// Construct a IfcRelReferencedInSpatialStructure with all required attributes.
		/// </summary>
		public IfcRelReferencedInSpatialStructure(IfcGloballyUniqueId globalId,List<IfcProduct> relatedElements,IfcSpatialElement relatingStructure):base(globalId)
		{
			RelatedElements = relatedElements;
			RelatingStructure = relatingStructure;

		}
		/// <summary>
		/// Construct a IfcRelReferencedInSpatialStructure with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelReferencedInSpatialStructure(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcProduct> relatedElements,IfcSpatialElement relatingStructure):base(globalId,ownerHistory,name,description)
		{
			RelatedElements = relatedElements;
			RelatingStructure = relatingStructure;

		}
		public static new IfcRelReferencedInSpatialStructure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelReferencedInSpatialStructure>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelsequence.htm"/>
	/// </summary>
	public  partial class IfcRelSequence : IfcRelConnects
	{
		public IfcProcess RelatingProcess{get;set;} 
		public IfcProcess RelatedProcess{get;set;} 
		public IfcLagTime TimeLag{get;set;} // optional
		public IfcSequenceEnum SequenceType{get;set;} // optional
		public IfcLabel UserDefinedSequenceType{get;set;} // optional

		/// <summary>
		/// Construct a IfcRelSequence with all required attributes.
		/// </summary>
		public IfcRelSequence(IfcGloballyUniqueId globalId,IfcProcess relatingProcess,IfcProcess relatedProcess):base(globalId)
		{
			RelatingProcess = relatingProcess;
			RelatedProcess = relatedProcess;

		}
		/// <summary>
		/// Construct a IfcRelSequence with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelSequence(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcProcess relatingProcess,IfcProcess relatedProcess,IfcLagTime timeLag,IfcSequenceEnum sequenceType,IfcLabel userDefinedSequenceType):base(globalId,ownerHistory,name,description)
		{
			RelatingProcess = relatingProcess;
			RelatedProcess = relatedProcess;
			TimeLag = timeLag;
			SequenceType = sequenceType;
			UserDefinedSequenceType = userDefinedSequenceType;

		}
		public static new IfcRelSequence FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelSequence>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelservicesbuildings.htm"/>
	/// </summary>
	public  partial class IfcRelServicesBuildings : IfcRelConnects
	{
		public IfcSystem RelatingSystem{get;set;} 
		public List<IfcSpatialElement> RelatedBuildings{get;set;} 

		/// <summary>
		/// Construct a IfcRelServicesBuildings with all required attributes.
		/// </summary>
		public IfcRelServicesBuildings(IfcGloballyUniqueId globalId,IfcSystem relatingSystem,List<IfcSpatialElement> relatedBuildings):base(globalId)
		{
			RelatingSystem = relatingSystem;
			RelatedBuildings = relatedBuildings;

		}
		/// <summary>
		/// Construct a IfcRelServicesBuildings with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelServicesBuildings(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcSystem relatingSystem,List<IfcSpatialElement> relatedBuildings):base(globalId,ownerHistory,name,description)
		{
			RelatingSystem = relatingSystem;
			RelatedBuildings = relatedBuildings;

		}
		public static new IfcRelServicesBuildings FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelServicesBuildings>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelspaceboundary.htm"/>
	/// </summary>
	public  partial class IfcRelSpaceBoundary : IfcRelConnects
	{
		public IfcSpaceBoundarySelect RelatingSpace{get;set;} 
		public IfcElement RelatedBuildingElement{get;set;} 
		public IfcConnectionGeometry ConnectionGeometry{get;set;} // optional
		public IfcPhysicalOrVirtualEnum PhysicalOrVirtualBoundary{get;set;} 
		public IfcInternalOrExternalEnum InternalOrExternalBoundary{get;set;} 

		/// <summary>
		/// Construct a IfcRelSpaceBoundary with all required attributes.
		/// </summary>
		public IfcRelSpaceBoundary(IfcGloballyUniqueId globalId,IfcSpaceBoundarySelect relatingSpace,IfcElement relatedBuildingElement,IfcPhysicalOrVirtualEnum physicalOrVirtualBoundary,IfcInternalOrExternalEnum internalOrExternalBoundary):base(globalId)
		{
			RelatingSpace = relatingSpace;
			RelatedBuildingElement = relatedBuildingElement;
			PhysicalOrVirtualBoundary = physicalOrVirtualBoundary;
			InternalOrExternalBoundary = internalOrExternalBoundary;

		}
		/// <summary>
		/// Construct a IfcRelSpaceBoundary with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelSpaceBoundary(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcSpaceBoundarySelect relatingSpace,IfcElement relatedBuildingElement,IfcConnectionGeometry connectionGeometry,IfcPhysicalOrVirtualEnum physicalOrVirtualBoundary,IfcInternalOrExternalEnum internalOrExternalBoundary):base(globalId,ownerHistory,name,description)
		{
			RelatingSpace = relatingSpace;
			RelatedBuildingElement = relatedBuildingElement;
			ConnectionGeometry = connectionGeometry;
			PhysicalOrVirtualBoundary = physicalOrVirtualBoundary;
			InternalOrExternalBoundary = internalOrExternalBoundary;

		}
		public static new IfcRelSpaceBoundary FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelSpaceBoundary>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectspathelements.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsPathElements : IfcRelConnectsElements
	{
		public List<double> RelatingPriorities{get;set;} 
		public List<double> RelatedPriorities{get;set;} 
		public IfcConnectionTypeEnum RelatedConnectionType{get;set;} 
		public IfcConnectionTypeEnum RelatingConnectionType{get;set;} 

		/// <summary>
		/// Construct a IfcRelConnectsPathElements with all required attributes.
		/// </summary>
		public IfcRelConnectsPathElements(IfcGloballyUniqueId globalId,IfcElement relatingElement,IfcElement relatedElement,List<double> relatingPriorities,List<double> relatedPriorities,IfcConnectionTypeEnum relatedConnectionType,IfcConnectionTypeEnum relatingConnectionType):base(globalId,relatingElement,relatedElement)
		{
			RelatingPriorities = relatingPriorities;
			RelatedPriorities = relatedPriorities;
			RelatedConnectionType = relatedConnectionType;
			RelatingConnectionType = relatingConnectionType;

		}
		/// <summary>
		/// Construct a IfcRelConnectsPathElements with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelConnectsPathElements(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcConnectionGeometry connectionGeometry,IfcElement relatingElement,IfcElement relatedElement,List<double> relatingPriorities,List<double> relatedPriorities,IfcConnectionTypeEnum relatedConnectionType,IfcConnectionTypeEnum relatingConnectionType):base(globalId,ownerHistory,name,description,connectionGeometry,relatingElement,relatedElement)
		{
			RelatingPriorities = relatingPriorities;
			RelatedPriorities = relatedPriorities;
			RelatedConnectionType = relatedConnectionType;
			RelatingConnectionType = relatingConnectionType;

		}
		public static new IfcRelConnectsPathElements FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsPathElements>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectswithrealizingelements.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsWithRealizingElements : IfcRelConnectsElements
	{
		public List<IfcElement> RealizingElements{get;set;} 
		public IfcLabel ConnectionType{get;set;} // optional

		/// <summary>
		/// Construct a IfcRelConnectsWithRealizingElements with all required attributes.
		/// </summary>
		public IfcRelConnectsWithRealizingElements(IfcGloballyUniqueId globalId,IfcElement relatingElement,IfcElement relatedElement,List<IfcElement> realizingElements):base(globalId,relatingElement,relatedElement)
		{
			RealizingElements = realizingElements;

		}
		/// <summary>
		/// Construct a IfcRelConnectsWithRealizingElements with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelConnectsWithRealizingElements(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcConnectionGeometry connectionGeometry,IfcElement relatingElement,IfcElement relatedElement,List<IfcElement> realizingElements,IfcLabel connectionType):base(globalId,ownerHistory,name,description,connectionGeometry,relatingElement,relatedElement)
		{
			RealizingElements = realizingElements;
			ConnectionType = connectionType;

		}
		public static new IfcRelConnectsWithRealizingElements FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsWithRealizingElements>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectswitheccentricity.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsWithEccentricity : IfcRelConnectsStructuralMember
	{
		public IfcConnectionGeometry ConnectionConstraint{get;set;} 

		/// <summary>
		/// Construct a IfcRelConnectsWithEccentricity with all required attributes.
		/// </summary>
		public IfcRelConnectsWithEccentricity(IfcGloballyUniqueId globalId,IfcStructuralMember relatingStructuralMember,IfcStructuralConnection relatedStructuralConnection,IfcConnectionGeometry connectionConstraint):base(globalId,relatingStructuralMember,relatedStructuralConnection)
		{
			ConnectionConstraint = connectionConstraint;

		}
		/// <summary>
		/// Construct a IfcRelConnectsWithEccentricity with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelConnectsWithEccentricity(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcStructuralMember relatingStructuralMember,IfcStructuralConnection relatedStructuralConnection,IfcBoundaryCondition appliedCondition,IfcStructuralConnectionCondition additionalConditions,IfcLengthMeasure supportedLength,IfcAxis2Placement3D conditionCoordinateSystem,IfcConnectionGeometry connectionConstraint):base(globalId,ownerHistory,name,description,relatingStructuralMember,relatedStructuralConnection,appliedCondition,additionalConditions,supportedLength,conditionCoordinateSystem)
		{
			ConnectionConstraint = connectionConstraint;

		}
		public static new IfcRelConnectsWithEccentricity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsWithEccentricity>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldeclares.htm"/>
	/// </summary>
	public  partial class IfcRelDeclares : IfcRelationship
	{
		public IfcContext RelatingContext{get;set;} 
		public List<IfcDefinitionSelect> RelatedDefinitions{get;set;} 

		/// <summary>
		/// Construct a IfcRelDeclares with all required attributes.
		/// </summary>
		public IfcRelDeclares(IfcGloballyUniqueId globalId,IfcContext relatingContext,List<IfcDefinitionSelect> relatedDefinitions):base(globalId)
		{
			RelatingContext = relatingContext;
			RelatedDefinitions = relatedDefinitions;

		}
		/// <summary>
		/// Construct a IfcRelDeclares with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelDeclares(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcContext relatingContext,List<IfcDefinitionSelect> relatedDefinitions):base(globalId,ownerHistory,name,description)
		{
			RelatingContext = relatingContext;
			RelatedDefinitions = relatedDefinitions;

		}
		public static new IfcRelDeclares FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDeclares>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelnests.htm"/>
	/// </summary>
	public  partial class IfcRelNests : IfcRelDecomposes
	{
		public IfcObjectDefinition RelatingObject{get;set;} 
		public List<IfcObjectDefinition> RelatedObjects{get;set;} 

		/// <summary>
		/// Construct a IfcRelNests with all required attributes.
		/// </summary>
		public IfcRelNests(IfcGloballyUniqueId globalId,IfcObjectDefinition relatingObject,List<IfcObjectDefinition> relatedObjects):base(globalId)
		{
			RelatingObject = relatingObject;
			RelatedObjects = relatedObjects;

		}
		/// <summary>
		/// Construct a IfcRelNests with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelNests(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcObjectDefinition relatingObject,List<IfcObjectDefinition> relatedObjects):base(globalId,ownerHistory,name,description)
		{
			RelatingObject = relatingObject;
			RelatedObjects = relatedObjects;

		}
		public static new IfcRelNests FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelNests>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelprojectselement.htm"/>
	/// </summary>
	public  partial class IfcRelProjectsElement : IfcRelDecomposes
	{
		public IfcElement RelatingElement{get;set;} 
		public IfcFeatureElementAddition RelatedFeatureElement{get;set;} 

		/// <summary>
		/// Construct a IfcRelProjectsElement with all required attributes.
		/// </summary>
		public IfcRelProjectsElement(IfcGloballyUniqueId globalId,IfcElement relatingElement,IfcFeatureElementAddition relatedFeatureElement):base(globalId)
		{
			RelatingElement = relatingElement;
			RelatedFeatureElement = relatedFeatureElement;

		}
		/// <summary>
		/// Construct a IfcRelProjectsElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelProjectsElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcElement relatingElement,IfcFeatureElementAddition relatedFeatureElement):base(globalId,ownerHistory,name,description)
		{
			RelatingElement = relatingElement;
			RelatedFeatureElement = relatedFeatureElement;

		}
		public static new IfcRelProjectsElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelProjectsElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelvoidselement.htm"/>
	/// </summary>
	public  partial class IfcRelVoidsElement : IfcRelDecomposes
	{
		public IfcElement RelatingBuildingElement{get;set;} 
		public IfcFeatureElementSubtraction RelatedOpeningElement{get;set;} 

		/// <summary>
		/// Construct a IfcRelVoidsElement with all required attributes.
		/// </summary>
		public IfcRelVoidsElement(IfcGloballyUniqueId globalId,IfcElement relatingBuildingElement,IfcFeatureElementSubtraction relatedOpeningElement):base(globalId)
		{
			RelatingBuildingElement = relatingBuildingElement;
			RelatedOpeningElement = relatedOpeningElement;

		}
		/// <summary>
		/// Construct a IfcRelVoidsElement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelVoidsElement(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcElement relatingBuildingElement,IfcFeatureElementSubtraction relatedOpeningElement):base(globalId,ownerHistory,name,description)
		{
			RelatingBuildingElement = relatingBuildingElement;
			RelatedOpeningElement = relatedOpeningElement;

		}
		public static new IfcRelVoidsElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelVoidsElement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldefines.htm"/>
	/// </summary>
	public abstract partial class IfcRelDefines : IfcRelationship
	{
		/// <summary>
		/// Construct a IfcRelDefines with all required attributes.
		/// </summary>
		public IfcRelDefines(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcRelDefines with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelDefines(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description):base(globalId,ownerHistory,name,description)
		{

		}
		public static new IfcRelDefines FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDefines>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldefinesbyobject.htm"/>
	/// </summary>
	public  partial class IfcRelDefinesByObject : IfcRelDefines
	{
		public List<IfcObject> RelatedObjects{get;set;} 
		public IfcObject RelatingObject{get;set;} 

		/// <summary>
		/// Construct a IfcRelDefinesByObject with all required attributes.
		/// </summary>
		public IfcRelDefinesByObject(IfcGloballyUniqueId globalId,List<IfcObject> relatedObjects,IfcObject relatingObject):base(globalId)
		{
			RelatedObjects = relatedObjects;
			RelatingObject = relatingObject;

		}
		/// <summary>
		/// Construct a IfcRelDefinesByObject with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelDefinesByObject(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcObject> relatedObjects,IfcObject relatingObject):base(globalId,ownerHistory,name,description)
		{
			RelatedObjects = relatedObjects;
			RelatingObject = relatingObject;

		}
		public static new IfcRelDefinesByObject FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDefinesByObject>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldefinesbyproperties.htm"/>
	/// </summary>
	public  partial class IfcRelDefinesByProperties : IfcRelDefines
	{
		public List<IfcObjectDefinition> RelatedObjects{get;set;} 
		public IfcPropertySetDefinitionSelect RelatingPropertyDefinition{get;set;} 

		/// <summary>
		/// Construct a IfcRelDefinesByProperties with all required attributes.
		/// </summary>
		public IfcRelDefinesByProperties(IfcGloballyUniqueId globalId,List<IfcObjectDefinition> relatedObjects,IfcPropertySetDefinitionSelect relatingPropertyDefinition):base(globalId)
		{
			RelatedObjects = relatedObjects;
			RelatingPropertyDefinition = relatingPropertyDefinition;

		}
		/// <summary>
		/// Construct a IfcRelDefinesByProperties with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelDefinesByProperties(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcObjectDefinition> relatedObjects,IfcPropertySetDefinitionSelect relatingPropertyDefinition):base(globalId,ownerHistory,name,description)
		{
			RelatedObjects = relatedObjects;
			RelatingPropertyDefinition = relatingPropertyDefinition;

		}
		public static new IfcRelDefinesByProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDefinesByProperties>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldefinesbytemplate.htm"/>
	/// </summary>
	public  partial class IfcRelDefinesByTemplate : IfcRelDefines
	{
		public List<IfcPropertySetDefinition> RelatedPropertySets{get;set;} 
		public IfcPropertySetTemplate RelatingTemplate{get;set;} 

		/// <summary>
		/// Construct a IfcRelDefinesByTemplate with all required attributes.
		/// </summary>
		public IfcRelDefinesByTemplate(IfcGloballyUniqueId globalId,List<IfcPropertySetDefinition> relatedPropertySets,IfcPropertySetTemplate relatingTemplate):base(globalId)
		{
			RelatedPropertySets = relatedPropertySets;
			RelatingTemplate = relatingTemplate;

		}
		/// <summary>
		/// Construct a IfcRelDefinesByTemplate with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelDefinesByTemplate(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcPropertySetDefinition> relatedPropertySets,IfcPropertySetTemplate relatingTemplate):base(globalId,ownerHistory,name,description)
		{
			RelatedPropertySets = relatedPropertySets;
			RelatingTemplate = relatingTemplate;

		}
		public static new IfcRelDefinesByTemplate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDefinesByTemplate>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldefinesbytype.htm"/>
	/// </summary>
	public  partial class IfcRelDefinesByType : IfcRelDefines
	{
		public List<IfcObject> RelatedObjects{get;set;} 
		public IfcTypeObject RelatingType{get;set;} 

		/// <summary>
		/// Construct a IfcRelDefinesByType with all required attributes.
		/// </summary>
		public IfcRelDefinesByType(IfcGloballyUniqueId globalId,List<IfcObject> relatedObjects,IfcTypeObject relatingType):base(globalId)
		{
			RelatedObjects = relatedObjects;
			RelatingType = relatingType;

		}
		/// <summary>
		/// Construct a IfcRelDefinesByType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelDefinesByType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,List<IfcObject> relatedObjects,IfcTypeObject relatingType):base(globalId,ownerHistory,name,description)
		{
			RelatedObjects = relatedObjects;
			RelatingType = relatingType;

		}
		public static new IfcRelDefinesByType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDefinesByType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelspaceboundary1stlevel.htm"/>
	/// </summary>
	public  partial class IfcRelSpaceBoundary1stLevel : IfcRelSpaceBoundary
	{
		public IfcRelSpaceBoundary1stLevel ParentBoundary{get;set;} // optional

		/// <summary>
		/// Construct a IfcRelSpaceBoundary1stLevel with all required attributes.
		/// </summary>
		public IfcRelSpaceBoundary1stLevel(IfcGloballyUniqueId globalId,IfcSpaceBoundarySelect relatingSpace,IfcElement relatedBuildingElement,IfcPhysicalOrVirtualEnum physicalOrVirtualBoundary,IfcInternalOrExternalEnum internalOrExternalBoundary):base(globalId,relatingSpace,relatedBuildingElement,physicalOrVirtualBoundary,internalOrExternalBoundary)
		{

		}
		/// <summary>
		/// Construct a IfcRelSpaceBoundary1stLevel with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelSpaceBoundary1stLevel(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcSpaceBoundarySelect relatingSpace,IfcElement relatedBuildingElement,IfcConnectionGeometry connectionGeometry,IfcPhysicalOrVirtualEnum physicalOrVirtualBoundary,IfcInternalOrExternalEnum internalOrExternalBoundary,IfcRelSpaceBoundary1stLevel parentBoundary):base(globalId,ownerHistory,name,description,relatingSpace,relatedBuildingElement,connectionGeometry,physicalOrVirtualBoundary,internalOrExternalBoundary)
		{
			ParentBoundary = parentBoundary;

		}
		public static new IfcRelSpaceBoundary1stLevel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelSpaceBoundary1stLevel>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelspaceboundary2ndlevel.htm"/>
	/// </summary>
	public  partial class IfcRelSpaceBoundary2ndLevel : IfcRelSpaceBoundary1stLevel
	{
		public IfcRelSpaceBoundary2ndLevel CorrespondingBoundary{get;set;} // optional

		/// <summary>
		/// Construct a IfcRelSpaceBoundary2ndLevel with all required attributes.
		/// </summary>
		public IfcRelSpaceBoundary2ndLevel(IfcGloballyUniqueId globalId,IfcSpaceBoundarySelect relatingSpace,IfcElement relatedBuildingElement,IfcPhysicalOrVirtualEnum physicalOrVirtualBoundary,IfcInternalOrExternalEnum internalOrExternalBoundary):base(globalId,relatingSpace,relatedBuildingElement,physicalOrVirtualBoundary,internalOrExternalBoundary)
		{

		}
		/// <summary>
		/// Construct a IfcRelSpaceBoundary2ndLevel with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRelSpaceBoundary2ndLevel(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcSpaceBoundarySelect relatingSpace,IfcElement relatedBuildingElement,IfcConnectionGeometry connectionGeometry,IfcPhysicalOrVirtualEnum physicalOrVirtualBoundary,IfcInternalOrExternalEnum internalOrExternalBoundary,IfcRelSpaceBoundary1stLevel parentBoundary,IfcRelSpaceBoundary2ndLevel correspondingBoundary):base(globalId,ownerHistory,name,description,relatingSpace,relatedBuildingElement,connectionGeometry,physicalOrVirtualBoundary,internalOrExternalBoundary,parentBoundary)
		{
			CorrespondingBoundary = correspondingBoundary;

		}
		public static new IfcRelSpaceBoundary2ndLevel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelSpaceBoundary2ndLevel>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrepresentation.htm"/>
	/// </summary>
	public abstract partial class IfcRepresentation : BaseIfc
	{
		public IfcRepresentationContext ContextOfItems{get;set;} 
		public IfcLabel RepresentationIdentifier{get;set;} // optional
		public IfcLabel RepresentationType{get;set;} // optional
		public List<IfcRepresentationItem> Items{get;set;} 

		/// <summary>
		/// Construct a IfcRepresentation with all required attributes.
		/// </summary>
		public IfcRepresentation(IfcRepresentationContext contextOfItems,List<IfcRepresentationItem> items):base()
		{
			ContextOfItems = contextOfItems;
			Items = items;

		}
		/// <summary>
		/// Construct a IfcRepresentation with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRepresentation(IfcRepresentationContext contextOfItems,IfcLabel representationIdentifier,IfcLabel representationType,List<IfcRepresentationItem> items):base()
		{
			ContextOfItems = contextOfItems;
			RepresentationIdentifier = representationIdentifier;
			RepresentationType = representationType;
			Items = items;

		}
		public static  IfcRepresentation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRepresentation>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshapemodel.htm"/>
	/// </summary>
	public abstract partial class IfcShapeModel : IfcRepresentation
	{
		/// <summary>
		/// Construct a IfcShapeModel with all required attributes.
		/// </summary>
		public IfcShapeModel(IfcRepresentationContext contextOfItems,List<IfcRepresentationItem> items):base(contextOfItems,items)
		{

		}
		/// <summary>
		/// Construct a IfcShapeModel with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcShapeModel(IfcRepresentationContext contextOfItems,IfcLabel representationIdentifier,IfcLabel representationType,List<IfcRepresentationItem> items):base(contextOfItems,representationIdentifier,representationType,items)
		{

		}
		public static new IfcShapeModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShapeModel>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstylemodel.htm"/>
	/// </summary>
	public abstract partial class IfcStyleModel : IfcRepresentation
	{
		/// <summary>
		/// Construct a IfcStyleModel with all required attributes.
		/// </summary>
		public IfcStyleModel(IfcRepresentationContext contextOfItems,List<IfcRepresentationItem> items):base(contextOfItems,items)
		{

		}
		/// <summary>
		/// Construct a IfcStyleModel with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStyleModel(IfcRepresentationContext contextOfItems,IfcLabel representationIdentifier,IfcLabel representationType,List<IfcRepresentationItem> items):base(contextOfItems,representationIdentifier,representationType,items)
		{

		}
		public static new IfcStyleModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStyleModel>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstyleditem.htm"/>
	/// </summary>
	public  partial class IfcStyledItem : IfcRepresentationItem
	{
		public IfcRepresentationItem Item{get;set;} // optional
		public List<IfcStyleAssignmentSelect> Styles{get;set;} 
		public IfcLabel Name{get;set;} // optional

		/// <summary>
		/// Construct a IfcStyledItem with all required attributes.
		/// </summary>
		public IfcStyledItem(List<IfcStyleAssignmentSelect> styles):base()
		{
			Styles = styles;

		}
		/// <summary>
		/// Construct a IfcStyledItem with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStyledItem(IfcRepresentationItem item,List<IfcStyleAssignmentSelect> styles,IfcLabel name):base()
		{
			Item = item;
			Styles = styles;
			Name = name;

		}
		public static new IfcStyledItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStyledItem>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrepresentationmap.htm"/>
	/// </summary>
	public  partial class IfcRepresentationMap : BaseIfc
	{
		public IfcAxis2Placement MappingOrigin{get;set;} 
		public IfcRepresentation MappedRepresentation{get;set;} 

		/// <summary>
		/// Construct a IfcRepresentationMap with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRepresentationMap(IfcAxis2Placement mappingOrigin,IfcRepresentation mappedRepresentation):base()
		{
			MappingOrigin = mappingOrigin;
			MappedRepresentation = mappedRepresentation;

		}
		public static  IfcRepresentationMap FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRepresentationMap>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresourceapprovalrelationship.htm"/>
	/// </summary>
	public  partial class IfcResourceApprovalRelationship : IfcResourceLevelRelationship
	{
		public List<IfcResourceObjectSelect> RelatedResourceObjects{get;set;} 
		public IfcApproval RelatingApproval{get;set;} 

		/// <summary>
		/// Construct a IfcResourceApprovalRelationship with all required attributes.
		/// </summary>
		public IfcResourceApprovalRelationship(List<IfcResourceObjectSelect> relatedResourceObjects,IfcApproval relatingApproval):base()
		{
			RelatedResourceObjects = relatedResourceObjects;
			RelatingApproval = relatingApproval;

		}
		/// <summary>
		/// Construct a IfcResourceApprovalRelationship with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcResourceApprovalRelationship(IfcLabel name,IfcText description,List<IfcResourceObjectSelect> relatedResourceObjects,IfcApproval relatingApproval):base(name,description)
		{
			RelatedResourceObjects = relatedResourceObjects;
			RelatingApproval = relatingApproval;

		}
		public static new IfcResourceApprovalRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResourceApprovalRelationship>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresourceconstraintrelationship.htm"/>
	/// </summary>
	public  partial class IfcResourceConstraintRelationship : IfcResourceLevelRelationship
	{
		public IfcConstraint RelatingConstraint{get;set;} 
		public List<IfcResourceObjectSelect> RelatedResourceObjects{get;set;} 

		/// <summary>
		/// Construct a IfcResourceConstraintRelationship with all required attributes.
		/// </summary>
		public IfcResourceConstraintRelationship(IfcConstraint relatingConstraint,List<IfcResourceObjectSelect> relatedResourceObjects):base()
		{
			RelatingConstraint = relatingConstraint;
			RelatedResourceObjects = relatedResourceObjects;

		}
		/// <summary>
		/// Construct a IfcResourceConstraintRelationship with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcResourceConstraintRelationship(IfcLabel name,IfcText description,IfcConstraint relatingConstraint,List<IfcResourceObjectSelect> relatedResourceObjects):base(name,description)
		{
			RelatingConstraint = relatingConstraint;
			RelatedResourceObjects = relatedResourceObjects;

		}
		public static new IfcResourceConstraintRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResourceConstraintRelationship>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresourcetime.htm"/>
	/// </summary>
	public  partial class IfcResourceTime : IfcSchedulingTime
	{
		public IfcDuration ScheduleWork{get;set;} // optional
		public IfcPositiveRatioMeasure ScheduleUsage{get;set;} // optional
		public IfcDateTime ScheduleStart{get;set;} // optional
		public IfcDateTime ScheduleFinish{get;set;} // optional
		public IfcLabel ScheduleContour{get;set;} // optional
		public IfcDuration LevelingDelay{get;set;} // optional
		public bool IsOverAllocated{get;set;} // optional
		public IfcDateTime StatusTime{get;set;} // optional
		public IfcDuration ActualWork{get;set;} // optional
		public IfcPositiveRatioMeasure ActualUsage{get;set;} // optional
		public IfcDateTime ActualStart{get;set;} // optional
		public IfcDateTime ActualFinish{get;set;} // optional
		public IfcDuration RemainingWork{get;set;} // optional
		public IfcPositiveRatioMeasure RemainingUsage{get;set;} // optional
		public IfcPositiveRatioMeasure Completion{get;set;} // optional

		/// <summary>
		/// Construct a IfcResourceTime with all required attributes.
		/// </summary>
		public IfcResourceTime():base()
		{

		}
		/// <summary>
		/// Construct a IfcResourceTime with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcResourceTime(IfcLabel name,IfcDataOriginEnum dataOrigin,IfcLabel userDefinedDataOrigin,IfcDuration scheduleWork,IfcPositiveRatioMeasure scheduleUsage,IfcDateTime scheduleStart,IfcDateTime scheduleFinish,IfcLabel scheduleContour,IfcDuration levelingDelay,bool isOverAllocated,IfcDateTime statusTime,IfcDuration actualWork,IfcPositiveRatioMeasure actualUsage,IfcDateTime actualStart,IfcDateTime actualFinish,IfcDuration remainingWork,IfcPositiveRatioMeasure remainingUsage,IfcPositiveRatioMeasure completion):base(name,dataOrigin,userDefinedDataOrigin)
		{
			ScheduleWork = scheduleWork;
			ScheduleUsage = scheduleUsage;
			ScheduleStart = scheduleStart;
			ScheduleFinish = scheduleFinish;
			ScheduleContour = scheduleContour;
			LevelingDelay = levelingDelay;
			IsOverAllocated = isOverAllocated;
			StatusTime = statusTime;
			ActualWork = actualWork;
			ActualUsage = actualUsage;
			ActualStart = actualStart;
			ActualFinish = actualFinish;
			RemainingWork = remainingWork;
			RemainingUsage = remainingUsage;
			Completion = completion;

		}
		public static new IfcResourceTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResourceTime>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrevolvedareasolid.htm"/>
	/// </summary>
	public  partial class IfcRevolvedAreaSolid : IfcSweptAreaSolid
	{
		public IfcAxis1Placement Axis{get;set;} 
		public IfcPlaneAngleMeasure Angle{get;set;} 

		/// <summary>
		/// Construct a IfcRevolvedAreaSolid with all required attributes.
		/// </summary>
		public IfcRevolvedAreaSolid(IfcProfileDef sweptArea,IfcAxis1Placement axis,IfcPlaneAngleMeasure angle):base(sweptArea)
		{
			Axis = axis;
			Angle = angle;

		}
		/// <summary>
		/// Construct a IfcRevolvedAreaSolid with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRevolvedAreaSolid(IfcProfileDef sweptArea,IfcAxis2Placement3D position,IfcAxis1Placement axis,IfcPlaneAngleMeasure angle):base(sweptArea,position)
		{
			Axis = axis;
			Angle = angle;

		}
		public static new IfcRevolvedAreaSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRevolvedAreaSolid>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrevolvedareasolidtapered.htm"/>
	/// </summary>
	public  partial class IfcRevolvedAreaSolidTapered : IfcRevolvedAreaSolid
	{
		public IfcProfileDef EndSweptArea{get;set;} 

		/// <summary>
		/// Construct a IfcRevolvedAreaSolidTapered with all required attributes.
		/// </summary>
		public IfcRevolvedAreaSolidTapered(IfcProfileDef sweptArea,IfcAxis1Placement axis,IfcPlaneAngleMeasure angle,IfcProfileDef endSweptArea):base(sweptArea,axis,angle)
		{
			EndSweptArea = endSweptArea;

		}
		/// <summary>
		/// Construct a IfcRevolvedAreaSolidTapered with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcRevolvedAreaSolidTapered(IfcProfileDef sweptArea,IfcAxis2Placement3D position,IfcAxis1Placement axis,IfcPlaneAngleMeasure angle,IfcProfileDef endSweptArea):base(sweptArea,position,axis,angle)
		{
			EndSweptArea = endSweptArea;

		}
		public static new IfcRevolvedAreaSolidTapered FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRevolvedAreaSolidTapered>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctasktime.htm"/>
	/// </summary>
	public  partial class IfcTaskTime : IfcSchedulingTime
	{
		public IfcTaskDurationEnum DurationType{get;set;} // optional
		public IfcDuration ScheduleDuration{get;set;} // optional
		public IfcDateTime ScheduleStart{get;set;} // optional
		public IfcDateTime ScheduleFinish{get;set;} // optional
		public IfcDateTime EarlyStart{get;set;} // optional
		public IfcDateTime EarlyFinish{get;set;} // optional
		public IfcDateTime LateStart{get;set;} // optional
		public IfcDateTime LateFinish{get;set;} // optional
		public IfcDuration FreeFloat{get;set;} // optional
		public IfcDuration TotalFloat{get;set;} // optional
		public bool IsCritical{get;set;} // optional
		public IfcDateTime StatusTime{get;set;} // optional
		public IfcDuration ActualDuration{get;set;} // optional
		public IfcDateTime ActualStart{get;set;} // optional
		public IfcDateTime ActualFinish{get;set;} // optional
		public IfcDuration RemainingTime{get;set;} // optional
		public IfcPositiveRatioMeasure Completion{get;set;} // optional

		/// <summary>
		/// Construct a IfcTaskTime with all required attributes.
		/// </summary>
		public IfcTaskTime():base()
		{

		}
		/// <summary>
		/// Construct a IfcTaskTime with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTaskTime(IfcLabel name,IfcDataOriginEnum dataOrigin,IfcLabel userDefinedDataOrigin,IfcTaskDurationEnum durationType,IfcDuration scheduleDuration,IfcDateTime scheduleStart,IfcDateTime scheduleFinish,IfcDateTime earlyStart,IfcDateTime earlyFinish,IfcDateTime lateStart,IfcDateTime lateFinish,IfcDuration freeFloat,IfcDuration totalFloat,bool isCritical,IfcDateTime statusTime,IfcDuration actualDuration,IfcDateTime actualStart,IfcDateTime actualFinish,IfcDuration remainingTime,IfcPositiveRatioMeasure completion):base(name,dataOrigin,userDefinedDataOrigin)
		{
			DurationType = durationType;
			ScheduleDuration = scheduleDuration;
			ScheduleStart = scheduleStart;
			ScheduleFinish = scheduleFinish;
			EarlyStart = earlyStart;
			EarlyFinish = earlyFinish;
			LateStart = lateStart;
			LateFinish = lateFinish;
			FreeFloat = freeFloat;
			TotalFloat = totalFloat;
			IsCritical = isCritical;
			StatusTime = statusTime;
			ActualDuration = actualDuration;
			ActualStart = actualStart;
			ActualFinish = actualFinish;
			RemainingTime = remainingTime;
			Completion = completion;

		}
		public static new IfcTaskTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTaskTime>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworktime.htm"/>
	/// </summary>
	public  partial class IfcWorkTime : IfcSchedulingTime
	{
		public IfcRecurrencePattern RecurrencePattern{get;set;} // optional
		public IfcDate Start{get;set;} // optional
		public IfcDate Finish{get;set;} // optional

		/// <summary>
		/// Construct a IfcWorkTime with all required attributes.
		/// </summary>
		public IfcWorkTime():base()
		{

		}
		/// <summary>
		/// Construct a IfcWorkTime with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWorkTime(IfcLabel name,IfcDataOriginEnum dataOrigin,IfcLabel userDefinedDataOrigin,IfcRecurrencePattern recurrencePattern,IfcDate start,IfcDate finish):base(name,dataOrigin,userDefinedDataOrigin)
		{
			RecurrencePattern = recurrencePattern;
			Start = start;
			Finish = finish;

		}
		public static new IfcWorkTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWorkTime>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshapeaspect.htm"/>
	/// </summary>
	public  partial class IfcShapeAspect : BaseIfc
	{
		public List<IfcShapeModel> ShapeRepresentations{get;set;} 
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public bool? ProductDefinitional{get;set;} 
		public IfcProductRepresentationSelect PartOfProductDefinitionShape{get;set;} // optional

		/// <summary>
		/// Construct a IfcShapeAspect with all required attributes.
		/// </summary>
		public IfcShapeAspect(List<IfcShapeModel> shapeRepresentations,bool? productDefinitional):base()
		{
			ShapeRepresentations = shapeRepresentations;
			ProductDefinitional = productDefinitional;

		}
		/// <summary>
		/// Construct a IfcShapeAspect with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcShapeAspect(List<IfcShapeModel> shapeRepresentations,IfcLabel name,IfcText description,bool? productDefinitional,IfcProductRepresentationSelect partOfProductDefinitionShape):base()
		{
			ShapeRepresentations = shapeRepresentations;
			Name = name;
			Description = description;
			ProductDefinitional = productDefinitional;
			PartOfProductDefinitionShape = partOfProductDefinitionShape;

		}
		public static  IfcShapeAspect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShapeAspect>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshaperepresentation.htm"/>
	/// </summary>
	public  partial class IfcShapeRepresentation : IfcShapeModel
	{
		/// <summary>
		/// Construct a IfcShapeRepresentation with all required attributes.
		/// </summary>
		public IfcShapeRepresentation(IfcRepresentationContext contextOfItems,List<IfcRepresentationItem> items):base(contextOfItems,items)
		{

		}
		/// <summary>
		/// Construct a IfcShapeRepresentation with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcShapeRepresentation(IfcRepresentationContext contextOfItems,IfcLabel representationIdentifier,IfcLabel representationType,List<IfcRepresentationItem> items):base(contextOfItems,representationIdentifier,representationType,items)
		{

		}
		public static new IfcShapeRepresentation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShapeRepresentation>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctopologyrepresentation.htm"/>
	/// </summary>
	public  partial class IfcTopologyRepresentation : IfcShapeModel
	{
		/// <summary>
		/// Construct a IfcTopologyRepresentation with all required attributes.
		/// </summary>
		public IfcTopologyRepresentation(IfcRepresentationContext contextOfItems,List<IfcRepresentationItem> items):base(contextOfItems,items)
		{

		}
		/// <summary>
		/// Construct a IfcTopologyRepresentation with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTopologyRepresentation(IfcRepresentationContext contextOfItems,IfcLabel representationIdentifier,IfcLabel representationType,List<IfcRepresentationItem> items):base(contextOfItems,representationIdentifier,representationType,items)
		{

		}
		public static new IfcTopologyRepresentation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTopologyRepresentation>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsite.htm"/>
	/// </summary>
	public  partial class IfcSite : IfcSpatialStructureElement
	{
		public IfcCompoundPlaneAngleMeasure RefLatitude{get;set;} // optional
		public IfcCompoundPlaneAngleMeasure RefLongitude{get;set;} // optional
		public IfcLengthMeasure RefElevation{get;set;} // optional
		public IfcLabel LandTitleNumber{get;set;} // optional
		public IfcPostalAddress SiteAddress{get;set;} // optional

		/// <summary>
		/// Construct a IfcSite with all required attributes.
		/// </summary>
		public IfcSite(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSite with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSite(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcLabel longName,IfcElementCompositionEnum compositionType,IfcCompoundPlaneAngleMeasure refLatitude,IfcCompoundPlaneAngleMeasure refLongitude,IfcLengthMeasure refElevation,IfcLabel landTitleNumber,IfcPostalAddress siteAddress):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,longName,compositionType)
		{
			RefLatitude = refLatitude;
			RefLongitude = refLongitude;
			RefElevation = refElevation;
			LandTitleNumber = landTitleNumber;
			SiteAddress = siteAddress;

		}
		public static new IfcSite FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSite>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcslabelementedcase.htm"/>
	/// </summary>
	public  partial class IfcSlabElementedCase : IfcSlab
	{
		/// <summary>
		/// Construct a IfcSlabElementedCase with all required attributes.
		/// </summary>
		public IfcSlabElementedCase(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSlabElementedCase with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSlabElementedCase(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcSlabTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,predefinedType)
		{

		}
		public static new IfcSlabElementedCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSlabElementedCase>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcslabstandardcase.htm"/>
	/// </summary>
	public  partial class IfcSlabStandardCase : IfcSlab
	{
		/// <summary>
		/// Construct a IfcSlabStandardCase with all required attributes.
		/// </summary>
		public IfcSlabStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSlabStandardCase with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSlabStandardCase(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcSlabTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,predefinedType)
		{

		}
		public static new IfcSlabStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSlabStandardCase>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcslippageconnectioncondition.htm"/>
	/// </summary>
	public  partial class IfcSlippageConnectionCondition : IfcStructuralConnectionCondition
	{
		public IfcLengthMeasure SlippageX{get;set;} // optional
		public IfcLengthMeasure SlippageY{get;set;} // optional
		public IfcLengthMeasure SlippageZ{get;set;} // optional

		/// <summary>
		/// Construct a IfcSlippageConnectionCondition with all required attributes.
		/// </summary>
		public IfcSlippageConnectionCondition():base()
		{

		}
		/// <summary>
		/// Construct a IfcSlippageConnectionCondition with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSlippageConnectionCondition(IfcLabel name,IfcLengthMeasure slippageX,IfcLengthMeasure slippageY,IfcLengthMeasure slippageZ):base(name)
		{
			SlippageX = slippageX;
			SlippageY = slippageY;
			SlippageZ = slippageZ;

		}
		public static new IfcSlippageConnectionCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSlippageConnectionCondition>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsweptdisksolid.htm"/>
	/// </summary>
	public  partial class IfcSweptDiskSolid : IfcSolidModel
	{
		public IfcCurve Directrix{get;set;} 
		public IfcPositiveLengthMeasure Radius{get;set;} 
		public IfcPositiveLengthMeasure InnerRadius{get;set;} // optional
		public IfcParameterValue StartParam{get;set;} // optional
		public IfcParameterValue EndParam{get;set;} // optional

		/// <summary>
		/// Construct a IfcSweptDiskSolid with all required attributes.
		/// </summary>
		public IfcSweptDiskSolid(IfcCurve directrix,IfcPositiveLengthMeasure radius):base()
		{
			Directrix = directrix;
			Radius = radius;

		}
		/// <summary>
		/// Construct a IfcSweptDiskSolid with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSweptDiskSolid(IfcCurve directrix,IfcPositiveLengthMeasure radius,IfcPositiveLengthMeasure innerRadius,IfcParameterValue startParam,IfcParameterValue endParam):base()
		{
			Directrix = directrix;
			Radius = radius;
			InnerRadius = innerRadius;
			StartParam = startParam;
			EndParam = endParam;

		}
		public static new IfcSweptDiskSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSweptDiskSolid>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspace.htm"/>
	/// </summary>
	public  partial class IfcSpace : IfcSpatialStructureElement
	{
		public IfcSpaceTypeEnum PredefinedType{get;set;} // optional
		public IfcLengthMeasure ElevationWithFlooring{get;set;} // optional

		/// <summary>
		/// Construct a IfcSpace with all required attributes.
		/// </summary>
		public IfcSpace(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSpace with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSpace(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcLabel longName,IfcElementCompositionEnum compositionType,IfcSpaceTypeEnum predefinedType,IfcLengthMeasure elevationWithFlooring):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,longName,compositionType)
		{
			PredefinedType = predefinedType;
			ElevationWithFlooring = elevationWithFlooring;

		}
		public static new IfcSpace FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpace>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspacetype.htm"/>
	/// </summary>
	public  partial class IfcSpaceType : IfcSpatialStructureElementType
	{
		public IfcSpaceTypeEnum PredefinedType{get;set;} 
		public IfcLabel LongName{get;set;} // optional

		/// <summary>
		/// Construct a IfcSpaceType with all required attributes.
		/// </summary>
		public IfcSpaceType(IfcGloballyUniqueId globalId,IfcSpaceTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcSpaceType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSpaceType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcSpaceTypeEnum predefinedType,IfcLabel longName):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;
			LongName = longName;

		}
		public static new IfcSpaceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpaceType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialstructureelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcSpatialStructureElementType : IfcSpatialElementType
	{
		/// <summary>
		/// Construct a IfcSpatialStructureElementType with all required attributes.
		/// </summary>
		public IfcSpatialStructureElementType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSpatialStructureElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSpatialStructureElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{

		}
		public static new IfcSpatialStructureElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpatialStructureElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialzone.htm"/>
	/// </summary>
	public  partial class IfcSpatialZone : IfcSpatialElement
	{
		public IfcSpatialZoneTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcSpatialZone with all required attributes.
		/// </summary>
		public IfcSpatialZone(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSpatialZone with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSpatialZone(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcLabel longName,IfcSpatialZoneTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,longName)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcSpatialZone FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpatialZone>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcSpatialElementType : IfcTypeProduct
	{
		public IfcLabel ElementType{get;set;} // optional

		/// <summary>
		/// Construct a IfcSpatialElementType with all required attributes.
		/// </summary>
		public IfcSpatialElementType(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcSpatialElementType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSpatialElementType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag)
		{
			ElementType = elementType;

		}
		public static new IfcSpatialElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpatialElementType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialzonetype.htm"/>
	/// </summary>
	public  partial class IfcSpatialZoneType : IfcSpatialElementType
	{
		public IfcSpatialZoneTypeEnum PredefinedType{get;set;} 
		public IfcLabel LongName{get;set;} // optional

		/// <summary>
		/// Construct a IfcSpatialZoneType with all required attributes.
		/// </summary>
		public IfcSpatialZoneType(IfcGloballyUniqueId globalId,IfcSpatialZoneTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcSpatialZoneType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSpatialZoneType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcLabel elementType,IfcSpatialZoneTypeEnum predefinedType,IfcLabel longName):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag,elementType)
		{
			PredefinedType = predefinedType;
			LongName = longName;

		}
		public static new IfcSpatialZoneType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpatialZoneType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralaction.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralAction : IfcStructuralActivity
	{
		public bool DestabilizingLoad{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralAction with all required attributes.
		/// </summary>
		public IfcStructuralAction(IfcGloballyUniqueId globalId,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal):base(globalId,appliedLoad,globalOrLocal)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralAction with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralAction(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,bool destabilizingLoad):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,appliedLoad,globalOrLocal)
		{
			DestabilizingLoad = destabilizingLoad;

		}
		public static new IfcStructuralAction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralAction>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurveaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralCurveAction : IfcStructuralAction
	{
		public IfcProjectedOrTrueLengthEnum ProjectedOrTrue{get;set;} // optional
		public IfcStructuralCurveActivityTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcStructuralCurveAction with all required attributes.
		/// </summary>
		public IfcStructuralCurveAction(IfcGloballyUniqueId globalId,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcStructuralCurveActivityTypeEnum predefinedType):base(globalId,appliedLoad,globalOrLocal)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcStructuralCurveAction with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralCurveAction(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,bool destabilizingLoad,IfcProjectedOrTrueLengthEnum projectedOrTrue,IfcStructuralCurveActivityTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,appliedLoad,globalOrLocal,destabilizingLoad)
		{
			ProjectedOrTrue = projectedOrTrue;
			PredefinedType = predefinedType;

		}
		public static new IfcStructuralCurveAction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralCurveAction>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralpointaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralPointAction : IfcStructuralAction
	{
		/// <summary>
		/// Construct a IfcStructuralPointAction with all required attributes.
		/// </summary>
		public IfcStructuralPointAction(IfcGloballyUniqueId globalId,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal):base(globalId,appliedLoad,globalOrLocal)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralPointAction with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralPointAction(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,bool destabilizingLoad):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,appliedLoad,globalOrLocal,destabilizingLoad)
		{

		}
		public static new IfcStructuralPointAction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralPointAction>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfaceaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralSurfaceAction : IfcStructuralAction
	{
		public IfcProjectedOrTrueLengthEnum ProjectedOrTrue{get;set;} // optional
		public IfcStructuralSurfaceActivityTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcStructuralSurfaceAction with all required attributes.
		/// </summary>
		public IfcStructuralSurfaceAction(IfcGloballyUniqueId globalId,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcStructuralSurfaceActivityTypeEnum predefinedType):base(globalId,appliedLoad,globalOrLocal)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcStructuralSurfaceAction with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralSurfaceAction(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,bool destabilizingLoad,IfcProjectedOrTrueLengthEnum projectedOrTrue,IfcStructuralSurfaceActivityTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,appliedLoad,globalOrLocal,destabilizingLoad)
		{
			ProjectedOrTrue = projectedOrTrue;
			PredefinedType = predefinedType;

		}
		public static new IfcStructuralSurfaceAction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralSurfaceAction>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralreaction.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralReaction : IfcStructuralActivity
	{
		/// <summary>
		/// Construct a IfcStructuralReaction with all required attributes.
		/// </summary>
		public IfcStructuralReaction(IfcGloballyUniqueId globalId,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal):base(globalId,appliedLoad,globalOrLocal)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralReaction with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralReaction(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,appliedLoad,globalOrLocal)
		{

		}
		public static new IfcStructuralReaction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralReaction>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralanalysismodel.htm"/>
	/// </summary>
	public  partial class IfcStructuralAnalysisModel : IfcSystem
	{
		public IfcAnalysisModelTypeEnum PredefinedType{get;set;} 
		public IfcAxis2Placement3D OrientationOf2DPlane{get;set;} // optional
		public List<IfcStructuralLoadGroup> LoadedBy{get;set;} // optional
		public List<IfcStructuralResultGroup> HasResults{get;set;} // optional
		public IfcObjectPlacement SharedPlacement{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralAnalysisModel with all required attributes.
		/// </summary>
		public IfcStructuralAnalysisModel(IfcGloballyUniqueId globalId,IfcAnalysisModelTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcStructuralAnalysisModel with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralAnalysisModel(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcAnalysisModelTypeEnum predefinedType,IfcAxis2Placement3D orientationOf2DPlane,List<IfcStructuralLoadGroup> loadedBy,List<IfcStructuralResultGroup> hasResults,IfcObjectPlacement sharedPlacement):base(globalId,ownerHistory,name,description,objectType)
		{
			PredefinedType = predefinedType;
			OrientationOf2DPlane = orientationOf2DPlane;
			LoadedBy = new List<IfcStructuralLoadGroup>();
			HasResults = new List<IfcStructuralResultGroup>();
			SharedPlacement = sharedPlacement;

		}
		public static new IfcStructuralAnalysisModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralAnalysisModel>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralconnection.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralConnection : IfcStructuralItem
	{
		public IfcBoundaryCondition AppliedCondition{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralConnection with all required attributes.
		/// </summary>
		public IfcStructuralConnection(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralConnection with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralConnection(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcBoundaryCondition appliedCondition):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation)
		{
			AppliedCondition = appliedCondition;

		}
		public static new IfcStructuralConnection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralConnection>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurveconnection.htm"/>
	/// </summary>
	public  partial class IfcStructuralCurveConnection : IfcStructuralConnection
	{
		public IfcDirection Axis{get;set;} 

		/// <summary>
		/// Construct a IfcStructuralCurveConnection with all required attributes.
		/// </summary>
		public IfcStructuralCurveConnection(IfcGloballyUniqueId globalId,IfcDirection axis):base(globalId)
		{
			Axis = axis;

		}
		/// <summary>
		/// Construct a IfcStructuralCurveConnection with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralCurveConnection(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcBoundaryCondition appliedCondition,IfcDirection axis):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,appliedCondition)
		{
			Axis = axis;

		}
		public static new IfcStructuralCurveConnection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralCurveConnection>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralpointconnection.htm"/>
	/// </summary>
	public  partial class IfcStructuralPointConnection : IfcStructuralConnection
	{
		public IfcAxis2Placement3D ConditionCoordinateSystem{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralPointConnection with all required attributes.
		/// </summary>
		public IfcStructuralPointConnection(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralPointConnection with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralPointConnection(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcBoundaryCondition appliedCondition,IfcAxis2Placement3D conditionCoordinateSystem):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,appliedCondition)
		{
			ConditionCoordinateSystem = conditionCoordinateSystem;

		}
		public static new IfcStructuralPointConnection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralPointConnection>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfaceconnection.htm"/>
	/// </summary>
	public  partial class IfcStructuralSurfaceConnection : IfcStructuralConnection
	{
		/// <summary>
		/// Construct a IfcStructuralSurfaceConnection with all required attributes.
		/// </summary>
		public IfcStructuralSurfaceConnection(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralSurfaceConnection with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralSurfaceConnection(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcBoundaryCondition appliedCondition):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,appliedCondition)
		{

		}
		public static new IfcStructuralSurfaceConnection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralSurfaceConnection>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructurallinearaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralLinearAction : IfcStructuralCurveAction
	{
		/// <summary>
		/// Construct a IfcStructuralLinearAction with all required attributes.
		/// </summary>
		public IfcStructuralLinearAction(IfcGloballyUniqueId globalId,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcStructuralCurveActivityTypeEnum predefinedType):base(globalId,appliedLoad,globalOrLocal,predefinedType)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralLinearAction with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLinearAction(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,bool destabilizingLoad,IfcProjectedOrTrueLengthEnum projectedOrTrue,IfcStructuralCurveActivityTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,appliedLoad,globalOrLocal,destabilizingLoad,projectedOrTrue,predefinedType)
		{

		}
		public static new IfcStructuralLinearAction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLinearAction>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurvemember.htm"/>
	/// </summary>
	public  partial class IfcStructuralCurveMember : IfcStructuralMember
	{
		public IfcStructuralCurveMemberTypeEnum PredefinedType{get;set;} 
		public IfcDirection Axis{get;set;} 

		/// <summary>
		/// Construct a IfcStructuralCurveMember with all required attributes.
		/// </summary>
		public IfcStructuralCurveMember(IfcGloballyUniqueId globalId,IfcStructuralCurveMemberTypeEnum predefinedType,IfcDirection axis):base(globalId)
		{
			PredefinedType = predefinedType;
			Axis = axis;

		}
		/// <summary>
		/// Construct a IfcStructuralCurveMember with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralCurveMember(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralCurveMemberTypeEnum predefinedType,IfcDirection axis):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation)
		{
			PredefinedType = predefinedType;
			Axis = axis;

		}
		public static new IfcStructuralCurveMember FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralCurveMember>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurvemembervarying.htm"/>
	/// </summary>
	public  partial class IfcStructuralCurveMemberVarying : IfcStructuralCurveMember
	{
		/// <summary>
		/// Construct a IfcStructuralCurveMemberVarying with all required attributes.
		/// </summary>
		public IfcStructuralCurveMemberVarying(IfcGloballyUniqueId globalId,IfcStructuralCurveMemberTypeEnum predefinedType,IfcDirection axis):base(globalId,predefinedType,axis)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralCurveMemberVarying with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralCurveMemberVarying(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralCurveMemberTypeEnum predefinedType,IfcDirection axis):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,predefinedType,axis)
		{

		}
		public static new IfcStructuralCurveMemberVarying FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralCurveMemberVarying>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralmember.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralMember : IfcStructuralItem
	{
		/// <summary>
		/// Construct a IfcStructuralMember with all required attributes.
		/// </summary>
		public IfcStructuralMember(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralMember with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralMember(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation)
		{

		}
		public static new IfcStructuralMember FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralMember>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurvereaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralCurveReaction : IfcStructuralReaction
	{
		public IfcStructuralCurveActivityTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcStructuralCurveReaction with all required attributes.
		/// </summary>
		public IfcStructuralCurveReaction(IfcGloballyUniqueId globalId,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcStructuralCurveActivityTypeEnum predefinedType):base(globalId,appliedLoad,globalOrLocal)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcStructuralCurveReaction with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralCurveReaction(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcStructuralCurveActivityTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,appliedLoad,globalOrLocal)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcStructuralCurveReaction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralCurveReaction>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralload.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralLoad : BaseIfc
	{
		public IfcLabel Name{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralLoad with all required attributes.
		/// </summary>
		public IfcStructuralLoad():base()
		{

		}
		/// <summary>
		/// Construct a IfcStructuralLoad with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLoad(IfcLabel name):base()
		{
			Name = name;

		}
		public static  IfcStructuralLoad FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoad>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadconfiguration.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadConfiguration : IfcStructuralLoad
	{
		public List<IfcStructuralLoadOrResult> Values{get;set;} 
		public List<List<IfcLengthMeasure>> Locations{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralLoadConfiguration with all required attributes.
		/// </summary>
		public IfcStructuralLoadConfiguration(List<IfcStructuralLoadOrResult> values):base()
		{
			Values = values;

		}
		/// <summary>
		/// Construct a IfcStructuralLoadConfiguration with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLoadConfiguration(IfcLabel name,List<IfcStructuralLoadOrResult> values,List<List<IfcLengthMeasure>> locations):base(name)
		{
			Values = values;
			Locations = new List<List<IfcLengthMeasure>>();

		}
		public static new IfcStructuralLoadConfiguration FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadConfiguration>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadorresult.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralLoadOrResult : IfcStructuralLoad
	{
		/// <summary>
		/// Construct a IfcStructuralLoadOrResult with all required attributes.
		/// </summary>
		public IfcStructuralLoadOrResult():base()
		{

		}
		/// <summary>
		/// Construct a IfcStructuralLoadOrResult with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLoadOrResult(IfcLabel name):base(name)
		{

		}
		public static new IfcStructuralLoadOrResult FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadOrResult>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadcase.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadCase : IfcStructuralLoadGroup
	{
		public List<IfcRatioMeasure> SelfWeightCoefficients{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralLoadCase with all required attributes.
		/// </summary>
		public IfcStructuralLoadCase(IfcGloballyUniqueId globalId,IfcLoadGroupTypeEnum predefinedType,IfcActionTypeEnum actionType,IfcActionSourceTypeEnum actionSource):base(globalId,predefinedType,actionType,actionSource)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralLoadCase with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLoadCase(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcLoadGroupTypeEnum predefinedType,IfcActionTypeEnum actionType,IfcActionSourceTypeEnum actionSource,IfcRatioMeasure coefficient,IfcLabel purpose,List<IfcRatioMeasure> selfWeightCoefficients):base(globalId,ownerHistory,name,description,objectType,predefinedType,actionType,actionSource,coefficient,purpose)
		{
			SelfWeightCoefficients = new List<IfcRatioMeasure>();

		}
		public static new IfcStructuralLoadCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadCase>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadlinearforce.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadLinearForce : IfcStructuralLoadStatic
	{
		public IfcLinearForceMeasure LinearForceX{get;set;} // optional
		public IfcLinearForceMeasure LinearForceY{get;set;} // optional
		public IfcLinearForceMeasure LinearForceZ{get;set;} // optional
		public IfcLinearMomentMeasure LinearMomentX{get;set;} // optional
		public IfcLinearMomentMeasure LinearMomentY{get;set;} // optional
		public IfcLinearMomentMeasure LinearMomentZ{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralLoadLinearForce with all required attributes.
		/// </summary>
		public IfcStructuralLoadLinearForce():base()
		{

		}
		/// <summary>
		/// Construct a IfcStructuralLoadLinearForce with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLoadLinearForce(IfcLabel name,IfcLinearForceMeasure linearForceX,IfcLinearForceMeasure linearForceY,IfcLinearForceMeasure linearForceZ,IfcLinearMomentMeasure linearMomentX,IfcLinearMomentMeasure linearMomentY,IfcLinearMomentMeasure linearMomentZ):base(name)
		{
			LinearForceX = linearForceX;
			LinearForceY = linearForceY;
			LinearForceZ = linearForceZ;
			LinearMomentX = linearMomentX;
			LinearMomentY = linearMomentY;
			LinearMomentZ = linearMomentZ;

		}
		public static new IfcStructuralLoadLinearForce FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadLinearForce>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadstatic.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralLoadStatic : IfcStructuralLoadOrResult
	{
		/// <summary>
		/// Construct a IfcStructuralLoadStatic with all required attributes.
		/// </summary>
		public IfcStructuralLoadStatic():base()
		{

		}
		/// <summary>
		/// Construct a IfcStructuralLoadStatic with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLoadStatic(IfcLabel name):base(name)
		{

		}
		public static new IfcStructuralLoadStatic FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadStatic>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacereinforcementarea.htm"/>
	/// </summary>
	public  partial class IfcSurfaceReinforcementArea : IfcStructuralLoadOrResult
	{
		public List<IfcLengthMeasure> SurfaceReinforcement1{get;set;} // optional
		public List<IfcLengthMeasure> SurfaceReinforcement2{get;set;} // optional
		public IfcRatioMeasure ShearReinforcement{get;set;} // optional

		/// <summary>
		/// Construct a IfcSurfaceReinforcementArea with all required attributes.
		/// </summary>
		public IfcSurfaceReinforcementArea():base()
		{

		}
		/// <summary>
		/// Construct a IfcSurfaceReinforcementArea with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSurfaceReinforcementArea(IfcLabel name,List<IfcLengthMeasure> surfaceReinforcement1,List<IfcLengthMeasure> surfaceReinforcement2,IfcRatioMeasure shearReinforcement):base(name)
		{
			SurfaceReinforcement1 = new List<IfcLengthMeasure>();
			SurfaceReinforcement2 = new List<IfcLengthMeasure>();
			ShearReinforcement = shearReinforcement;

		}
		public static new IfcSurfaceReinforcementArea FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceReinforcementArea>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadplanarforce.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadPlanarForce : IfcStructuralLoadStatic
	{
		public IfcPlanarForceMeasure PlanarForceX{get;set;} // optional
		public IfcPlanarForceMeasure PlanarForceY{get;set;} // optional
		public IfcPlanarForceMeasure PlanarForceZ{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralLoadPlanarForce with all required attributes.
		/// </summary>
		public IfcStructuralLoadPlanarForce():base()
		{

		}
		/// <summary>
		/// Construct a IfcStructuralLoadPlanarForce with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLoadPlanarForce(IfcLabel name,IfcPlanarForceMeasure planarForceX,IfcPlanarForceMeasure planarForceY,IfcPlanarForceMeasure planarForceZ):base(name)
		{
			PlanarForceX = planarForceX;
			PlanarForceY = planarForceY;
			PlanarForceZ = planarForceZ;

		}
		public static new IfcStructuralLoadPlanarForce FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadPlanarForce>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadsingledisplacement.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadSingleDisplacement : IfcStructuralLoadStatic
	{
		public IfcLengthMeasure DisplacementX{get;set;} // optional
		public IfcLengthMeasure DisplacementY{get;set;} // optional
		public IfcLengthMeasure DisplacementZ{get;set;} // optional
		public IfcPlaneAngleMeasure RotationalDisplacementRX{get;set;} // optional
		public IfcPlaneAngleMeasure RotationalDisplacementRY{get;set;} // optional
		public IfcPlaneAngleMeasure RotationalDisplacementRZ{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralLoadSingleDisplacement with all required attributes.
		/// </summary>
		public IfcStructuralLoadSingleDisplacement():base()
		{

		}
		/// <summary>
		/// Construct a IfcStructuralLoadSingleDisplacement with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLoadSingleDisplacement(IfcLabel name,IfcLengthMeasure displacementX,IfcLengthMeasure displacementY,IfcLengthMeasure displacementZ,IfcPlaneAngleMeasure rotationalDisplacementRX,IfcPlaneAngleMeasure rotationalDisplacementRY,IfcPlaneAngleMeasure rotationalDisplacementRZ):base(name)
		{
			DisplacementX = displacementX;
			DisplacementY = displacementY;
			DisplacementZ = displacementZ;
			RotationalDisplacementRX = rotationalDisplacementRX;
			RotationalDisplacementRY = rotationalDisplacementRY;
			RotationalDisplacementRZ = rotationalDisplacementRZ;

		}
		public static new IfcStructuralLoadSingleDisplacement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadSingleDisplacement>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadsingledisplacementdistortion.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadSingleDisplacementDistortion : IfcStructuralLoadSingleDisplacement
	{
		public IfcCurvatureMeasure Distortion{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralLoadSingleDisplacementDistortion with all required attributes.
		/// </summary>
		public IfcStructuralLoadSingleDisplacementDistortion():base()
		{

		}
		/// <summary>
		/// Construct a IfcStructuralLoadSingleDisplacementDistortion with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLoadSingleDisplacementDistortion(IfcLabel name,IfcLengthMeasure displacementX,IfcLengthMeasure displacementY,IfcLengthMeasure displacementZ,IfcPlaneAngleMeasure rotationalDisplacementRX,IfcPlaneAngleMeasure rotationalDisplacementRY,IfcPlaneAngleMeasure rotationalDisplacementRZ,IfcCurvatureMeasure distortion):base(name,displacementX,displacementY,displacementZ,rotationalDisplacementRX,rotationalDisplacementRY,rotationalDisplacementRZ)
		{
			Distortion = distortion;

		}
		public static new IfcStructuralLoadSingleDisplacementDistortion FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadSingleDisplacementDistortion>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadsingleforce.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadSingleForce : IfcStructuralLoadStatic
	{
		public IfcForceMeasure ForceX{get;set;} // optional
		public IfcForceMeasure ForceY{get;set;} // optional
		public IfcForceMeasure ForceZ{get;set;} // optional
		public IfcTorqueMeasure MomentX{get;set;} // optional
		public IfcTorqueMeasure MomentY{get;set;} // optional
		public IfcTorqueMeasure MomentZ{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralLoadSingleForce with all required attributes.
		/// </summary>
		public IfcStructuralLoadSingleForce():base()
		{

		}
		/// <summary>
		/// Construct a IfcStructuralLoadSingleForce with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLoadSingleForce(IfcLabel name,IfcForceMeasure forceX,IfcForceMeasure forceY,IfcForceMeasure forceZ,IfcTorqueMeasure momentX,IfcTorqueMeasure momentY,IfcTorqueMeasure momentZ):base(name)
		{
			ForceX = forceX;
			ForceY = forceY;
			ForceZ = forceZ;
			MomentX = momentX;
			MomentY = momentY;
			MomentZ = momentZ;

		}
		public static new IfcStructuralLoadSingleForce FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadSingleForce>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadsingleforcewarping.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadSingleForceWarping : IfcStructuralLoadSingleForce
	{
		public IfcWarpingMomentMeasure WarpingMoment{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralLoadSingleForceWarping with all required attributes.
		/// </summary>
		public IfcStructuralLoadSingleForceWarping():base()
		{

		}
		/// <summary>
		/// Construct a IfcStructuralLoadSingleForceWarping with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLoadSingleForceWarping(IfcLabel name,IfcForceMeasure forceX,IfcForceMeasure forceY,IfcForceMeasure forceZ,IfcTorqueMeasure momentX,IfcTorqueMeasure momentY,IfcTorqueMeasure momentZ,IfcWarpingMomentMeasure warpingMoment):base(name,forceX,forceY,forceZ,momentX,momentY,momentZ)
		{
			WarpingMoment = warpingMoment;

		}
		public static new IfcStructuralLoadSingleForceWarping FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadSingleForceWarping>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadtemperature.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadTemperature : IfcStructuralLoadStatic
	{
		public IfcThermodynamicTemperatureMeasure DeltaTConstant{get;set;} // optional
		public IfcThermodynamicTemperatureMeasure DeltaTY{get;set;} // optional
		public IfcThermodynamicTemperatureMeasure DeltaTZ{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralLoadTemperature with all required attributes.
		/// </summary>
		public IfcStructuralLoadTemperature():base()
		{

		}
		/// <summary>
		/// Construct a IfcStructuralLoadTemperature with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralLoadTemperature(IfcLabel name,IfcThermodynamicTemperatureMeasure deltaTConstant,IfcThermodynamicTemperatureMeasure deltaTY,IfcThermodynamicTemperatureMeasure deltaTZ):base(name)
		{
			DeltaTConstant = deltaTConstant;
			DeltaTY = deltaTY;
			DeltaTZ = deltaTZ;

		}
		public static new IfcStructuralLoadTemperature FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadTemperature>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfacemember.htm"/>
	/// </summary>
	public  partial class IfcStructuralSurfaceMember : IfcStructuralMember
	{
		public IfcStructuralSurfaceMemberTypeEnum PredefinedType{get;set;} 
		public IfcPositiveLengthMeasure Thickness{get;set;} // optional

		/// <summary>
		/// Construct a IfcStructuralSurfaceMember with all required attributes.
		/// </summary>
		public IfcStructuralSurfaceMember(IfcGloballyUniqueId globalId,IfcStructuralSurfaceMemberTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcStructuralSurfaceMember with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralSurfaceMember(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralSurfaceMemberTypeEnum predefinedType,IfcPositiveLengthMeasure thickness):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation)
		{
			PredefinedType = predefinedType;
			Thickness = thickness;

		}
		public static new IfcStructuralSurfaceMember FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralSurfaceMember>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralplanaraction.htm"/>
	/// </summary>
	public  partial class IfcStructuralPlanarAction : IfcStructuralSurfaceAction
	{
		/// <summary>
		/// Construct a IfcStructuralPlanarAction with all required attributes.
		/// </summary>
		public IfcStructuralPlanarAction(IfcGloballyUniqueId globalId,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcStructuralSurfaceActivityTypeEnum predefinedType):base(globalId,appliedLoad,globalOrLocal,predefinedType)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralPlanarAction with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralPlanarAction(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,bool destabilizingLoad,IfcProjectedOrTrueLengthEnum projectedOrTrue,IfcStructuralSurfaceActivityTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,appliedLoad,globalOrLocal,destabilizingLoad,projectedOrTrue,predefinedType)
		{

		}
		public static new IfcStructuralPlanarAction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralPlanarAction>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralpointreaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralPointReaction : IfcStructuralReaction
	{
		/// <summary>
		/// Construct a IfcStructuralPointReaction with all required attributes.
		/// </summary>
		public IfcStructuralPointReaction(IfcGloballyUniqueId globalId,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal):base(globalId,appliedLoad,globalOrLocal)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralPointReaction with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralPointReaction(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,appliedLoad,globalOrLocal)
		{

		}
		public static new IfcStructuralPointReaction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralPointReaction>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfacereaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralSurfaceReaction : IfcStructuralReaction
	{
		public IfcStructuralSurfaceActivityTypeEnum PredefinedType{get;set;} 

		/// <summary>
		/// Construct a IfcStructuralSurfaceReaction with all required attributes.
		/// </summary>
		public IfcStructuralSurfaceReaction(IfcGloballyUniqueId globalId,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcStructuralSurfaceActivityTypeEnum predefinedType):base(globalId,appliedLoad,globalOrLocal)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcStructuralSurfaceReaction with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralSurfaceReaction(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcStructuralSurfaceActivityTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,appliedLoad,globalOrLocal)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcStructuralSurfaceReaction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralSurfaceReaction>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfacemembervarying.htm"/>
	/// </summary>
	public  partial class IfcStructuralSurfaceMemberVarying : IfcStructuralSurfaceMember
	{
		/// <summary>
		/// Construct a IfcStructuralSurfaceMemberVarying with all required attributes.
		/// </summary>
		public IfcStructuralSurfaceMemberVarying(IfcGloballyUniqueId globalId,IfcStructuralSurfaceMemberTypeEnum predefinedType):base(globalId,predefinedType)
		{

		}
		/// <summary>
		/// Construct a IfcStructuralSurfaceMemberVarying with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStructuralSurfaceMemberVarying(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcStructuralSurfaceMemberTypeEnum predefinedType,IfcPositiveLengthMeasure thickness):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,predefinedType,thickness)
		{

		}
		public static new IfcStructuralSurfaceMemberVarying FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralSurfaceMemberVarying>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstyledrepresentation.htm"/>
	/// </summary>
	public  partial class IfcStyledRepresentation : IfcStyleModel
	{
		/// <summary>
		/// Construct a IfcStyledRepresentation with all required attributes.
		/// </summary>
		public IfcStyledRepresentation(IfcRepresentationContext contextOfItems,List<IfcRepresentationItem> items):base(contextOfItems,items)
		{

		}
		/// <summary>
		/// Construct a IfcStyledRepresentation with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcStyledRepresentation(IfcRepresentationContext contextOfItems,IfcLabel representationIdentifier,IfcLabel representationType,List<IfcRepresentationItem> items):base(contextOfItems,representationIdentifier,representationType,items)
		{

		}
		public static new IfcStyledRepresentation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStyledRepresentation>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsweptsurface.htm"/>
	/// </summary>
	public abstract partial class IfcSweptSurface : IfcSurface
	{
		public IfcProfileDef SweptCurve{get;set;} 
		public IfcAxis2Placement3D Position{get;set;} // optional

		/// <summary>
		/// Construct a IfcSweptSurface with all required attributes.
		/// </summary>
		public IfcSweptSurface(IfcProfileDef sweptCurve):base()
		{
			SweptCurve = sweptCurve;

		}
		/// <summary>
		/// Construct a IfcSweptSurface with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSweptSurface(IfcProfileDef sweptCurve,IfcAxis2Placement3D position):base()
		{
			SweptCurve = sweptCurve;
			Position = position;

		}
		public static new IfcSweptSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSweptSurface>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacecurvesweptareasolid.htm"/>
	/// </summary>
	public  partial class IfcSurfaceCurveSweptAreaSolid : IfcSweptAreaSolid
	{
		public IfcCurve Directrix{get;set;} 
		public IfcParameterValue StartParam{get;set;} // optional
		public IfcParameterValue EndParam{get;set;} // optional
		public IfcSurface ReferenceSurface{get;set;} 

		/// <summary>
		/// Construct a IfcSurfaceCurveSweptAreaSolid with all required attributes.
		/// </summary>
		public IfcSurfaceCurveSweptAreaSolid(IfcProfileDef sweptArea,IfcCurve directrix,IfcSurface referenceSurface):base(sweptArea)
		{
			Directrix = directrix;
			ReferenceSurface = referenceSurface;

		}
		/// <summary>
		/// Construct a IfcSurfaceCurveSweptAreaSolid with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSurfaceCurveSweptAreaSolid(IfcProfileDef sweptArea,IfcAxis2Placement3D position,IfcCurve directrix,IfcParameterValue startParam,IfcParameterValue endParam,IfcSurface referenceSurface):base(sweptArea,position)
		{
			Directrix = directrix;
			StartParam = startParam;
			EndParam = endParam;
			ReferenceSurface = referenceSurface;

		}
		public static new IfcSurfaceCurveSweptAreaSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceCurveSweptAreaSolid>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfaceoflinearextrusion.htm"/>
	/// </summary>
	public  partial class IfcSurfaceOfLinearExtrusion : IfcSweptSurface
	{
		public IfcDirection ExtrudedDirection{get;set;} 
		public IfcLengthMeasure Depth{get;set;} 

		/// <summary>
		/// Construct a IfcSurfaceOfLinearExtrusion with all required attributes.
		/// </summary>
		public IfcSurfaceOfLinearExtrusion(IfcProfileDef sweptCurve,IfcDirection extrudedDirection,IfcLengthMeasure depth):base(sweptCurve)
		{
			ExtrudedDirection = extrudedDirection;
			Depth = depth;

		}
		/// <summary>
		/// Construct a IfcSurfaceOfLinearExtrusion with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSurfaceOfLinearExtrusion(IfcProfileDef sweptCurve,IfcAxis2Placement3D position,IfcDirection extrudedDirection,IfcLengthMeasure depth):base(sweptCurve,position)
		{
			ExtrudedDirection = extrudedDirection;
			Depth = depth;

		}
		public static new IfcSurfaceOfLinearExtrusion FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceOfLinearExtrusion>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfaceofrevolution.htm"/>
	/// </summary>
	public  partial class IfcSurfaceOfRevolution : IfcSweptSurface
	{
		public IfcAxis1Placement AxisPosition{get;set;} 

		/// <summary>
		/// Construct a IfcSurfaceOfRevolution with all required attributes.
		/// </summary>
		public IfcSurfaceOfRevolution(IfcProfileDef sweptCurve,IfcAxis1Placement axisPosition):base(sweptCurve)
		{
			AxisPosition = axisPosition;

		}
		/// <summary>
		/// Construct a IfcSurfaceOfRevolution with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSurfaceOfRevolution(IfcProfileDef sweptCurve,IfcAxis2Placement3D position,IfcAxis1Placement axisPosition):base(sweptCurve,position)
		{
			AxisPosition = axisPosition;

		}
		public static new IfcSurfaceOfRevolution FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceOfRevolution>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestylerendering.htm"/>
	/// </summary>
	public  partial class IfcSurfaceStyleRendering : IfcSurfaceStyleShading
	{
		public IfcNormalisedRatioMeasure Transparency{get;set;} // optional
		public IfcColourOrFactor DiffuseColour{get;set;} // optional
		public IfcColourOrFactor TransmissionColour{get;set;} // optional
		public IfcColourOrFactor DiffuseTransmissionColour{get;set;} // optional
		public IfcColourOrFactor ReflectionColour{get;set;} // optional
		public IfcColourOrFactor SpecularColour{get;set;} // optional
		public IfcSpecularHighlightSelect SpecularHighlight{get;set;} // optional
		public IfcReflectanceMethodEnum ReflectanceMethod{get;set;} 

		/// <summary>
		/// Construct a IfcSurfaceStyleRendering with all required attributes.
		/// </summary>
		public IfcSurfaceStyleRendering(IfcColourRgb surfaceColour,IfcReflectanceMethodEnum reflectanceMethod):base(surfaceColour)
		{
			ReflectanceMethod = reflectanceMethod;

		}
		/// <summary>
		/// Construct a IfcSurfaceStyleRendering with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSurfaceStyleRendering(IfcColourRgb surfaceColour,IfcNormalisedRatioMeasure transparency,IfcColourOrFactor diffuseColour,IfcColourOrFactor transmissionColour,IfcColourOrFactor diffuseTransmissionColour,IfcColourOrFactor reflectionColour,IfcColourOrFactor specularColour,IfcSpecularHighlightSelect specularHighlight,IfcReflectanceMethodEnum reflectanceMethod):base(surfaceColour)
		{
			Transparency = transparency;
			DiffuseColour = diffuseColour;
			TransmissionColour = transmissionColour;
			DiffuseTransmissionColour = diffuseTransmissionColour;
			ReflectionColour = reflectionColour;
			SpecularColour = specularColour;
			SpecularHighlight = specularHighlight;
			ReflectanceMethod = reflectanceMethod;

		}
		public static new IfcSurfaceStyleRendering FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyleRendering>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsweptdisksolidpolygonal.htm"/>
	/// </summary>
	public  partial class IfcSweptDiskSolidPolygonal : IfcSweptDiskSolid
	{
		public IfcPositiveLengthMeasure FilletRadius{get;set;} // optional

		/// <summary>
		/// Construct a IfcSweptDiskSolidPolygonal with all required attributes.
		/// </summary>
		public IfcSweptDiskSolidPolygonal(IfcCurve directrix,IfcPositiveLengthMeasure radius):base(directrix,radius)
		{

		}
		/// <summary>
		/// Construct a IfcSweptDiskSolidPolygonal with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcSweptDiskSolidPolygonal(IfcCurve directrix,IfcPositiveLengthMeasure radius,IfcPositiveLengthMeasure innerRadius,IfcParameterValue startParam,IfcParameterValue endParam,IfcPositiveLengthMeasure filletRadius):base(directrix,radius,innerRadius,startParam,endParam)
		{
			FilletRadius = filletRadius;

		}
		public static new IfcSweptDiskSolidPolygonal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSweptDiskSolidPolygonal>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifczone.htm"/>
	/// </summary>
	public  partial class IfcZone : IfcSystem
	{
		public IfcLabel LongName{get;set;} // optional

		/// <summary>
		/// Construct a IfcZone with all required attributes.
		/// </summary>
		public IfcZone(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcZone with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcZone(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcLabel longName):base(globalId,ownerHistory,name,description,objectType)
		{
			LongName = longName;

		}
		public static new IfcZone FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcZone>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctable.htm"/>
	/// </summary>
	public  partial class IfcTable : BaseIfc
	{
		public IfcLabel Name{get;set;} // optional
		public List<IfcTableRow> Rows{get;set;} // optional
		public List<IfcTableColumn> Columns{get;set;} // optional

		/// <summary>
		/// Construct a IfcTable with all required attributes.
		/// </summary>
		public IfcTable():base()
		{

		}
		/// <summary>
		/// Construct a IfcTable with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTable(IfcLabel name,List<IfcTableRow> rows,List<IfcTableColumn> columns):base()
		{
			Name = name;
			Rows = new List<IfcTableRow>();
			Columns = new List<IfcTableColumn>();

		}
		public static  IfcTable FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTable>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctablecolumn.htm"/>
	/// </summary>
	public  partial class IfcTableColumn : BaseIfc
	{
		public IfcIdentifier Identifier{get;set;} // optional
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcUnit Unit{get;set;} // optional
		public IfcReference ReferencePath{get;set;} // optional

		/// <summary>
		/// Construct a IfcTableColumn with all required attributes.
		/// </summary>
		public IfcTableColumn():base()
		{

		}
		/// <summary>
		/// Construct a IfcTableColumn with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTableColumn(IfcIdentifier identifier,IfcLabel name,IfcText description,IfcUnit unit,IfcReference referencePath):base()
		{
			Identifier = identifier;
			Name = name;
			Description = description;
			Unit = unit;
			ReferencePath = referencePath;

		}
		public static  IfcTableColumn FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTableColumn>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctablerow.htm"/>
	/// </summary>
	public  partial class IfcTableRow : BaseIfc
	{
		public List<IfcValue> RowCells{get;set;} // optional
		public bool IsHeading{get;set;} // optional

		/// <summary>
		/// Construct a IfcTableRow with all required attributes.
		/// </summary>
		public IfcTableRow():base()
		{

		}
		/// <summary>
		/// Construct a IfcTableRow with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTableRow(List<IfcValue> rowCells,bool isHeading):base()
		{
			RowCells = new List<IfcValue>();
			IsHeading = isHeading;

		}
		public static  IfcTableRow FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTableRow>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctasktimerecurring.htm"/>
	/// </summary>
	public  partial class IfcTaskTimeRecurring : IfcTaskTime
	{
		public IfcRecurrencePattern Recurrance{get;set;} 

		/// <summary>
		/// Construct a IfcTaskTimeRecurring with all required attributes.
		/// </summary>
		public IfcTaskTimeRecurring(IfcRecurrencePattern recurrance):base()
		{
			Recurrance = recurrance;

		}
		/// <summary>
		/// Construct a IfcTaskTimeRecurring with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTaskTimeRecurring(IfcLabel name,IfcDataOriginEnum dataOrigin,IfcLabel userDefinedDataOrigin,IfcTaskDurationEnum durationType,IfcDuration scheduleDuration,IfcDateTime scheduleStart,IfcDateTime scheduleFinish,IfcDateTime earlyStart,IfcDateTime earlyFinish,IfcDateTime lateStart,IfcDateTime lateFinish,IfcDuration freeFloat,IfcDuration totalFloat,bool isCritical,IfcDateTime statusTime,IfcDuration actualDuration,IfcDateTime actualStart,IfcDateTime actualFinish,IfcDuration remainingTime,IfcPositiveRatioMeasure completion,IfcRecurrencePattern recurrance):base(name,dataOrigin,userDefinedDataOrigin,durationType,scheduleDuration,scheduleStart,scheduleFinish,earlyStart,earlyFinish,lateStart,lateFinish,freeFloat,totalFloat,isCritical,statusTime,actualDuration,actualStart,actualFinish,remainingTime,completion)
		{
			Recurrance = recurrance;

		}
		public static new IfcTaskTimeRecurring FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTaskTimeRecurring>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctasktype.htm"/>
	/// </summary>
	public  partial class IfcTaskType : IfcTypeProcess
	{
		public IfcTaskTypeEnum PredefinedType{get;set;} 
		public IfcLabel WorkMethod{get;set;} // optional

		/// <summary>
		/// Construct a IfcTaskType with all required attributes.
		/// </summary>
		public IfcTaskType(IfcGloballyUniqueId globalId,IfcTaskTypeEnum predefinedType):base(globalId)
		{
			PredefinedType = predefinedType;

		}
		/// <summary>
		/// Construct a IfcTaskType with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTaskType(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,IfcIdentifier identification,IfcText longDescription,IfcLabel processType,IfcTaskTypeEnum predefinedType,IfcLabel workMethod):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,identification,longDescription,processType)
		{
			PredefinedType = predefinedType;
			WorkMethod = workMethod;

		}
		public static new IfcTaskType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTaskType>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctessellatedfaceset.htm"/>
	/// </summary>
	public abstract partial class IfcTessellatedFaceSet : IfcTessellatedItem
	{
		public IfcCartesianPointList3D Coordinates{get;set;} 
		public List<List<IfcParameterValue>> Normals{get;set;} // optional
		public bool Closed{get;set;} // optional

		/// <summary>
		/// Construct a IfcTessellatedFaceSet with all required attributes.
		/// </summary>
		public IfcTessellatedFaceSet(IfcCartesianPointList3D coordinates):base()
		{
			Coordinates = coordinates;

		}
		/// <summary>
		/// Construct a IfcTessellatedFaceSet with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTessellatedFaceSet(IfcCartesianPointList3D coordinates,List<List<IfcParameterValue>> normals,bool closed):base()
		{
			Coordinates = coordinates;
			Normals = new List<List<IfcParameterValue>>();
			Closed = closed;

		}
		public static new IfcTessellatedFaceSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTessellatedFaceSet>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctriangulatedfaceset.htm"/>
	/// </summary>
	public  partial class IfcTriangulatedFaceSet : IfcTessellatedFaceSet
	{
		public List<List<int>> CoordIndex{get;set;} 
		public List<List<int>> NormalIndex{get;set;} // optional

		/// <summary>
		/// Construct a IfcTriangulatedFaceSet with all required attributes.
		/// </summary>
		public IfcTriangulatedFaceSet(IfcCartesianPointList3D coordinates,List<List<int>> coordIndex):base(coordinates)
		{
			CoordIndex = coordIndex;

		}
		/// <summary>
		/// Construct a IfcTriangulatedFaceSet with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTriangulatedFaceSet(IfcCartesianPointList3D coordinates,List<List<IfcParameterValue>> normals,bool closed,List<List<int>> coordIndex,List<List<int>> normalIndex):base(coordinates,normals,closed)
		{
			CoordIndex = coordIndex;
			NormalIndex = new List<List<int>>();

		}
		public static new IfcTriangulatedFaceSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTriangulatedFaceSet>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextliteralwithextent.htm"/>
	/// </summary>
	public  partial class IfcTextLiteralWithExtent : IfcTextLiteral
	{
		public IfcPlanarExtent Extent{get;set;} 
		public IfcBoxAlignment BoxAlignment{get;set;} 

		/// <summary>
		/// Construct a IfcTextLiteralWithExtent with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTextLiteralWithExtent(IfcPresentableText literal,IfcAxis2Placement placement,IfcTextPath path,IfcPlanarExtent extent,IfcBoxAlignment boxAlignment):base(literal,placement,path)
		{
			Extent = extent;
			BoxAlignment = boxAlignment;

		}
		public static new IfcTextLiteralWithExtent FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextLiteralWithExtent>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctexturecoordinategenerator.htm"/>
	/// </summary>
	public  partial class IfcTextureCoordinateGenerator : IfcTextureCoordinate
	{
		public IfcLabel Mode{get;set;} 
		public List<IfcReal> Parameter{get;set;} // optional

		/// <summary>
		/// Construct a IfcTextureCoordinateGenerator with all required attributes.
		/// </summary>
		public IfcTextureCoordinateGenerator(List<IfcSurfaceTexture> maps,IfcLabel mode):base(maps)
		{
			Mode = mode;

		}
		/// <summary>
		/// Construct a IfcTextureCoordinateGenerator with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTextureCoordinateGenerator(List<IfcSurfaceTexture> maps,IfcLabel mode,List<IfcReal> parameter):base(maps)
		{
			Mode = mode;
			Parameter = new List<IfcReal>();

		}
		public static new IfcTextureCoordinateGenerator FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextureCoordinateGenerator>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctexturemap.htm"/>
	/// </summary>
	public  partial class IfcTextureMap : IfcTextureCoordinate
	{
		public List<IfcTextureVertex> Vertices{get;set;} 
		public IfcFace MappedTo{get;set;} 

		/// <summary>
		/// Construct a IfcTextureMap with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTextureMap(List<IfcSurfaceTexture> maps,List<IfcTextureVertex> vertices,IfcFace mappedTo):base(maps)
		{
			Vertices = vertices;
			MappedTo = mappedTo;

		}
		public static new IfcTextureMap FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextureMap>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimeperiod.htm"/>
	/// </summary>
	public  partial class IfcTimePeriod : BaseIfc
	{
		public IfcTime StartTime{get;set;} 
		public IfcTime EndTime{get;set;} 

		/// <summary>
		/// Construct a IfcTimePeriod with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTimePeriod(IfcTime startTime,IfcTime endTime):base()
		{
			StartTime = startTime;
			EndTime = endTime;

		}
		public static  IfcTimePeriod FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTimePeriod>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimeseriesvalue.htm"/>
	/// </summary>
	public  partial class IfcTimeSeriesValue : BaseIfc
	{
		public List<IfcValue> ListValues{get;set;} 

		/// <summary>
		/// Construct a IfcTimeSeriesValue with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcTimeSeriesValue(List<IfcValue> listValues):base()
		{
			ListValues = listValues;

		}
		public static  IfcTimeSeriesValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTimeSeriesValue>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvertex.htm"/>
	/// </summary>
	public  partial class IfcVertex : IfcTopologicalRepresentationItem
	{
		/// <summary>
		/// Construct a IfcVertex with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcVertex():base()
		{

		}
		public static new IfcVertex FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVertex>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowstyle.htm"/>
	/// </summary>
	public  partial class IfcWindowStyle : IfcTypeProduct
	{
		public IfcWindowStyleConstructionEnum ConstructionType{get;set;} 
		public IfcWindowStyleOperationEnum OperationType{get;set;} 
		public bool ParameterTakesPrecedence{get;set;} 
		public bool Sizeable{get;set;} 

		/// <summary>
		/// Construct a IfcWindowStyle with all required attributes.
		/// </summary>
		public IfcWindowStyle(IfcGloballyUniqueId globalId,IfcWindowStyleConstructionEnum constructionType,IfcWindowStyleOperationEnum operationType,bool parameterTakesPrecedence,bool sizeable):base(globalId)
		{
			ConstructionType = constructionType;
			OperationType = operationType;
			ParameterTakesPrecedence = parameterTakesPrecedence;
			Sizeable = sizeable;

		}
		/// <summary>
		/// Construct a IfcWindowStyle with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWindowStyle(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcIdentifier applicableOccurrence,List<IfcPropertySetDefinition> hasPropertySets,List<IfcRepresentationMap> representationMaps,IfcLabel tag,IfcWindowStyleConstructionEnum constructionType,IfcWindowStyleOperationEnum operationType,bool parameterTakesPrecedence,bool sizeable):base(globalId,ownerHistory,name,description,applicableOccurrence,hasPropertySets,representationMaps,tag)
		{
			ConstructionType = constructionType;
			OperationType = operationType;
			ParameterTakesPrecedence = parameterTakesPrecedence;
			Sizeable = sizeable;

		}
		public static new IfcWindowStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWindowStyle>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitassignment.htm"/>
	/// </summary>
	public  partial class IfcUnitAssignment : BaseIfc
	{
		public List<IfcUnit> Units{get;set;} 

		/// <summary>
		/// Construct a IfcUnitAssignment with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcUnitAssignment(List<IfcUnit> units):base()
		{
			Units = units;

		}
		public static  IfcUnitAssignment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUnitAssignment>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvertexpoint.htm"/>
	/// </summary>
	public  partial class IfcVertexPoint : IfcVertex
	{
		public IfcPoint VertexGeometry{get;set;} 

		/// <summary>
		/// Construct a IfcVertexPoint with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcVertexPoint(IfcPoint vertexGeometry):base()
		{
			VertexGeometry = vertexGeometry;

		}
		public static new IfcVertexPoint FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVertexPoint>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvirtualgridintersection.htm"/>
	/// </summary>
	public  partial class IfcVirtualGridIntersection : BaseIfc
	{
		public List<IfcGridAxis> IntersectingAxes{get;set;} 
		public List<IfcLengthMeasure> OffsetDistances{get;set;} 

		/// <summary>
		/// Construct a IfcVirtualGridIntersection with all required attributes.
		/// </summary>
		[JsonConstructor]
		public IfcVirtualGridIntersection(List<IfcGridAxis> intersectingAxes,List<IfcLengthMeasure> offsetDistances):base()
		{
			IntersectingAxes = intersectingAxes;
			OffsetDistances = offsetDistances;

		}
		public static  IfcVirtualGridIntersection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVirtualGridIntersection>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwallelementedcase.htm"/>
	/// </summary>
	public  partial class IfcWallElementedCase : IfcWall
	{
		/// <summary>
		/// Construct a IfcWallElementedCase with all required attributes.
		/// </summary>
		public IfcWallElementedCase(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcWallElementedCase with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWallElementedCase(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcWallTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,predefinedType)
		{

		}
		public static new IfcWallElementedCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWallElementedCase>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwallstandardcase.htm"/>
	/// </summary>
	public  partial class IfcWallStandardCase : IfcWall
	{
		/// <summary>
		/// Construct a IfcWallStandardCase with all required attributes.
		/// </summary>
		public IfcWallStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcWallStandardCase with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWallStandardCase(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcWallTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,predefinedType)
		{

		}
		public static new IfcWallStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWallStandardCase>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowstandardcase.htm"/>
	/// </summary>
	public  partial class IfcWindowStandardCase : IfcWindow
	{
		/// <summary>
		/// Construct a IfcWindowStandardCase with all required attributes.
		/// </summary>
		public IfcWindowStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{

		}
		/// <summary>
		/// Construct a IfcWindowStandardCase with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWindowStandardCase(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcObjectPlacement objectPlacement,IfcProductRepresentation representation,IfcIdentifier tag,IfcPositiveLengthMeasure overallHeight,IfcPositiveLengthMeasure overallWidth,IfcWindowTypeEnum predefinedType,IfcWindowTypePartitioningEnum partitioningType,IfcLabel userDefinedPartitioningType):base(globalId,ownerHistory,name,description,objectType,objectPlacement,representation,tag,overallHeight,overallWidth,predefinedType,partitioningType,userDefinedPartitioningType)
		{

		}
		public static new IfcWindowStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWindowStandardCase>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkplan.htm"/>
	/// </summary>
	public  partial class IfcWorkPlan : IfcWorkControl
	{
		public IfcWorkPlanTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcWorkPlan with all required attributes.
		/// </summary>
		public IfcWorkPlan(IfcGloballyUniqueId globalId,IfcDateTime creationDate,IfcDateTime startTime):base(globalId,creationDate,startTime)
		{

		}
		/// <summary>
		/// Construct a IfcWorkPlan with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWorkPlan(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcDateTime creationDate,List<IfcPerson> creators,IfcLabel purpose,IfcDuration duration,IfcDuration totalFloat,IfcDateTime startTime,IfcDateTime finishTime,IfcWorkPlanTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,identification,creationDate,creators,purpose,duration,totalFloat,startTime,finishTime)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcWorkPlan FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWorkPlan>(json);
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkschedule.htm"/>
	/// </summary>
	public  partial class IfcWorkSchedule : IfcWorkControl
	{
		public IfcWorkScheduleTypeEnum PredefinedType{get;set;} // optional

		/// <summary>
		/// Construct a IfcWorkSchedule with all required attributes.
		/// </summary>
		public IfcWorkSchedule(IfcGloballyUniqueId globalId,IfcDateTime creationDate,IfcDateTime startTime):base(globalId,creationDate,startTime)
		{

		}
		/// <summary>
		/// Construct a IfcWorkSchedule with required and optional attributes.
		/// </summary>
		[JsonConstructor]
		public IfcWorkSchedule(IfcGloballyUniqueId globalId,IfcOwnerHistory ownerHistory,IfcLabel name,IfcText description,IfcLabel objectType,IfcIdentifier identification,IfcDateTime creationDate,List<IfcPerson> creators,IfcLabel purpose,IfcDuration duration,IfcDuration totalFloat,IfcDateTime startTime,IfcDateTime finishTime,IfcWorkScheduleTypeEnum predefinedType):base(globalId,ownerHistory,name,description,objectType,identification,creationDate,creators,purpose,duration,totalFloat,startTime,finishTime)
		{
			PredefinedType = predefinedType;

		}
		public static new IfcWorkSchedule FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWorkSchedule>(json);
		}
	}
}
